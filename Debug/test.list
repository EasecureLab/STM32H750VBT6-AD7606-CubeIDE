
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a64  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006cfc  08006cfc  00016cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006d3c  08006d3c  00016d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006d40  08006d40  00016d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000138  20000010  08006d54  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000148  08006d54  00020148  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018ddd  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000291b  00000000  00000000  00038e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  0003b738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc0  00000000  00000000  0003c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000360df  00000000  00000000  0003cf70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000108c8  00000000  00000000  0007304f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159dc8  00000000  00000000  00083917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001dd6df  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003398  00000000  00000000  001dd734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006ce4 	.word	0x08006ce4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08006ce4 	.word	0x08006ce4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <AD7606_StartConvst>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AD7606_StartConvst(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CO_A_GPIO_Port, CO_A_Pin, GPIO_PIN_RESET); //	CO_A_L;
 80005d4:	2200      	movs	r2, #0
 80005d6:	2120      	movs	r1, #32
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <AD7606_StartConvst+0x3c>)
 80005da:	f001 fd29 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CO_B_GPIO_Port, CO_B_Pin, GPIO_PIN_RESET); //	CO_B_L;
 80005de:	2200      	movs	r2, #0
 80005e0:	2140      	movs	r1, #64	; 0x40
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <AD7606_StartConvst+0x3c>)
 80005e4:	f001 fd24 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fcb7 	bl	8000f5c <HAL_Delay>
//	for(int i = 20; i > 0; i--){
//		__NOP();//1000/168 ns = 5.85ns
//	}
	HAL_GPIO_WritePin(CO_A_GPIO_Port, CO_A_Pin, GPIO_PIN_SET); //	CO_A_H;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <AD7606_StartConvst+0x3c>)
 80005f4:	f001 fd1c 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CO_B_GPIO_Port, CO_B_Pin, GPIO_PIN_SET); //	CO_B_H;
 80005f8:	2201      	movs	r2, #1
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <AD7606_StartConvst+0x3c>)
 80005fe:	f001 fd17 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fcaa 	bl	8000f5c <HAL_Delay>
//	for(int i = 20; i > 0; i--){
//		__NOP();//1000/168 ns = 5.85ns
//	}
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	58020800 	.word	0x58020800

08000610 <AD7606_RESET>:

void AD7606_RESET(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REST_GPIO_Port, REST_Pin, GPIO_PIN_RESET); //REST_L;
 8000614:	2200      	movs	r2, #0
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <AD7606_RESET+0x34>)
 800061a:	f001 fd09 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fc9c 	bl	8000f5c <HAL_Delay>
//	for(int i = 20; i > 0; i--){
//		__NOP();//1000/168 ns = 5.85ns
//	}
	HAL_GPIO_WritePin(REST_GPIO_Port, REST_Pin, GPIO_PIN_SET); //REST_H;
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <AD7606_RESET+0x34>)
 800062a:	f001 fd01 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fc94 	bl	8000f5c <HAL_Delay>
//	for(int i = 20; i > 0; i--){
//		__NOP();//1000/168 ns = 5.85ns
//	}
	HAL_GPIO_WritePin(REST_GPIO_Port, REST_Pin, GPIO_PIN_RESET); //REST_L;
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <AD7606_RESET+0x34>)
 800063a:	f001 fcf9 	bl	8002030 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	58020800 	.word	0x58020800

08000648 <AD7606_Init>:

void AD7606_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
//	MX_SPI2_Init();
//	GPIO_AD7606_Configuration();
	HAL_GPIO_WritePin(CO_A_GPIO_Port, CO_A_Pin, GPIO_PIN_SET); //	CO_A_H;
 800064c:	2201      	movs	r2, #1
 800064e:	2120      	movs	r1, #32
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <AD7606_Init+0x3c>)
 8000652:	f001 fced 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CO_B_GPIO_Port, CO_B_Pin, GPIO_PIN_SET); //	CO_B_H;
 8000656:	2201      	movs	r2, #1
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <AD7606_Init+0x3c>)
 800065c:	f001 fce8 	bl	8002030 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fc7b 	bl	8000f5c <HAL_Delay>
	HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, GPIO_PIN_SET); //SER_H;
 8000666:	2201      	movs	r2, #1
 8000668:	2108      	movs	r1, #8
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <AD7606_Init+0x3c>)
 800066c:	f001 fce0 	bl	8002030 <HAL_GPIO_WritePin>

	AD7606_RESET();
 8000670:	f7ff ffce 	bl	8000610 <AD7606_RESET>
	HAL_Delay(1);
 8000674:	2001      	movs	r0, #1
 8000676:	f000 fc71 	bl	8000f5c <HAL_Delay>
	AD7606_StartConvst();
 800067a:	f7ff ffa9 	bl	80005d0 <AD7606_StartConvst>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	58020800 	.word	0x58020800

08000688 <AD7606_ReadData>:


void AD7606_ReadData(int * DB_data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive(&hspi2, (uint8_t *)DB_data, 8, 1000);
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	2208      	movs	r2, #8
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <AD7606_ReadData+0x20>)
 800069a:	f004 f91d 	bl	80048d8 <HAL_SPI_Receive>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000002c 	.word	0x2000002c

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
// uint8_t UART_BUF[12] = "you press A!";
 uint8_t dis_buf[40];
 int16_t DB_data[8] = {0};
 80006b2:	463b      	mov	r3, r7
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006be:	f000 fbbb 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c2:	f000 f82b 	bl	800071c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006c6:	f000 f8a7 	bl	8000818 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ca:	f000 f965 	bl	8000998 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006ce:	f000 f8bf 	bl	8000850 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 80006d2:	f000 f909 	bl	80008e8 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  AD7606_Init();
 80006d6:	f7ff ffb7 	bl	8000648 <AD7606_Init>

    /* USER CODE BEGIN 3 */
//	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET); // �øߣ�������
//	  HAL_Delay(500); // ��ʱ 500ms
//	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);// �õͣ�������
	  HAL_Delay(500); // ��ʱ 500ms
 80006da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006de:	f000 fc3d 	bl	8000f5c <HAL_Delay>

//	  HAL_UART_Transmit(&hlpuart1,UART_BUF,12,0xffff);
	  AD7606_StartConvst();
 80006e2:	f7ff ff75 	bl	80005d0 <AD7606_StartConvst>
	  while((HAL_GPIO_ReadPin(GPIOA,BUSY_Pin) == GPIO_PIN_SET))	//
 80006e6:	e002      	b.n	80006ee <main+0x42>
		  HAL_Delay(10);
 80006e8:	200a      	movs	r0, #10
 80006ea:	f000 fc37 	bl	8000f5c <HAL_Delay>
	  while((HAL_GPIO_ReadPin(GPIOA,BUSY_Pin) == GPIO_PIN_SET))	//
 80006ee:	2101      	movs	r1, #1
 80006f0:	4808      	ldr	r0, [pc, #32]	; (8000714 <main+0x68>)
 80006f2:	f001 fc85 	bl	8002000 <HAL_GPIO_ReadPin>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d0f5      	beq.n	80006e8 <main+0x3c>
	  AD7606_ReadData(DB_data);
 80006fc:	463b      	mov	r3, r7
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffc2 	bl	8000688 <AD7606_ReadData>
//	  DB_data[i];
//	  temp =(uint16_t)(DB_data[3]^0x8000);
//	  HAL_UART_Transmit(&hlpuart1,temp >> 8,1,0xffff); //& 0xff
//	  HAL_UART_Transmit(&hlpuart1,temp & 0xff,1,0xffff);
//	  HAL_Delay(100);
	  HAL_UART_Transmit(&hlpuart1,'C',1,0xffff);
 8000704:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000708:	2201      	movs	r2, #1
 800070a:	2143      	movs	r1, #67	; 0x43
 800070c:	4802      	ldr	r0, [pc, #8]	; (8000718 <main+0x6c>)
 800070e:	f004 fefa 	bl	8005506 <HAL_UART_Transmit>
	  HAL_Delay(500); // ��ʱ 500ms
 8000712:	e7e2      	b.n	80006da <main+0x2e>
 8000714:	58020000 	.word	0x58020000
 8000718:	200000b4 	.word	0x200000b4

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b09c      	sub	sp, #112	; 0x70
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000726:	224c      	movs	r2, #76	; 0x4c
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 fad2 	bl	8006cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	2220      	movs	r2, #32
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f006 facc 	bl	8006cd4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800073c:	2002      	movs	r0, #2
 800073e:	f001 fc91 	bl	8002064 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b32      	ldr	r3, [pc, #200]	; (8000810 <SystemClock_Config+0xf4>)
 8000748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074a:	4a31      	ldr	r2, [pc, #196]	; (8000810 <SystemClock_Config+0xf4>)
 800074c:	f023 0301 	bic.w	r3, r3, #1
 8000750:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <SystemClock_Config+0xf4>)
 8000754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <SystemClock_Config+0xf8>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a2c      	ldr	r2, [pc, #176]	; (8000814 <SystemClock_Config+0xf8>)
 8000762:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <SystemClock_Config+0xf8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000774:	bf00      	nop
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <SystemClock_Config+0xf8>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800077e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000782:	d1f8      	bne.n	8000776 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000784:	2303      	movs	r3, #3
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800078e:	2301      	movs	r3, #1
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000792:	2340      	movs	r3, #64	; 0x40
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000796:	2302      	movs	r3, #2
 8000798:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800079a:	2302      	movs	r3, #2
 800079c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800079e:	2305      	movs	r3, #5
 80007a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 80007a2:	23a0      	movs	r3, #160	; 0xa0
 80007a4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007aa:	2302      	movs	r3, #2
 80007ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ae:	2302      	movs	r3, #2
 80007b0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007b2:	2308      	movs	r3, #8
 80007b4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fc88 	bl	80020d8 <HAL_RCC_OscConfig>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007ce:	f000 f953 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d2:	233f      	movs	r3, #63	; 0x3f
 80007d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d6:	2303      	movs	r3, #3
 80007d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007de:	2308      	movs	r3, #8
 80007e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007e2:	2340      	movs	r3, #64	; 0x40
 80007e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007e6:	2340      	movs	r3, #64	; 0x40
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007f0:	2340      	movs	r3, #64	; 0x40
 80007f2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2102      	movs	r1, #2
 80007f8:	4618      	mov	r0, r3
 80007fa:	f002 f87d 	bl	80028f8 <HAL_RCC_ClockConfig>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000804:	f000 f938 	bl	8000a78 <Error_Handler>
  }
}
 8000808:	bf00      	nop
 800080a:	3770      	adds	r7, #112	; 0x70
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	58000400 	.word	0x58000400
 8000814:	58024800 	.word	0x58024800

08000818 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b0b0      	sub	sp, #192	; 0xc0
 800081c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	22bc      	movs	r2, #188	; 0xbc
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f006 fa55 	bl	8006cd4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800082a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800082e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f002 fbea 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 8000842:	f000 f919 	bl	8000a78 <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	37c0      	adds	r7, #192	; 0xc0
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000856:	4a23      	ldr	r2, [pc, #140]	; (80008e4 <MX_LPUART1_UART_Init+0x94>)
 8000858:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800085a:	4b21      	ldr	r3, [pc, #132]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800085c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000860:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000862:	4b1f      	ldr	r3, [pc, #124]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000868:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000874:	4b1a      	ldr	r3, [pc, #104]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000876:	220c      	movs	r2, #12
 8000878:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800087a:	4b19      	ldr	r3, [pc, #100]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800087c:	2200      	movs	r2, #0
 800087e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000882:	2200      	movs	r2, #0
 8000884:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000888:	2200      	movs	r2, #0
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800088e:	2200      	movs	r2, #0
 8000890:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 8000894:	2200      	movs	r2, #0
 8000896:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000898:	4811      	ldr	r0, [pc, #68]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 800089a:	f004 fde4 	bl	8005466 <HAL_UART_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80008a4:	f000 f8e8 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008a8:	2100      	movs	r1, #0
 80008aa:	480d      	ldr	r0, [pc, #52]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 80008ac:	f006 f923 	bl	8006af6 <HAL_UARTEx_SetTxFifoThreshold>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008b6:	f000 f8df 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4808      	ldr	r0, [pc, #32]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 80008be:	f006 f958 	bl	8006b72 <HAL_UARTEx_SetRxFifoThreshold>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008c8:	f000 f8d6 	bl	8000a78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_LPUART1_UART_Init+0x90>)
 80008ce:	f006 f8d9 	bl	8006a84 <HAL_UARTEx_DisableFifoMode>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80008d8:	f000 f8ce 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200000b4 	.word	0x200000b4
 80008e4:	58000c00 	.word	0x58000c00

080008e8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008ec:	4b28      	ldr	r3, [pc, #160]	; (8000990 <MX_SPI2_Init+0xa8>)
 80008ee:	4a29      	ldr	r2, [pc, #164]	; (8000994 <MX_SPI2_Init+0xac>)
 80008f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <MX_SPI2_Init+0xa8>)
 80008f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80008f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80008fa:	4b25      	ldr	r3, [pc, #148]	; (8000990 <MX_SPI2_Init+0xa8>)
 80008fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000900:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000904:	220f      	movs	r2, #15
 8000906:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000908:	4b21      	ldr	r3, [pc, #132]	; (8000990 <MX_SPI2_Init+0xa8>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000910:	2200      	movs	r2, #0
 8000912:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000914:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000916:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800091a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_SPI2_Init+0xa8>)
 800091e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000922:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000924:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000926:	2200      	movs	r2, #0
 8000928:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_SPI2_Init+0xa8>)
 800092c:	2200      	movs	r2, #0
 800092e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000932:	2200      	movs	r2, #0
 8000934:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI2_Init+0xa8>)
 800093e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000946:	2200      	movs	r2, #0
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI2_Init+0xa8>)
 800094c:	2200      	movs	r2, #0
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000952:	2200      	movs	r2, #0
 8000954:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000958:	2200      	movs	r2, #0
 800095a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI2_Init+0xa8>)
 800095e:	2200      	movs	r2, #0
 8000960:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000964:	2200      	movs	r2, #0
 8000966:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI2_Init+0xa8>)
 800096a:	2200      	movs	r2, #0
 800096c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000970:	2200      	movs	r2, #0
 8000972:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI2_Init+0xa8>)
 8000976:	2200      	movs	r2, #0
 8000978:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_SPI2_Init+0xa8>)
 800097c:	f003 feaa 	bl	80046d4 <HAL_SPI_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000986:	f000 f877 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	2000002c 	.word	0x2000002c
 8000994:	40003800 	.word	0x40003800

08000998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d2:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009d4:	f043 0304 	orr.w	r3, r3, #4
 80009d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009dc:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <MX_GPIO_Init+0xd4>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_GPIO_Init+0xd4>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a0e:	4a17      	ldr	r2, [pc, #92]	; (8000a6c <MX_GPIO_Init+0xd4>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_GPIO_Init+0xd4>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	f003 0302 	and.w	r3, r3, #2
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SER_Pin|CO_A_Pin|CO_B_Pin|REST_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	21e8      	movs	r1, #232	; 0xe8
 8000a2a:	4811      	ldr	r0, [pc, #68]	; (8000a70 <MX_GPIO_Init+0xd8>)
 8000a2c:	f001 fb00 	bl	8002030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SER_Pin CO_A_Pin CO_B_Pin REST_Pin */
  GPIO_InitStruct.Pin = SER_Pin|CO_A_Pin|CO_B_Pin|REST_Pin;
 8000a30:	23e8      	movs	r3, #232	; 0xe8
 8000a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	480a      	ldr	r0, [pc, #40]	; (8000a70 <MX_GPIO_Init+0xd8>)
 8000a48:	f001 f92a 	bl	8001ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a54:	2301      	movs	r3, #1
 8000a56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0xdc>)
 8000a60:	f001 f91e 	bl	8001ca0 <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58024400 	.word	0x58024400
 8000a70:	58020800 	.word	0x58020800
 8000a74:	58020000 	.word	0x58020000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <Error_Handler+0x8>
	...

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_MspInit+0x34>)
 8000a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a90:	4a09      	ldr	r2, [pc, #36]	; (8000ab8 <HAL_MspInit+0x34>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <HAL_MspInit+0x34>)
 8000a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000aa8:	2005      	movs	r0, #5
 8000aaa:	f000 fb57 	bl	800115c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	58024400 	.word	0x58024400

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0b8      	sub	sp, #224	; 0xe0
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	22bc      	movs	r2, #188	; 0xbc
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f006 f8f9 	bl	8006cd4 <memset>
  if(huart->Instance==LPUART1)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a29      	ldr	r2, [pc, #164]	; (8000b8c <HAL_UART_MspInit+0xd0>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d14a      	bne.n	8000b82 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000aec:	2304      	movs	r3, #4
 8000aee:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	4618      	mov	r0, r3
 8000afc:	f002 fa88 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ffb7 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b10:	4a1f      	ldr	r2, [pc, #124]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b12:	f043 0308 	orr.w	r3, r3, #8
 8000b16:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b1a:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	4a18      	ldr	r2, [pc, #96]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <HAL_UART_MspInit+0xd4>)
 8000b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	60bb      	str	r3, [r7, #8]
 8000b44:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b46:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000b60:	2303      	movs	r3, #3
 8000b62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4809      	ldr	r0, [pc, #36]	; (8000b94 <HAL_UART_MspInit+0xd8>)
 8000b6e:	f001 f897 	bl	8001ca0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 3, 3);
 8000b72:	2203      	movs	r2, #3
 8000b74:	2103      	movs	r1, #3
 8000b76:	208e      	movs	r0, #142	; 0x8e
 8000b78:	f000 fafb 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000b7c:	208e      	movs	r0, #142	; 0x8e
 8000b7e:	f000 fb12 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000b82:	bf00      	nop
 8000b84:	37e0      	adds	r7, #224	; 0xe0
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	58000c00 	.word	0x58000c00
 8000b90:	58024400 	.word	0x58024400
 8000b94:	58020000 	.word	0x58020000

08000b98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0b8      	sub	sp, #224	; 0xe0
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	22bc      	movs	r2, #188	; 0xbc
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 f88b 	bl	8006cd4 <memset>
  if(hspi->Instance==SPI2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a25      	ldr	r2, [pc, #148]	; (8000c58 <HAL_SPI_MspInit+0xc0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d143      	bne.n	8000c50 <HAL_SPI_MspInit+0xb8>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000bce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f002 fa19 	bl	8003010 <HAL_RCCEx_PeriphCLKConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000be4:	f7ff ff48 	bl	8000a78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_SPI_MspInit+0xc4>)
 8000bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <HAL_SPI_MspInit+0xc4>)
 8000bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bf4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000bf8:	4b18      	ldr	r3, [pc, #96]	; (8000c5c <HAL_SPI_MspInit+0xc4>)
 8000bfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <HAL_SPI_MspInit+0xc4>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_SPI_MspInit+0xc4>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_SPI_MspInit+0xc4>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8000c24:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000c28:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c3e:	2305      	movs	r3, #5
 8000c40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4805      	ldr	r0, [pc, #20]	; (8000c60 <HAL_SPI_MspInit+0xc8>)
 8000c4c:	f001 f828 	bl	8001ca0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c50:	bf00      	nop
 8000c52:	37e0      	adds	r7, #224	; 0xe0
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40003800 	.word	0x40003800
 8000c5c:	58024400 	.word	0x58024400
 8000c60:	58020400 	.word	0x58020400

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c74:	e7fe      	b.n	8000c74 <MemManage_Handler+0x4>

08000c76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <BusFault_Handler+0x4>

08000c7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <UsageFault_Handler+0x4>

08000c82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9e:	b480      	push	{r7}
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f934 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <LPUART1_IRQHandler+0x10>)
 8000cbe:	f004 fcb9 	bl	8005634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000b4 	.word	0x200000b4

08000ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b39      	ldr	r3, [pc, #228]	; (8000db8 <SystemInit+0xec>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a38      	ldr	r2, [pc, #224]	; (8000db8 <SystemInit+0xec>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce0:	4b36      	ldr	r3, [pc, #216]	; (8000dbc <SystemInit+0xf0>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f003 030f 	and.w	r3, r3, #15
 8000ce8:	2b06      	cmp	r3, #6
 8000cea:	d807      	bhi.n	8000cfc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cec:	4b33      	ldr	r3, [pc, #204]	; (8000dbc <SystemInit+0xf0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 030f 	bic.w	r3, r3, #15
 8000cf4:	4a31      	ldr	r2, [pc, #196]	; (8000dbc <SystemInit+0xf0>)
 8000cf6:	f043 0307 	orr.w	r3, r3, #7
 8000cfa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000cfc:	4b30      	ldr	r3, [pc, #192]	; (8000dc0 <SystemInit+0xf4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a2f      	ldr	r2, [pc, #188]	; (8000dc0 <SystemInit+0xf4>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d08:	4b2d      	ldr	r3, [pc, #180]	; (8000dc0 <SystemInit+0xf4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d0e:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <SystemInit+0xf4>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	492b      	ldr	r1, [pc, #172]	; (8000dc0 <SystemInit+0xf4>)
 8000d14:	4b2b      	ldr	r3, [pc, #172]	; (8000dc4 <SystemInit+0xf8>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1a:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <SystemInit+0xf0>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f003 0308 	and.w	r3, r3, #8
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d007      	beq.n	8000d36 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <SystemInit+0xf0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	4a23      	ldr	r2, [pc, #140]	; (8000dbc <SystemInit+0xf0>)
 8000d30:	f043 0307 	orr.w	r3, r3, #7
 8000d34:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <SystemInit+0xf4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d3c:	4b20      	ldr	r3, [pc, #128]	; (8000dc0 <SystemInit+0xf4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <SystemInit+0xf4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d48:	4b1d      	ldr	r3, [pc, #116]	; (8000dc0 <SystemInit+0xf4>)
 8000d4a:	4a1f      	ldr	r2, [pc, #124]	; (8000dc8 <SystemInit+0xfc>)
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <SystemInit+0xf4>)
 8000d50:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <SystemInit+0x100>)
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d54:	4b1a      	ldr	r3, [pc, #104]	; (8000dc0 <SystemInit+0xf4>)
 8000d56:	4a1e      	ldr	r2, [pc, #120]	; (8000dd0 <SystemInit+0x104>)
 8000d58:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <SystemInit+0xf4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <SystemInit+0xf4>)
 8000d62:	4a1b      	ldr	r2, [pc, #108]	; (8000dd0 <SystemInit+0x104>)
 8000d64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <SystemInit+0xf4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <SystemInit+0xf4>)
 8000d6e:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <SystemInit+0x104>)
 8000d70:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <SystemInit+0xf4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d78:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <SystemInit+0xf4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <SystemInit+0xf4>)
 8000d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d82:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <SystemInit+0xf4>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <SystemInit+0x108>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <SystemInit+0x10c>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000d96:	d202      	bcs.n	8000d9e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <SystemInit+0x110>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <SystemInit+0x114>)
 8000da0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000da4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da6:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <SystemInit+0xec>)
 8000da8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dac:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	52002000 	.word	0x52002000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dc8:	02020200 	.word	0x02020200
 8000dcc:	01ff0000 	.word	0x01ff0000
 8000dd0:	01010280 	.word	0x01010280
 8000dd4:	5c001000 	.word	0x5c001000
 8000dd8:	ffff0000 	.word	0xffff0000
 8000ddc:	51008108 	.word	0x51008108
 8000de0:	52004000 	.word	0x52004000

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff ff70 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f005 ff3b 	bl	8006c8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fc49 	bl	80006ac <main>
  bx  lr
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e28:	08006d44 	.word	0x08006d44
  ldr r2, =_sbss
 8000e2c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e30:	20000148 	.word	0x20000148

08000e34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC3_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f98c 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e44:	f001 ff0e 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_Init+0x68>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	4913      	ldr	r1, [pc, #76]	; (8000ea4 <HAL_Init+0x6c>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <HAL_Init+0x68>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <HAL_Init+0x6c>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <HAL_Init+0x70>)
 8000e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <HAL_Init+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f814 	bl	8000eb0 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e002      	b.n	8000e98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fdf7 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	08006cfc 	.word	0x08006cfc
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	20000000 	.word	0x20000000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e021      	b.n	8000f08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <HAL_InitTick+0x64>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f000 f971 	bl	80011c2 <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f000 f93b 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	; (8000f18 <HAL_InitTick+0x68>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000000c 	.word	0x2000000c
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2000000c 	.word	0x2000000c
 8000f40:	20000144 	.word	0x20000144

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000144 	.word	0x20000144

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2000000c 	.word	0x2000000c

08000fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	; (8000fb8 <HAL_GetREVID+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x40>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00
 8001000:	05fa0000 	.word	0x05fa0000

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	88fb      	ldrh	r3, [r7, #6]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	; (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	; (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	88fb      	ldrh	r3, [r7, #6]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	; 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	; 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff40 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff90 	bl	80010b0 <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5f 	bl	800105c <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff33 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa4 	bl	8001118 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80011e4:	f7ff feae 	bl	8000f44 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d101      	bne.n	80011f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e2dc      	b.n	80017ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d008      	beq.n	8001212 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e2cd      	b.n	80017ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a76      	ldr	r2, [pc, #472]	; (80013f0 <HAL_DMA_Abort+0x214>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d04a      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a74      	ldr	r2, [pc, #464]	; (80013f4 <HAL_DMA_Abort+0x218>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d045      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a73      	ldr	r2, [pc, #460]	; (80013f8 <HAL_DMA_Abort+0x21c>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d040      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a71      	ldr	r2, [pc, #452]	; (80013fc <HAL_DMA_Abort+0x220>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d03b      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a70      	ldr	r2, [pc, #448]	; (8001400 <HAL_DMA_Abort+0x224>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d036      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a6e      	ldr	r2, [pc, #440]	; (8001404 <HAL_DMA_Abort+0x228>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d031      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a6d      	ldr	r2, [pc, #436]	; (8001408 <HAL_DMA_Abort+0x22c>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d02c      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a6b      	ldr	r2, [pc, #428]	; (800140c <HAL_DMA_Abort+0x230>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d027      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a6a      	ldr	r2, [pc, #424]	; (8001410 <HAL_DMA_Abort+0x234>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a68      	ldr	r2, [pc, #416]	; (8001414 <HAL_DMA_Abort+0x238>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d01d      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a67      	ldr	r2, [pc, #412]	; (8001418 <HAL_DMA_Abort+0x23c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d018      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a65      	ldr	r2, [pc, #404]	; (800141c <HAL_DMA_Abort+0x240>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d013      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a64      	ldr	r2, [pc, #400]	; (8001420 <HAL_DMA_Abort+0x244>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d00e      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a62      	ldr	r2, [pc, #392]	; (8001424 <HAL_DMA_Abort+0x248>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d009      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a61      	ldr	r2, [pc, #388]	; (8001428 <HAL_DMA_Abort+0x24c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d004      	beq.n	80012b2 <HAL_DMA_Abort+0xd6>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a5f      	ldr	r2, [pc, #380]	; (800142c <HAL_DMA_Abort+0x250>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_DMA_Abort+0xda>
 80012b2:	2301      	movs	r3, #1
 80012b4:	e000      	b.n	80012b8 <HAL_DMA_Abort+0xdc>
 80012b6:	2300      	movs	r3, #0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d013      	beq.n	80012e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f022 021e 	bic.w	r2, r2, #30
 80012ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	e00a      	b.n	80012fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 020e 	bic.w	r2, r2, #14
 80012f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <HAL_DMA_Abort+0x214>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d072      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a3a      	ldr	r2, [pc, #232]	; (80013f4 <HAL_DMA_Abort+0x218>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d06d      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a39      	ldr	r2, [pc, #228]	; (80013f8 <HAL_DMA_Abort+0x21c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d068      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a37      	ldr	r2, [pc, #220]	; (80013fc <HAL_DMA_Abort+0x220>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d063      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a36      	ldr	r2, [pc, #216]	; (8001400 <HAL_DMA_Abort+0x224>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d05e      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a34      	ldr	r2, [pc, #208]	; (8001404 <HAL_DMA_Abort+0x228>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d059      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a33      	ldr	r2, [pc, #204]	; (8001408 <HAL_DMA_Abort+0x22c>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d054      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a31      	ldr	r2, [pc, #196]	; (800140c <HAL_DMA_Abort+0x230>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d04f      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a30      	ldr	r2, [pc, #192]	; (8001410 <HAL_DMA_Abort+0x234>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d04a      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a2e      	ldr	r2, [pc, #184]	; (8001414 <HAL_DMA_Abort+0x238>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d045      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a2d      	ldr	r2, [pc, #180]	; (8001418 <HAL_DMA_Abort+0x23c>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d040      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a2b      	ldr	r2, [pc, #172]	; (800141c <HAL_DMA_Abort+0x240>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d03b      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_DMA_Abort+0x244>)
 8001378:	4293      	cmp	r3, r2
 800137a:	d036      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a28      	ldr	r2, [pc, #160]	; (8001424 <HAL_DMA_Abort+0x248>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d031      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a27      	ldr	r2, [pc, #156]	; (8001428 <HAL_DMA_Abort+0x24c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d02c      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a25      	ldr	r2, [pc, #148]	; (800142c <HAL_DMA_Abort+0x250>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d027      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <HAL_DMA_Abort+0x254>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d022      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a22      	ldr	r2, [pc, #136]	; (8001434 <HAL_DMA_Abort+0x258>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01d      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <HAL_DMA_Abort+0x25c>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d018      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1f      	ldr	r2, [pc, #124]	; (800143c <HAL_DMA_Abort+0x260>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d013      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1e      	ldr	r2, [pc, #120]	; (8001440 <HAL_DMA_Abort+0x264>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d00e      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <HAL_DMA_Abort+0x268>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d009      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <HAL_DMA_Abort+0x26c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d004      	beq.n	80013ea <HAL_DMA_Abort+0x20e>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a19      	ldr	r2, [pc, #100]	; (800144c <HAL_DMA_Abort+0x270>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d132      	bne.n	8001450 <HAL_DMA_Abort+0x274>
 80013ea:	2301      	movs	r3, #1
 80013ec:	e031      	b.n	8001452 <HAL_DMA_Abort+0x276>
 80013ee:	bf00      	nop
 80013f0:	40020010 	.word	0x40020010
 80013f4:	40020028 	.word	0x40020028
 80013f8:	40020040 	.word	0x40020040
 80013fc:	40020058 	.word	0x40020058
 8001400:	40020070 	.word	0x40020070
 8001404:	40020088 	.word	0x40020088
 8001408:	400200a0 	.word	0x400200a0
 800140c:	400200b8 	.word	0x400200b8
 8001410:	40020410 	.word	0x40020410
 8001414:	40020428 	.word	0x40020428
 8001418:	40020440 	.word	0x40020440
 800141c:	40020458 	.word	0x40020458
 8001420:	40020470 	.word	0x40020470
 8001424:	40020488 	.word	0x40020488
 8001428:	400204a0 	.word	0x400204a0
 800142c:	400204b8 	.word	0x400204b8
 8001430:	58025408 	.word	0x58025408
 8001434:	5802541c 	.word	0x5802541c
 8001438:	58025430 	.word	0x58025430
 800143c:	58025444 	.word	0x58025444
 8001440:	58025458 	.word	0x58025458
 8001444:	5802546c 	.word	0x5802546c
 8001448:	58025480 	.word	0x58025480
 800144c:	58025494 	.word	0x58025494
 8001450:	2300      	movs	r3, #0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d007      	beq.n	8001466 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001460:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001464:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a6d      	ldr	r2, [pc, #436]	; (8001620 <HAL_DMA_Abort+0x444>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d04a      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	; (8001624 <HAL_DMA_Abort+0x448>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d045      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6a      	ldr	r2, [pc, #424]	; (8001628 <HAL_DMA_Abort+0x44c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d040      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a68      	ldr	r2, [pc, #416]	; (800162c <HAL_DMA_Abort+0x450>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d03b      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_DMA_Abort+0x454>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d036      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_DMA_Abort+0x458>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d031      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_DMA_Abort+0x45c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d02c      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a62      	ldr	r2, [pc, #392]	; (800163c <HAL_DMA_Abort+0x460>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d027      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a61      	ldr	r2, [pc, #388]	; (8001640 <HAL_DMA_Abort+0x464>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a5f      	ldr	r2, [pc, #380]	; (8001644 <HAL_DMA_Abort+0x468>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a5e      	ldr	r2, [pc, #376]	; (8001648 <HAL_DMA_Abort+0x46c>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d018      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a5c      	ldr	r2, [pc, #368]	; (800164c <HAL_DMA_Abort+0x470>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d013      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a5b      	ldr	r2, [pc, #364]	; (8001650 <HAL_DMA_Abort+0x474>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d00e      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a59      	ldr	r2, [pc, #356]	; (8001654 <HAL_DMA_Abort+0x478>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d009      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a58      	ldr	r2, [pc, #352]	; (8001658 <HAL_DMA_Abort+0x47c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d004      	beq.n	8001506 <HAL_DMA_Abort+0x32a>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_DMA_Abort+0x480>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d108      	bne.n	8001518 <HAL_DMA_Abort+0x33c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 0201 	bic.w	r2, r2, #1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e007      	b.n	8001528 <HAL_DMA_Abort+0x34c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001528:	e013      	b.n	8001552 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800152a:	f7ff fd0b 	bl	8000f44 <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b05      	cmp	r3, #5
 8001536:	d90c      	bls.n	8001552 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2220      	movs	r2, #32
 800153c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2203      	movs	r2, #3
 800154a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e12d      	b.n	80017ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1e5      	bne.n	800152a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2f      	ldr	r2, [pc, #188]	; (8001620 <HAL_DMA_Abort+0x444>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d04a      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a2d      	ldr	r2, [pc, #180]	; (8001624 <HAL_DMA_Abort+0x448>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d045      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a2c      	ldr	r2, [pc, #176]	; (8001628 <HAL_DMA_Abort+0x44c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d040      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2a      	ldr	r2, [pc, #168]	; (800162c <HAL_DMA_Abort+0x450>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d03b      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_DMA_Abort+0x454>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d036      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a27      	ldr	r2, [pc, #156]	; (8001634 <HAL_DMA_Abort+0x458>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d031      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a26      	ldr	r2, [pc, #152]	; (8001638 <HAL_DMA_Abort+0x45c>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d02c      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a24      	ldr	r2, [pc, #144]	; (800163c <HAL_DMA_Abort+0x460>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d027      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_DMA_Abort+0x464>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d022      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a21      	ldr	r2, [pc, #132]	; (8001644 <HAL_DMA_Abort+0x468>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d01d      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a20      	ldr	r2, [pc, #128]	; (8001648 <HAL_DMA_Abort+0x46c>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d018      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a1e      	ldr	r2, [pc, #120]	; (800164c <HAL_DMA_Abort+0x470>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d013      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_DMA_Abort+0x474>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	d00e      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_DMA_Abort+0x478>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d009      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a1a      	ldr	r2, [pc, #104]	; (8001658 <HAL_DMA_Abort+0x47c>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d004      	beq.n	80015fe <HAL_DMA_Abort+0x422>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a18      	ldr	r2, [pc, #96]	; (800165c <HAL_DMA_Abort+0x480>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_DMA_Abort+0x426>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <HAL_DMA_Abort+0x428>
 8001602:	2300      	movs	r3, #0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d02b      	beq.n	8001660 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001612:	f003 031f 	and.w	r3, r3, #31
 8001616:	223f      	movs	r2, #63	; 0x3f
 8001618:	409a      	lsls	r2, r3
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	e02a      	b.n	8001676 <HAL_DMA_Abort+0x49a>
 8001620:	40020010 	.word	0x40020010
 8001624:	40020028 	.word	0x40020028
 8001628:	40020040 	.word	0x40020040
 800162c:	40020058 	.word	0x40020058
 8001630:	40020070 	.word	0x40020070
 8001634:	40020088 	.word	0x40020088
 8001638:	400200a0 	.word	0x400200a0
 800163c:	400200b8 	.word	0x400200b8
 8001640:	40020410 	.word	0x40020410
 8001644:	40020428 	.word	0x40020428
 8001648:	40020440 	.word	0x40020440
 800164c:	40020458 	.word	0x40020458
 8001650:	40020470 	.word	0x40020470
 8001654:	40020488 	.word	0x40020488
 8001658:	400204a0 	.word	0x400204a0
 800165c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001664:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	f003 031f 	and.w	r3, r3, #31
 800166e:	2201      	movs	r2, #1
 8001670:	409a      	lsls	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <HAL_DMA_Abort+0x5dc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d072      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a4d      	ldr	r2, [pc, #308]	; (80017bc <HAL_DMA_Abort+0x5e0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d06d      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a4c      	ldr	r2, [pc, #304]	; (80017c0 <HAL_DMA_Abort+0x5e4>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d068      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a4a      	ldr	r2, [pc, #296]	; (80017c4 <HAL_DMA_Abort+0x5e8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d063      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a49      	ldr	r2, [pc, #292]	; (80017c8 <HAL_DMA_Abort+0x5ec>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d05e      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a47      	ldr	r2, [pc, #284]	; (80017cc <HAL_DMA_Abort+0x5f0>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d059      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a46      	ldr	r2, [pc, #280]	; (80017d0 <HAL_DMA_Abort+0x5f4>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d054      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a44      	ldr	r2, [pc, #272]	; (80017d4 <HAL_DMA_Abort+0x5f8>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d04f      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a43      	ldr	r2, [pc, #268]	; (80017d8 <HAL_DMA_Abort+0x5fc>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d04a      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a41      	ldr	r2, [pc, #260]	; (80017dc <HAL_DMA_Abort+0x600>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d045      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a40      	ldr	r2, [pc, #256]	; (80017e0 <HAL_DMA_Abort+0x604>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d040      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a3e      	ldr	r2, [pc, #248]	; (80017e4 <HAL_DMA_Abort+0x608>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d03b      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a3d      	ldr	r2, [pc, #244]	; (80017e8 <HAL_DMA_Abort+0x60c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d036      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a3b      	ldr	r2, [pc, #236]	; (80017ec <HAL_DMA_Abort+0x610>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d031      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3a      	ldr	r2, [pc, #232]	; (80017f0 <HAL_DMA_Abort+0x614>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d02c      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a38      	ldr	r2, [pc, #224]	; (80017f4 <HAL_DMA_Abort+0x618>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d027      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a37      	ldr	r2, [pc, #220]	; (80017f8 <HAL_DMA_Abort+0x61c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d022      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a35      	ldr	r2, [pc, #212]	; (80017fc <HAL_DMA_Abort+0x620>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d01d      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a34      	ldr	r2, [pc, #208]	; (8001800 <HAL_DMA_Abort+0x624>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d018      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a32      	ldr	r2, [pc, #200]	; (8001804 <HAL_DMA_Abort+0x628>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d013      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a31      	ldr	r2, [pc, #196]	; (8001808 <HAL_DMA_Abort+0x62c>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d00e      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a2f      	ldr	r2, [pc, #188]	; (800180c <HAL_DMA_Abort+0x630>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d009      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a2e      	ldr	r2, [pc, #184]	; (8001810 <HAL_DMA_Abort+0x634>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d004      	beq.n	8001766 <HAL_DMA_Abort+0x58a>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2c      	ldr	r2, [pc, #176]	; (8001814 <HAL_DMA_Abort+0x638>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d101      	bne.n	800176a <HAL_DMA_Abort+0x58e>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_DMA_Abort+0x590>
 800176a:	2300      	movs	r3, #0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d015      	beq.n	800179c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001778:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800178c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001790:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800179a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40020010 	.word	0x40020010
 80017bc:	40020028 	.word	0x40020028
 80017c0:	40020040 	.word	0x40020040
 80017c4:	40020058 	.word	0x40020058
 80017c8:	40020070 	.word	0x40020070
 80017cc:	40020088 	.word	0x40020088
 80017d0:	400200a0 	.word	0x400200a0
 80017d4:	400200b8 	.word	0x400200b8
 80017d8:	40020410 	.word	0x40020410
 80017dc:	40020428 	.word	0x40020428
 80017e0:	40020440 	.word	0x40020440
 80017e4:	40020458 	.word	0x40020458
 80017e8:	40020470 	.word	0x40020470
 80017ec:	40020488 	.word	0x40020488
 80017f0:	400204a0 	.word	0x400204a0
 80017f4:	400204b8 	.word	0x400204b8
 80017f8:	58025408 	.word	0x58025408
 80017fc:	5802541c 	.word	0x5802541c
 8001800:	58025430 	.word	0x58025430
 8001804:	58025444 	.word	0x58025444
 8001808:	58025458 	.word	0x58025458
 800180c:	5802546c 	.word	0x5802546c
 8001810:	58025480 	.word	0x58025480
 8001814:	58025494 	.word	0x58025494

08001818 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e205      	b.n	8001c36 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d004      	beq.n	8001840 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2280      	movs	r2, #128	; 0x80
 800183a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e1fa      	b.n	8001c36 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a8c      	ldr	r2, [pc, #560]	; (8001a78 <HAL_DMA_Abort_IT+0x260>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a8b      	ldr	r2, [pc, #556]	; (8001a7c <HAL_DMA_Abort_IT+0x264>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a89      	ldr	r2, [pc, #548]	; (8001a80 <HAL_DMA_Abort_IT+0x268>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a88      	ldr	r2, [pc, #544]	; (8001a84 <HAL_DMA_Abort_IT+0x26c>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a86      	ldr	r2, [pc, #536]	; (8001a88 <HAL_DMA_Abort_IT+0x270>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a85      	ldr	r2, [pc, #532]	; (8001a8c <HAL_DMA_Abort_IT+0x274>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a83      	ldr	r2, [pc, #524]	; (8001a90 <HAL_DMA_Abort_IT+0x278>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a82      	ldr	r2, [pc, #520]	; (8001a94 <HAL_DMA_Abort_IT+0x27c>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a80      	ldr	r2, [pc, #512]	; (8001a98 <HAL_DMA_Abort_IT+0x280>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a7f      	ldr	r2, [pc, #508]	; (8001a9c <HAL_DMA_Abort_IT+0x284>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a7d      	ldr	r2, [pc, #500]	; (8001aa0 <HAL_DMA_Abort_IT+0x288>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a7c      	ldr	r2, [pc, #496]	; (8001aa4 <HAL_DMA_Abort_IT+0x28c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a7a      	ldr	r2, [pc, #488]	; (8001aa8 <HAL_DMA_Abort_IT+0x290>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a79      	ldr	r2, [pc, #484]	; (8001aac <HAL_DMA_Abort_IT+0x294>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a77      	ldr	r2, [pc, #476]	; (8001ab0 <HAL_DMA_Abort_IT+0x298>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_Abort_IT+0xc8>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a76      	ldr	r2, [pc, #472]	; (8001ab4 <HAL_DMA_Abort_IT+0x29c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d101      	bne.n	80018e4 <HAL_DMA_Abort_IT+0xcc>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <HAL_DMA_Abort_IT+0xce>
 80018e4:	2300      	movs	r3, #0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d065      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2204      	movs	r2, #4
 80018ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a60      	ldr	r2, [pc, #384]	; (8001a78 <HAL_DMA_Abort_IT+0x260>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d04a      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <HAL_DMA_Abort_IT+0x264>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d045      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a5d      	ldr	r2, [pc, #372]	; (8001a80 <HAL_DMA_Abort_IT+0x268>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d040      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a5b      	ldr	r2, [pc, #364]	; (8001a84 <HAL_DMA_Abort_IT+0x26c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d03b      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5a      	ldr	r2, [pc, #360]	; (8001a88 <HAL_DMA_Abort_IT+0x270>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d036      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a58      	ldr	r2, [pc, #352]	; (8001a8c <HAL_DMA_Abort_IT+0x274>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d031      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a57      	ldr	r2, [pc, #348]	; (8001a90 <HAL_DMA_Abort_IT+0x278>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d02c      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a55      	ldr	r2, [pc, #340]	; (8001a94 <HAL_DMA_Abort_IT+0x27c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d027      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_DMA_Abort_IT+0x280>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d022      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a52      	ldr	r2, [pc, #328]	; (8001a9c <HAL_DMA_Abort_IT+0x284>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01d      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a51      	ldr	r2, [pc, #324]	; (8001aa0 <HAL_DMA_Abort_IT+0x288>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d018      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4f      	ldr	r2, [pc, #316]	; (8001aa4 <HAL_DMA_Abort_IT+0x28c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d013      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <HAL_DMA_Abort_IT+0x290>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00e      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a4c      	ldr	r2, [pc, #304]	; (8001aac <HAL_DMA_Abort_IT+0x294>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d009      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a4b      	ldr	r2, [pc, #300]	; (8001ab0 <HAL_DMA_Abort_IT+0x298>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d004      	beq.n	8001992 <HAL_DMA_Abort_IT+0x17a>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a49      	ldr	r2, [pc, #292]	; (8001ab4 <HAL_DMA_Abort_IT+0x29c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d108      	bne.n	80019a4 <HAL_DMA_Abort_IT+0x18c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	e147      	b.n	8001c34 <HAL_DMA_Abort_IT+0x41c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f022 0201 	bic.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e13e      	b.n	8001c34 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 020e 	bic.w	r2, r2, #14
 80019c4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a2b      	ldr	r2, [pc, #172]	; (8001a78 <HAL_DMA_Abort_IT+0x260>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d04a      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a29      	ldr	r2, [pc, #164]	; (8001a7c <HAL_DMA_Abort_IT+0x264>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d045      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <HAL_DMA_Abort_IT+0x268>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d040      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a26      	ldr	r2, [pc, #152]	; (8001a84 <HAL_DMA_Abort_IT+0x26c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d03b      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a25      	ldr	r2, [pc, #148]	; (8001a88 <HAL_DMA_Abort_IT+0x270>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d036      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <HAL_DMA_Abort_IT+0x274>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d031      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a22      	ldr	r2, [pc, #136]	; (8001a90 <HAL_DMA_Abort_IT+0x278>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d02c      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a20      	ldr	r2, [pc, #128]	; (8001a94 <HAL_DMA_Abort_IT+0x27c>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d027      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1f      	ldr	r2, [pc, #124]	; (8001a98 <HAL_DMA_Abort_IT+0x280>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d022      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_DMA_Abort_IT+0x284>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d01d      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1c      	ldr	r2, [pc, #112]	; (8001aa0 <HAL_DMA_Abort_IT+0x288>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	; (8001aa4 <HAL_DMA_Abort_IT+0x28c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a19      	ldr	r2, [pc, #100]	; (8001aa8 <HAL_DMA_Abort_IT+0x290>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00e      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a17      	ldr	r2, [pc, #92]	; (8001aac <HAL_DMA_Abort_IT+0x294>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d009      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a16      	ldr	r2, [pc, #88]	; (8001ab0 <HAL_DMA_Abort_IT+0x298>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d004      	beq.n	8001a66 <HAL_DMA_Abort_IT+0x24e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a14      	ldr	r2, [pc, #80]	; (8001ab4 <HAL_DMA_Abort_IT+0x29c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d128      	bne.n	8001ab8 <HAL_DMA_Abort_IT+0x2a0>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	e027      	b.n	8001ac8 <HAL_DMA_Abort_IT+0x2b0>
 8001a78:	40020010 	.word	0x40020010
 8001a7c:	40020028 	.word	0x40020028
 8001a80:	40020040 	.word	0x40020040
 8001a84:	40020058 	.word	0x40020058
 8001a88:	40020070 	.word	0x40020070
 8001a8c:	40020088 	.word	0x40020088
 8001a90:	400200a0 	.word	0x400200a0
 8001a94:	400200b8 	.word	0x400200b8
 8001a98:	40020410 	.word	0x40020410
 8001a9c:	40020428 	.word	0x40020428
 8001aa0:	40020440 	.word	0x40020440
 8001aa4:	40020458 	.word	0x40020458
 8001aa8:	40020470 	.word	0x40020470
 8001aac:	40020488 	.word	0x40020488
 8001ab0:	400204a0 	.word	0x400204a0
 8001ab4:	400204b8 	.word	0x400204b8
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a5c      	ldr	r2, [pc, #368]	; (8001c40 <HAL_DMA_Abort_IT+0x428>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d072      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5b      	ldr	r2, [pc, #364]	; (8001c44 <HAL_DMA_Abort_IT+0x42c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d06d      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a59      	ldr	r2, [pc, #356]	; (8001c48 <HAL_DMA_Abort_IT+0x430>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d068      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a58      	ldr	r2, [pc, #352]	; (8001c4c <HAL_DMA_Abort_IT+0x434>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d063      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a56      	ldr	r2, [pc, #344]	; (8001c50 <HAL_DMA_Abort_IT+0x438>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d05e      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_DMA_Abort_IT+0x43c>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d059      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a53      	ldr	r2, [pc, #332]	; (8001c58 <HAL_DMA_Abort_IT+0x440>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d054      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_DMA_Abort_IT+0x444>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04f      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a50      	ldr	r2, [pc, #320]	; (8001c60 <HAL_DMA_Abort_IT+0x448>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d04a      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a4f      	ldr	r2, [pc, #316]	; (8001c64 <HAL_DMA_Abort_IT+0x44c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d045      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a4d      	ldr	r2, [pc, #308]	; (8001c68 <HAL_DMA_Abort_IT+0x450>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d040      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	; (8001c6c <HAL_DMA_Abort_IT+0x454>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d03b      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a4a      	ldr	r2, [pc, #296]	; (8001c70 <HAL_DMA_Abort_IT+0x458>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d036      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a49      	ldr	r2, [pc, #292]	; (8001c74 <HAL_DMA_Abort_IT+0x45c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d031      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a47      	ldr	r2, [pc, #284]	; (8001c78 <HAL_DMA_Abort_IT+0x460>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d02c      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a46      	ldr	r2, [pc, #280]	; (8001c7c <HAL_DMA_Abort_IT+0x464>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d027      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a44      	ldr	r2, [pc, #272]	; (8001c80 <HAL_DMA_Abort_IT+0x468>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d022      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a43      	ldr	r2, [pc, #268]	; (8001c84 <HAL_DMA_Abort_IT+0x46c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d01d      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a41      	ldr	r2, [pc, #260]	; (8001c88 <HAL_DMA_Abort_IT+0x470>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d018      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_DMA_Abort_IT+0x474>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <HAL_DMA_Abort_IT+0x478>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d00e      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <HAL_DMA_Abort_IT+0x47c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a3b      	ldr	r2, [pc, #236]	; (8001c98 <HAL_DMA_Abort_IT+0x480>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_DMA_Abort_IT+0x3a0>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3a      	ldr	r2, [pc, #232]	; (8001c9c <HAL_DMA_Abort_IT+0x484>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d101      	bne.n	8001bbc <HAL_DMA_Abort_IT+0x3a4>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <HAL_DMA_Abort_IT+0x3a6>
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d028      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bcc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bdc:	f003 031f 	and.w	r3, r3, #31
 8001be0:	2201      	movs	r2, #1
 8001be2:	409a      	lsls	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001bf0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00c      	beq.n	8001c14 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c08:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001c12:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020010 	.word	0x40020010
 8001c44:	40020028 	.word	0x40020028
 8001c48:	40020040 	.word	0x40020040
 8001c4c:	40020058 	.word	0x40020058
 8001c50:	40020070 	.word	0x40020070
 8001c54:	40020088 	.word	0x40020088
 8001c58:	400200a0 	.word	0x400200a0
 8001c5c:	400200b8 	.word	0x400200b8
 8001c60:	40020410 	.word	0x40020410
 8001c64:	40020428 	.word	0x40020428
 8001c68:	40020440 	.word	0x40020440
 8001c6c:	40020458 	.word	0x40020458
 8001c70:	40020470 	.word	0x40020470
 8001c74:	40020488 	.word	0x40020488
 8001c78:	400204a0 	.word	0x400204a0
 8001c7c:	400204b8 	.word	0x400204b8
 8001c80:	58025408 	.word	0x58025408
 8001c84:	5802541c 	.word	0x5802541c
 8001c88:	58025430 	.word	0x58025430
 8001c8c:	58025444 	.word	0x58025444
 8001c90:	58025458 	.word	0x58025458
 8001c94:	5802546c 	.word	0x5802546c
 8001c98:	58025480 	.word	0x58025480
 8001c9c:	58025494 	.word	0x58025494

08001ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b089      	sub	sp, #36	; 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001cae:	4b89      	ldr	r3, [pc, #548]	; (8001ed4 <HAL_GPIO_Init+0x234>)
 8001cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cb2:	e194      	b.n	8001fde <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2101      	movs	r1, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8186 	beq.w	8001fd8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d00b      	beq.n	8001cec <HAL_GPIO_Init+0x4c>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d007      	beq.n	8001cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce0:	2b11      	cmp	r3, #17
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b12      	cmp	r3, #18
 8001cea:	d130      	bne.n	8001d4e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d22:	2201      	movs	r2, #1
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	091b      	lsrs	r3, r3, #4
 8001d38:	f003 0201 	and.w	r2, r3, #1
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_Init+0xee>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d123      	bne.n	8001dd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	08da      	lsrs	r2, r3, #3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	3208      	adds	r2, #8
 8001d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	220f      	movs	r2, #15
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	691a      	ldr	r2, [r3, #16]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	69b9      	ldr	r1, [r7, #24]
 8001dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2203      	movs	r2, #3
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	f000 80e0 	beq.w	8001fd8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e18:	4b2f      	ldr	r3, [pc, #188]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e1a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e1e:	4a2e      	ldr	r2, [pc, #184]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001e28:	4b2b      	ldr	r3, [pc, #172]	; (8001ed8 <HAL_GPIO_Init+0x238>)
 8001e2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e36:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_GPIO_Init+0x23c>)
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	3302      	adds	r3, #2
 8001e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a20      	ldr	r2, [pc, #128]	; (8001ee0 <HAL_GPIO_Init+0x240>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d052      	beq.n	8001f08 <HAL_GPIO_Init+0x268>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a1f      	ldr	r2, [pc, #124]	; (8001ee4 <HAL_GPIO_Init+0x244>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d031      	beq.n	8001ece <HAL_GPIO_Init+0x22e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x248>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d02b      	beq.n	8001eca <HAL_GPIO_Init+0x22a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1d      	ldr	r2, [pc, #116]	; (8001eec <HAL_GPIO_Init+0x24c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x226>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ef0 <HAL_GPIO_Init+0x250>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x222>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a1b      	ldr	r2, [pc, #108]	; (8001ef4 <HAL_GPIO_Init+0x254>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x21e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a1a      	ldr	r2, [pc, #104]	; (8001ef8 <HAL_GPIO_Init+0x258>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x21a>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a19      	ldr	r2, [pc, #100]	; (8001efc <HAL_GPIO_Init+0x25c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x216>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x260>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x212>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_GPIO_Init+0x264>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x20e>
 8001eaa:	2309      	movs	r3, #9
 8001eac:	e02d      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eae:	230a      	movs	r3, #10
 8001eb0:	e02b      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eb2:	2308      	movs	r3, #8
 8001eb4:	e029      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eb6:	2307      	movs	r3, #7
 8001eb8:	e027      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eba:	2306      	movs	r3, #6
 8001ebc:	e025      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ebe:	2305      	movs	r3, #5
 8001ec0:	e023      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ec2:	2304      	movs	r3, #4
 8001ec4:	e021      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e01f      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001eca:	2302      	movs	r3, #2
 8001ecc:	e01d      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e01b      	b.n	8001f0a <HAL_GPIO_Init+0x26a>
 8001ed2:	bf00      	nop
 8001ed4:	58000080 	.word	0x58000080
 8001ed8:	58024400 	.word	0x58024400
 8001edc:	58000400 	.word	0x58000400
 8001ee0:	58020000 	.word	0x58020000
 8001ee4:	58020400 	.word	0x58020400
 8001ee8:	58020800 	.word	0x58020800
 8001eec:	58020c00 	.word	0x58020c00
 8001ef0:	58021000 	.word	0x58021000
 8001ef4:	58021400 	.word	0x58021400
 8001ef8:	58021800 	.word	0x58021800
 8001efc:	58021c00 	.word	0x58021c00
 8001f00:	58022000 	.word	0x58022000
 8001f04:	58022400 	.word	0x58022400
 8001f08:	2300      	movs	r3, #0
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f002 0203 	and.w	r2, r2, #3
 8001f10:	0092      	lsls	r2, r2, #2
 8001f12:	4093      	lsls	r3, r2
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f1a:	4938      	ldr	r1, [pc, #224]	; (8001ffc <HAL_GPIO_Init+0x35c>)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	089b      	lsrs	r3, r3, #2
 8001f20:	3302      	adds	r3, #2
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f47f ae63 	bne.w	8001cb4 <HAL_GPIO_Init+0x14>
  }
}
 8001fee:	bf00      	nop
 8001ff0:	bf00      	nop
 8001ff2:	3724      	adds	r7, #36	; 0x24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	58000400 	.word	0x58000400

08002000 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002000:	b480      	push	{r7}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	887b      	ldrh	r3, [r7, #2]
 8002012:	4013      	ands	r3, r2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d002      	beq.n	800201e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002018:	2301      	movs	r3, #1
 800201a:	73fb      	strb	r3, [r7, #15]
 800201c:	e001      	b.n	8002022 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002022:	7bfb      	ldrb	r3, [r7, #15]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3714      	adds	r7, #20
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	807b      	strh	r3, [r7, #2]
 800203c:	4613      	mov	r3, r2
 800203e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002040:	787b      	ldrb	r3, [r7, #1]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800204c:	e003      	b.n	8002056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800204e:	887b      	ldrh	r3, [r7, #2]
 8002050:	041a      	lsls	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	619a      	str	r2, [r3, #24]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0304 	and.w	r3, r3, #4
 8002074:	2b04      	cmp	r3, #4
 8002076:	d00a      	beq.n	800208e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002078:	4b16      	ldr	r3, [pc, #88]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0307 	and.w	r3, r3, #7
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	429a      	cmp	r2, r3
 8002084:	d001      	beq.n	800208a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e01f      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e01d      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f023 0207 	bic.w	r2, r3, #7
 8002096:	490f      	ldr	r1, [pc, #60]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800209e:	f7fe ff51 	bl	8000f44 <HAL_GetTick>
 80020a2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020a4:	e009      	b.n	80020ba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020a6:	f7fe ff4d 	bl	8000f44 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020b4:	d901      	bls.n	80020ba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_PWREx_ConfigSupply+0x70>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020c6:	d1ee      	bne.n	80020a6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	58024800 	.word	0x58024800

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b08c      	sub	sp, #48	; 0x30
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e3ff      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 8087 	beq.w	8002206 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f8:	4b99      	ldr	r3, [pc, #612]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002102:	4b97      	ldr	r3, [pc, #604]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002106:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210a:	2b10      	cmp	r3, #16
 800210c:	d007      	beq.n	800211e <HAL_RCC_OscConfig+0x46>
 800210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002110:	2b18      	cmp	r3, #24
 8002112:	d110      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
 8002114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d10b      	bne.n	8002136 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211e:	4b90      	ldr	r3, [pc, #576]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d06c      	beq.n	8002204 <HAL_RCC_OscConfig+0x12c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d168      	bne.n	8002204 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e3d9      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x76>
 8002140:	4b87      	ldr	r3, [pc, #540]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a86      	ldr	r2, [pc, #536]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002146:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214a:	6013      	str	r3, [r2, #0]
 800214c:	e02e      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x98>
 8002156:	4b82      	ldr	r3, [pc, #520]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a81      	ldr	r2, [pc, #516]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800215c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	4b7f      	ldr	r3, [pc, #508]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7e      	ldr	r2, [pc, #504]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002168:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	e01d      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002178:	d10c      	bne.n	8002194 <HAL_RCC_OscConfig+0xbc>
 800217a:	4b79      	ldr	r3, [pc, #484]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a78      	ldr	r2, [pc, #480]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002180:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800218c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	e00b      	b.n	80021ac <HAL_RCC_OscConfig+0xd4>
 8002194:	4b72      	ldr	r3, [pc, #456]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a71      	ldr	r2, [pc, #452]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800219a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	4b6f      	ldr	r3, [pc, #444]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6e      	ldr	r2, [pc, #440]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80021a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fec6 	bl	8000f44 <HAL_GetTick>
 80021b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fec2 	bl	8000f44 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	; 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e38d      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021ce:	4b64      	ldr	r3, [pc, #400]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0xe4>
 80021da:	e014      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7fe feb2 	bl	8000f44 <HAL_GetTick>
 80021e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e4:	f7fe feae 	bl	8000f44 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e379      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021f6:	4b5a      	ldr	r3, [pc, #360]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x10c>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80ae 	beq.w	8002370 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002214:	4b52      	ldr	r3, [pc, #328]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800221c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800221e:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d007      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2b18      	cmp	r3, #24
 800222e:	d13a      	bne.n	80022a6 <HAL_RCC_OscConfig+0x1ce>
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d135      	bne.n	80022a6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800223a:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x17a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d101      	bne.n	8002252 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e34b      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	f7fe fea7 	bl	8000fa4 <HAL_GetREVID>
 8002256:	4603      	mov	r3, r0
 8002258:	f241 0203 	movw	r2, #4099	; 0x1003
 800225c:	4293      	cmp	r3, r2
 800225e:	d817      	bhi.n	8002290 <HAL_RCC_OscConfig+0x1b8>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b40      	cmp	r3, #64	; 0x40
 8002266:	d108      	bne.n	800227a <HAL_RCC_OscConfig+0x1a2>
 8002268:	4b3d      	ldr	r3, [pc, #244]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002270:	4a3b      	ldr	r2, [pc, #236]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002276:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002278:	e07a      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b39      	ldr	r3, [pc, #228]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	031b      	lsls	r3, r3, #12
 8002288:	4935      	ldr	r1, [pc, #212]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228e:	e06f      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002290:	4b33      	ldr	r3, [pc, #204]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	4930      	ldr	r1, [pc, #192]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a4:	e064      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d045      	beq.n	800233a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022ae:	4b2c      	ldr	r3, [pc, #176]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f023 0219 	bic.w	r2, r3, #25
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	4929      	ldr	r1, [pc, #164]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c0:	f7fe fe40 	bl	8000f44 <HAL_GetTick>
 80022c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022c8:	f7fe fe3c 	bl	8000f44 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e307      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022da:	4b21      	ldr	r3, [pc, #132]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e6:	f7fe fe5d 	bl	8000fa4 <HAL_GetREVID>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d817      	bhi.n	8002324 <HAL_RCC_OscConfig+0x24c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d108      	bne.n	800230e <HAL_RCC_OscConfig+0x236>
 80022fc:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002304:	4a16      	ldr	r2, [pc, #88]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002306:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800230a:	6053      	str	r3, [r2, #4]
 800230c:	e030      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
 800230e:	4b14      	ldr	r3, [pc, #80]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	031b      	lsls	r3, r3, #12
 800231c:	4910      	ldr	r1, [pc, #64]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
 8002322:	e025      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	061b      	lsls	r3, r3, #24
 8002332:	490b      	ldr	r1, [pc, #44]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002334:	4313      	orrs	r3, r2
 8002336:	604b      	str	r3, [r1, #4]
 8002338:	e01a      	b.n	8002370 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a08      	ldr	r2, [pc, #32]	; (8002360 <HAL_RCC_OscConfig+0x288>)
 8002340:	f023 0301 	bic.w	r3, r3, #1
 8002344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002346:	f7fe fdfd 	bl	8000f44 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800234c:	e00a      	b.n	8002364 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe fdf9 	bl	8000f44 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d903      	bls.n	8002364 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e2c4      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
 8002360:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002364:	4ba4      	ldr	r3, [pc, #656]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0304 	and.w	r3, r3, #4
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ee      	bne.n	800234e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a9 	beq.w	80024d0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800237e:	4b9e      	ldr	r3, [pc, #632]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002386:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002388:	4b9b      	ldr	r3, [pc, #620]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	2b08      	cmp	r3, #8
 8002392:	d007      	beq.n	80023a4 <HAL_RCC_OscConfig+0x2cc>
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	2b18      	cmp	r3, #24
 8002398:	d13a      	bne.n	8002410 <HAL_RCC_OscConfig+0x338>
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d135      	bne.n	8002410 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023a4:	4b94      	ldr	r3, [pc, #592]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_OscConfig+0x2e4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b80      	cmp	r3, #128	; 0x80
 80023b6:	d001      	beq.n	80023bc <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e296      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023bc:	f7fe fdf2 	bl	8000fa4 <HAL_GetREVID>
 80023c0:	4603      	mov	r3, r0
 80023c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d817      	bhi.n	80023fa <HAL_RCC_OscConfig+0x322>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	2b20      	cmp	r3, #32
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_OscConfig+0x30c>
 80023d2:	4b89      	ldr	r3, [pc, #548]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023da:	4a87      	ldr	r2, [pc, #540]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80023dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023e0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023e2:	e075      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023e4:	4b84      	ldr	r3, [pc, #528]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a1b      	ldr	r3, [r3, #32]
 80023f0:	069b      	lsls	r3, r3, #26
 80023f2:	4981      	ldr	r1, [pc, #516]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023f8:	e06a      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023fa:	4b7f      	ldr	r3, [pc, #508]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	061b      	lsls	r3, r3, #24
 8002408:	497b      	ldr	r1, [pc, #492]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800240a:	4313      	orrs	r3, r2
 800240c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800240e:	e05f      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d042      	beq.n	800249e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002418:	4b77      	ldr	r3, [pc, #476]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a76      	ldr	r2, [pc, #472]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800241e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002424:	f7fe fd8e 	bl	8000f44 <HAL_GetTick>
 8002428:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800242c:	f7fe fd8a 	bl	8000f44 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e255      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800243e:	4b6e      	ldr	r3, [pc, #440]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800244a:	f7fe fdab 	bl	8000fa4 <HAL_GetREVID>
 800244e:	4603      	mov	r3, r0
 8002450:	f241 0203 	movw	r2, #4099	; 0x1003
 8002454:	4293      	cmp	r3, r2
 8002456:	d817      	bhi.n	8002488 <HAL_RCC_OscConfig+0x3b0>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	2b20      	cmp	r3, #32
 800245e:	d108      	bne.n	8002472 <HAL_RCC_OscConfig+0x39a>
 8002460:	4b65      	ldr	r3, [pc, #404]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002468:	4a63      	ldr	r2, [pc, #396]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800246a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800246e:	6053      	str	r3, [r2, #4]
 8002470:	e02e      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
 8002472:	4b61      	ldr	r3, [pc, #388]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a1b      	ldr	r3, [r3, #32]
 800247e:	069b      	lsls	r3, r3, #26
 8002480:	495d      	ldr	r1, [pc, #372]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002482:	4313      	orrs	r3, r2
 8002484:	604b      	str	r3, [r1, #4]
 8002486:	e023      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
 8002488:	4b5b      	ldr	r3, [pc, #364]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	061b      	lsls	r3, r3, #24
 8002496:	4958      	ldr	r1, [pc, #352]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002498:	4313      	orrs	r3, r2
 800249a:	60cb      	str	r3, [r1, #12]
 800249c:	e018      	b.n	80024d0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800249e:	4b56      	ldr	r3, [pc, #344]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a55      	ldr	r2, [pc, #340]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80024a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80024a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024aa:	f7fe fd4b 	bl	8000f44 <HAL_GetTick>
 80024ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80024b2:	f7fe fd47 	bl	8000f44 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e212      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024c4:	4b4c      	ldr	r3, [pc, #304]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0308 	and.w	r3, r3, #8
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d036      	beq.n	800254a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d019      	beq.n	8002518 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f0:	f7fe fd28 	bl	8000f44 <HAL_GetTick>
 80024f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024f6:	e008      	b.n	800250a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f8:	f7fe fd24 	bl	8000f44 <HAL_GetTick>
 80024fc:	4602      	mov	r2, r0
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	1ad3      	subs	r3, r2, r3
 8002502:	2b02      	cmp	r3, #2
 8002504:	d901      	bls.n	800250a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002506:	2303      	movs	r3, #3
 8002508:	e1ef      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800250c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0f0      	beq.n	80024f8 <HAL_RCC_OscConfig+0x420>
 8002516:	e018      	b.n	800254a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002518:	4b37      	ldr	r3, [pc, #220]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800251a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800251c:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7fe fd0e 	bl	8000f44 <HAL_GetTick>
 8002528:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252c:	f7fe fd0a 	bl	8000f44 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e1d5      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800253e:	4b2e      	ldr	r3, [pc, #184]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0320 	and.w	r3, r3, #32
 8002552:	2b00      	cmp	r3, #0
 8002554:	d036      	beq.n	80025c4 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d019      	beq.n	8002592 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800255e:	4b26      	ldr	r3, [pc, #152]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a25      	ldr	r2, [pc, #148]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002564:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002568:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800256a:	f7fe fceb 	bl	8000f44 <HAL_GetTick>
 800256e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002572:	f7fe fce7 	bl	8000f44 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1b2      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002584:	4b1c      	ldr	r3, [pc, #112]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x49a>
 8002590:	e018      	b.n	80025c4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002592:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 8002598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800259c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800259e:	f7fe fcd1 	bl	8000f44 <HAL_GetTick>
 80025a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80025a6:	f7fe fccd 	bl	8000f44 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e198      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <HAL_RCC_OscConfig+0x520>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8085 	beq.w	80026dc <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025d2:	4b0a      	ldr	r3, [pc, #40]	; (80025fc <HAL_RCC_OscConfig+0x524>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a09      	ldr	r2, [pc, #36]	; (80025fc <HAL_RCC_OscConfig+0x524>)
 80025d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025de:	f7fe fcb1 	bl	8000f44 <HAL_GetTick>
 80025e2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025e4:	e00c      	b.n	8002600 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80025e6:	f7fe fcad 	bl	8000f44 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b64      	cmp	r3, #100	; 0x64
 80025f2:	d905      	bls.n	8002600 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e178      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
 80025f8:	58024400 	.word	0x58024400
 80025fc:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002600:	4b96      	ldr	r3, [pc, #600]	; (800285c <HAL_RCC_OscConfig+0x784>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0ec      	beq.n	80025e6 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d106      	bne.n	8002622 <HAL_RCC_OscConfig+0x54a>
 8002614:	4b92      	ldr	r3, [pc, #584]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a91      	ldr	r2, [pc, #580]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
 8002620:	e02d      	b.n	800267e <HAL_RCC_OscConfig+0x5a6>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10c      	bne.n	8002644 <HAL_RCC_OscConfig+0x56c>
 800262a:	4b8d      	ldr	r3, [pc, #564]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	4a8c      	ldr	r2, [pc, #560]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002630:	f023 0301 	bic.w	r3, r3, #1
 8002634:	6713      	str	r3, [r2, #112]	; 0x70
 8002636:	4b8a      	ldr	r3, [pc, #552]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a89      	ldr	r2, [pc, #548]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800263c:	f023 0304 	bic.w	r3, r3, #4
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
 8002642:	e01c      	b.n	800267e <HAL_RCC_OscConfig+0x5a6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b05      	cmp	r3, #5
 800264a:	d10c      	bne.n	8002666 <HAL_RCC_OscConfig+0x58e>
 800264c:	4b84      	ldr	r3, [pc, #528]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800264e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002650:	4a83      	ldr	r2, [pc, #524]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002652:	f043 0304 	orr.w	r3, r3, #4
 8002656:	6713      	str	r3, [r2, #112]	; 0x70
 8002658:	4b81      	ldr	r3, [pc, #516]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800265a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265c:	4a80      	ldr	r2, [pc, #512]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800265e:	f043 0301 	orr.w	r3, r3, #1
 8002662:	6713      	str	r3, [r2, #112]	; 0x70
 8002664:	e00b      	b.n	800267e <HAL_RCC_OscConfig+0x5a6>
 8002666:	4b7e      	ldr	r3, [pc, #504]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	4a7d      	ldr	r2, [pc, #500]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800266c:	f023 0301 	bic.w	r3, r3, #1
 8002670:	6713      	str	r3, [r2, #112]	; 0x70
 8002672:	4b7b      	ldr	r3, [pc, #492]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	4a7a      	ldr	r2, [pc, #488]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002678:	f023 0304 	bic.w	r3, r3, #4
 800267c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d015      	beq.n	80026b2 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002686:	f7fe fc5d 	bl	8000f44 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7fe fc59 	bl	8000f44 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e122      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026a4:	4b6e      	ldr	r3, [pc, #440]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d0ee      	beq.n	800268e <HAL_RCC_OscConfig+0x5b6>
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7fe fc47 	bl	8000f44 <HAL_GetTick>
 80026b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026b8:	e00a      	b.n	80026d0 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026ba:	f7fe fc43 	bl	8000f44 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e10c      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026d0:	4b63      	ldr	r3, [pc, #396]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	f003 0302 	and.w	r3, r3, #2
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 8101 	beq.w	80028e8 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026e6:	4b5e      	ldr	r3, [pc, #376]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026ee:	2b18      	cmp	r3, #24
 80026f0:	f000 80bc 	beq.w	800286c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f040 8095 	bne.w	8002828 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026fe:	4b58      	ldr	r3, [pc, #352]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a57      	ldr	r2, [pc, #348]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002704:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fc1b 	bl	8000f44 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002712:	f7fe fc17 	bl	8000f44 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0e2      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002724:	4b4e      	ldr	r3, [pc, #312]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002730:	4b4b      	ldr	r3, [pc, #300]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002732:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002734:	4b4b      	ldr	r3, [pc, #300]	; (8002864 <HAL_RCC_OscConfig+0x78c>)
 8002736:	4013      	ands	r3, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002740:	0112      	lsls	r2, r2, #4
 8002742:	430a      	orrs	r2, r1
 8002744:	4946      	ldr	r1, [pc, #280]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002746:	4313      	orrs	r3, r2
 8002748:	628b      	str	r3, [r1, #40]	; 0x28
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	3b01      	subs	r3, #1
 8002750:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002758:	3b01      	subs	r3, #1
 800275a:	025b      	lsls	r3, r3, #9
 800275c:	b29b      	uxth	r3, r3
 800275e:	431a      	orrs	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002764:	3b01      	subs	r3, #1
 8002766:	041b      	lsls	r3, r3, #16
 8002768:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	3b01      	subs	r3, #1
 8002774:	061b      	lsls	r3, r3, #24
 8002776:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800277a:	4939      	ldr	r1, [pc, #228]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800277c:	4313      	orrs	r3, r2
 800277e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002784:	4a36      	ldr	r2, [pc, #216]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800278e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002790:	4b35      	ldr	r3, [pc, #212]	; (8002868 <HAL_RCC_OscConfig+0x790>)
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002798:	00d2      	lsls	r2, r2, #3
 800279a:	4931      	ldr	r1, [pc, #196]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800279c:	4313      	orrs	r3, r2
 800279e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027a0:	4b2f      	ldr	r3, [pc, #188]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f023 020c 	bic.w	r2, r3, #12
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	492c      	ldr	r1, [pc, #176]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027b2:	4b2b      	ldr	r3, [pc, #172]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f023 0202 	bic.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027be:	4928      	ldr	r1, [pc, #160]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	4a25      	ldr	r2, [pc, #148]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d0:	4b23      	ldr	r3, [pc, #140]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d4:	4a22      	ldr	r2, [pc, #136]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027dc:	4b20      	ldr	r3, [pc, #128]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	4a1f      	ldr	r2, [pc, #124]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80027e8:	4b1d      	ldr	r3, [pc, #116]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	4a1c      	ldr	r2, [pc, #112]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7fe fba0 	bl	8000f44 <HAL_GetTick>
 8002804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002808:	f7fe fb9c 	bl	8000f44 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e067      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d0f0      	beq.n	8002808 <HAL_RCC_OscConfig+0x730>
 8002826:	e05f      	b.n	80028e8 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002828:	4b0d      	ldr	r3, [pc, #52]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 800282e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7fe fb86 	bl	8000f44 <HAL_GetTick>
 8002838:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fb82 	bl	8000f44 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04d      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800284e:	4b04      	ldr	r3, [pc, #16]	; (8002860 <HAL_RCC_OscConfig+0x788>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x764>
 800285a:	e045      	b.n	80028e8 <HAL_RCC_OscConfig+0x810>
 800285c:	58024800 	.word	0x58024800
 8002860:	58024400 	.word	0x58024400
 8002864:	fffffc0c 	.word	0xfffffc0c
 8002868:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <HAL_RCC_OscConfig+0x81c>)
 800286e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002870:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_RCC_OscConfig+0x81c>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	2b01      	cmp	r3, #1
 800287e:	d031      	beq.n	80028e4 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f003 0203 	and.w	r2, r3, #3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288a:	429a      	cmp	r2, r3
 800288c:	d12a      	bne.n	80028e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d122      	bne.n	80028e4 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d11a      	bne.n	80028e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	0a5b      	lsrs	r3, r3, #9
 80028b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ba:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d111      	bne.n	80028e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d108      	bne.n	80028e4 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	0e1b      	lsrs	r3, r3, #24
 80028d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d001      	beq.n	80028e8 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3730      	adds	r7, #48	; 0x30
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	58024400 	.word	0x58024400

080028f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e19c      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800290c:	4b8a      	ldr	r3, [pc, #552]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	429a      	cmp	r2, r3
 8002918:	d910      	bls.n	800293c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291a:	4b87      	ldr	r3, [pc, #540]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 020f 	bic.w	r2, r3, #15
 8002922:	4985      	ldr	r1, [pc, #532]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800292a:	4b83      	ldr	r3, [pc, #524]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d001      	beq.n	800293c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e184      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0304 	and.w	r3, r3, #4
 8002944:	2b00      	cmp	r3, #0
 8002946:	d010      	beq.n	800296a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	4b7b      	ldr	r3, [pc, #492]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002954:	429a      	cmp	r2, r3
 8002956:	d908      	bls.n	800296a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002958:	4b78      	ldr	r3, [pc, #480]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	4975      	ldr	r1, [pc, #468]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002966:	4313      	orrs	r3, r2
 8002968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d010      	beq.n	8002998 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	4b70      	ldr	r3, [pc, #448]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002982:	429a      	cmp	r2, r3
 8002984:	d908      	bls.n	8002998 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002986:	4b6d      	ldr	r3, [pc, #436]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	496a      	ldr	r1, [pc, #424]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002994:	4313      	orrs	r3, r2
 8002996:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d010      	beq.n	80029c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699a      	ldr	r2, [r3, #24]
 80029a8:	4b64      	ldr	r3, [pc, #400]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d908      	bls.n	80029c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	495e      	ldr	r1, [pc, #376]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d010      	beq.n	80029f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69da      	ldr	r2, [r3, #28]
 80029d6:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029de:	429a      	cmp	r2, r3
 80029e0:	d908      	bls.n	80029f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80029e2:	4b56      	ldr	r3, [pc, #344]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4953      	ldr	r1, [pc, #332]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0302 	and.w	r3, r3, #2
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d010      	beq.n	8002a22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d908      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a10:	4b4a      	ldr	r3, [pc, #296]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	f023 020f 	bic.w	r2, r3, #15
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4947      	ldr	r1, [pc, #284]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d055      	beq.n	8002ada <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a2e:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4940      	ldr	r1, [pc, #256]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d107      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a48:	4b3c      	ldr	r3, [pc, #240]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d121      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0f6      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d107      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d115      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0ea      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a78:	4b30      	ldr	r3, [pc, #192]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d109      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e0de      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0d6      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f023 0207 	bic.w	r2, r3, #7
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	4925      	ldr	r1, [pc, #148]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aaa:	f7fe fa4b 	bl	8000f44 <HAL_GetTick>
 8002aae:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab0:	e00a      	b.n	8002ac8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab2:	f7fe fa47 	bl	8000f44 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e0be      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac8:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d1eb      	bne.n	8002ab2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d010      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002aec:	699b      	ldr	r3, [r3, #24]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d208      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af6:	4b11      	ldr	r3, [pc, #68]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	490e      	ldr	r1, [pc, #56]	; (8002b3c <HAL_RCC_ClockConfig+0x244>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d214      	bcs.n	8002b40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 020f 	bic.w	r2, r3, #15
 8002b1e:	4906      	ldr	r1, [pc, #24]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_RCC_ClockConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e086      	b.n	8002c46 <HAL_RCC_ClockConfig+0x34e>
 8002b38:	52002000 	.word	0x52002000
 8002b3c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d010      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d208      	bcs.n	8002b6e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b5c:	4b3c      	ldr	r3, [pc, #240]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	4939      	ldr	r1, [pc, #228]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d010      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	695a      	ldr	r2, [r3, #20]
 8002b7e:	4b34      	ldr	r3, [pc, #208]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d208      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	492e      	ldr	r1, [pc, #184]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0310 	and.w	r3, r3, #16
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d010      	beq.n	8002bca <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699a      	ldr	r2, [r3, #24]
 8002bac:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d208      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb8:	4b25      	ldr	r3, [pc, #148]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002bba:	69db      	ldr	r3, [r3, #28]
 8002bbc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	4922      	ldr	r1, [pc, #136]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d010      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d208      	bcs.n	8002bf8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	4917      	ldr	r1, [pc, #92]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf8:	f000 f834 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b14      	ldr	r3, [pc, #80]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4912      	ldr	r1, [pc, #72]	; (8002c54 <HAL_RCC_ClockConfig+0x35c>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
 8002c14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c16:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <HAL_RCC_ClockConfig+0x358>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	4a0d      	ldr	r2, [pc, #52]	; (8002c54 <HAL_RCC_ClockConfig+0x35c>)
 8002c20:	5cd3      	ldrb	r3, [r2, r3]
 8002c22:	f003 031f 	and.w	r3, r3, #31
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	fa22 f303 	lsr.w	r3, r2, r3
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x360>)
 8002c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x364>)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_RCC_ClockConfig+0x368>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe f938 	bl	8000eb0 <HAL_InitTick>
 8002c40:	4603      	mov	r3, r0
 8002c42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	58024400 	.word	0x58024400
 8002c54:	08006cfc 	.word	0x08006cfc
 8002c58:	20000004 	.word	0x20000004
 8002c5c:	20000000 	.word	0x20000000
 8002c60:	20000008 	.word	0x20000008

08002c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b089      	sub	sp, #36	; 0x24
 8002c68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6a:	4bb3      	ldr	r3, [pc, #716]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c72:	2b18      	cmp	r3, #24
 8002c74:	f200 8155 	bhi.w	8002f22 <HAL_RCC_GetSysClockFreq+0x2be>
 8002c78:	a201      	add	r2, pc, #4	; (adr r2, 8002c80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7e:	bf00      	nop
 8002c80:	08002ce5 	.word	0x08002ce5
 8002c84:	08002f23 	.word	0x08002f23
 8002c88:	08002f23 	.word	0x08002f23
 8002c8c:	08002f23 	.word	0x08002f23
 8002c90:	08002f23 	.word	0x08002f23
 8002c94:	08002f23 	.word	0x08002f23
 8002c98:	08002f23 	.word	0x08002f23
 8002c9c:	08002f23 	.word	0x08002f23
 8002ca0:	08002d0b 	.word	0x08002d0b
 8002ca4:	08002f23 	.word	0x08002f23
 8002ca8:	08002f23 	.word	0x08002f23
 8002cac:	08002f23 	.word	0x08002f23
 8002cb0:	08002f23 	.word	0x08002f23
 8002cb4:	08002f23 	.word	0x08002f23
 8002cb8:	08002f23 	.word	0x08002f23
 8002cbc:	08002f23 	.word	0x08002f23
 8002cc0:	08002d11 	.word	0x08002d11
 8002cc4:	08002f23 	.word	0x08002f23
 8002cc8:	08002f23 	.word	0x08002f23
 8002ccc:	08002f23 	.word	0x08002f23
 8002cd0:	08002f23 	.word	0x08002f23
 8002cd4:	08002f23 	.word	0x08002f23
 8002cd8:	08002f23 	.word	0x08002f23
 8002cdc:	08002f23 	.word	0x08002f23
 8002ce0:	08002d17 	.word	0x08002d17
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ce4:	4b94      	ldr	r3, [pc, #592]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d009      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002cf0:	4b91      	ldr	r3, [pc, #580]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	08db      	lsrs	r3, r3, #3
 8002cf6:	f003 0303 	and.w	r3, r3, #3
 8002cfa:	4a90      	ldr	r2, [pc, #576]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002d00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002d02:	e111      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d04:	4b8d      	ldr	r3, [pc, #564]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d06:	61bb      	str	r3, [r7, #24]
    break;
 8002d08:	e10e      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002d0a:	4b8d      	ldr	r3, [pc, #564]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d0c:	61bb      	str	r3, [r7, #24]
    break;
 8002d0e:	e10b      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002d10:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d12:	61bb      	str	r3, [r7, #24]
    break;
 8002d14:	e108      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002d20:	4b85      	ldr	r3, [pc, #532]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	091b      	lsrs	r3, r3, #4
 8002d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d2a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d2c:	4b82      	ldr	r3, [pc, #520]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002d36:	4b80      	ldr	r3, [pc, #512]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	08db      	lsrs	r3, r3, #3
 8002d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	ee07 3a90 	vmov	s15, r3
 8002d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80e1 	beq.w	8002f1c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	f000 8083 	beq.w	8002e68 <HAL_RCC_GetSysClockFreq+0x204>
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f200 80a1 	bhi.w	8002eac <HAL_RCC_GetSysClockFreq+0x248>
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_RCC_GetSysClockFreq+0x114>
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d056      	beq.n	8002e24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d76:	e099      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d78:	4b6f      	ldr	r3, [pc, #444]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0320 	and.w	r3, r3, #32
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d02d      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002d84:	4b6c      	ldr	r3, [pc, #432]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	4a6b      	ldr	r2, [pc, #428]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d90:	fa22 f303 	lsr.w	r3, r2, r3
 8002d94:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	ee07 3a90 	vmov	s15, r3
 8002d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	ee07 3a90 	vmov	s15, r3
 8002da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dae:	4b62      	ldr	r3, [pc, #392]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db6:	ee07 3a90 	vmov	s15, r3
 8002dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dc2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002dde:	e087      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dea:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002df2:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dfa:	ee07 3a90 	vmov	s15, r3
 8002dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e06:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e22:	e065      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e36:	4b40      	ldr	r3, [pc, #256]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e4a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e66:	e043      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e72:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e82:	ee07 3a90 	vmov	s15, r3
 8002e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eaa:	e021      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec6:	ee07 3a90 	vmov	s15, r3
 8002eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ed2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ede:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eee:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002ef0:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	0a5b      	lsrs	r3, r3, #9
 8002ef6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002efa:	3301      	adds	r3, #1
 8002efc:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	ee07 3a90 	vmov	s15, r3
 8002f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f14:	ee17 3a90 	vmov	r3, s15
 8002f18:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002f1a:	e005      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    break;
 8002f20:	e002      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f24:	61bb      	str	r3, [r7, #24]
    break;
 8002f26:	bf00      	nop
  }

  return sysclockfreq;
 8002f28:	69bb      	ldr	r3, [r7, #24]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	03d09000 	.word	0x03d09000
 8002f40:	003d0900 	.word	0x003d0900
 8002f44:	017d7840 	.word	0x017d7840
 8002f48:	46000000 	.word	0x46000000
 8002f4c:	4c742400 	.word	0x4c742400
 8002f50:	4a742400 	.word	0x4a742400
 8002f54:	4bbebc20 	.word	0x4bbebc20

08002f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f5e:	f7ff fe81 	bl	8002c64 <HAL_RCC_GetSysClockFreq>
 8002f62:	4602      	mov	r2, r0
 8002f64:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	0a1b      	lsrs	r3, r3, #8
 8002f6a:	f003 030f 	and.w	r3, r3, #15
 8002f6e:	490f      	ldr	r1, [pc, #60]	; (8002fac <HAL_RCC_GetHCLKFreq+0x54>)
 8002f70:	5ccb      	ldrb	r3, [r1, r3]
 8002f72:	f003 031f 	and.w	r3, r3, #31
 8002f76:	fa22 f303 	lsr.w	r3, r2, r3
 8002f7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_GetHCLKFreq+0x54>)
 8002f86:	5cd3      	ldrb	r3, [r2, r3]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f92:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	08006cfc 	.word	0x08006cfc
 8002fb0:	20000004 	.word	0x20000004
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fbc:	f7ff ffcc 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	4b06      	ldr	r3, [pc, #24]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	091b      	lsrs	r3, r3, #4
 8002fc8:	f003 0307 	and.w	r3, r3, #7
 8002fcc:	4904      	ldr	r1, [pc, #16]	; (8002fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fce:	5ccb      	ldrb	r3, [r1, r3]
 8002fd0:	f003 031f 	and.w	r3, r3, #31
 8002fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	58024400 	.word	0x58024400
 8002fe0:	08006cfc 	.word	0x08006cfc

08002fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fe8:	f7ff ffb6 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8002fec:	4602      	mov	r2, r0
 8002fee:	4b06      	ldr	r3, [pc, #24]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	0a1b      	lsrs	r3, r3, #8
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	4904      	ldr	r1, [pc, #16]	; (800300c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ffa:	5ccb      	ldrb	r3, [r1, r3]
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003004:	4618      	mov	r0, r3
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58024400 	.word	0x58024400
 800300c:	08006cfc 	.word	0x08006cfc

08003010 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003018:	2300      	movs	r3, #0
 800301a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800301c:	2300      	movs	r3, #0
 800301e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d03f      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003030:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003034:	d02a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003036:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800303a:	d824      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800303c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003040:	d018      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003042:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003046:	d81e      	bhi.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800304c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003050:	d007      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003052:	e018      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003054:	4bab      	ldr	r3, [pc, #684]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	4aaa      	ldr	r2, [pc, #680]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800305a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003060:	e015      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3304      	adds	r3, #4
 8003066:	2102      	movs	r1, #2
 8003068:	4618      	mov	r0, r3
 800306a:	f001 f9cf 	bl	800440c <RCCEx_PLL2_Config>
 800306e:	4603      	mov	r3, r0
 8003070:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003072:	e00c      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	3324      	adds	r3, #36	; 0x24
 8003078:	2102      	movs	r1, #2
 800307a:	4618      	mov	r0, r3
 800307c:	f001 fa78 	bl	8004570 <RCCEx_PLL3_Config>
 8003080:	4603      	mov	r3, r0
 8003082:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003084:	e003      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	75fb      	strb	r3, [r7, #23]
      break;
 800308a:	e000      	b.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800308c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d109      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003094:	4b9b      	ldr	r3, [pc, #620]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003098:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a0:	4998      	ldr	r1, [pc, #608]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	650b      	str	r3, [r1, #80]	; 0x50
 80030a6:	e001      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7dfb      	ldrb	r3, [r7, #23]
 80030aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d03d      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d826      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080030dd 	.word	0x080030dd
 80030cc:	080030eb 	.word	0x080030eb
 80030d0:	080030fd 	.word	0x080030fd
 80030d4:	08003115 	.word	0x08003115
 80030d8:	08003115 	.word	0x08003115
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030dc:	4b89      	ldr	r3, [pc, #548]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	4a88      	ldr	r2, [pc, #544]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80030e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030e8:	e015      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	2100      	movs	r1, #0
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 f98b 	bl	800440c <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80030fa:	e00c      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3324      	adds	r3, #36	; 0x24
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f001 fa34 	bl	8004570 <RCCEx_PLL3_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800310c:	e003      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
      break;
 8003112:	e000      	b.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003114:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003116:	7dfb      	ldrb	r3, [r7, #23]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d109      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800311c:	4b79      	ldr	r3, [pc, #484]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800311e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003120:	f023 0207 	bic.w	r2, r3, #7
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003128:	4976      	ldr	r1, [pc, #472]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800312a:	4313      	orrs	r3, r2
 800312c:	650b      	str	r3, [r1, #80]	; 0x50
 800312e:	e001      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	7dfb      	ldrb	r3, [r7, #23]
 8003132:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800313c:	2b00      	cmp	r3, #0
 800313e:	d042      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003148:	d02b      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800314a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800314e:	d825      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003150:	2bc0      	cmp	r3, #192	; 0xc0
 8003152:	d028      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003154:	2bc0      	cmp	r3, #192	; 0xc0
 8003156:	d821      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003158:	2b80      	cmp	r3, #128	; 0x80
 800315a:	d016      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800315c:	2b80      	cmp	r3, #128	; 0x80
 800315e:	d81d      	bhi.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d007      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003168:	e018      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316a:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003174:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003176:	e017      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	3304      	adds	r3, #4
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f944 	bl	800440c <RCCEx_PLL2_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003188:	e00e      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	3324      	adds	r3, #36	; 0x24
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f001 f9ed 	bl	8004570 <RCCEx_PLL3_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
      break;
 80031a0:	e002      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80031a2:	bf00      	nop
 80031a4:	e000      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80031a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a8:	7dfb      	ldrb	r3, [r7, #23]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d109      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031ae:	4b55      	ldr	r3, [pc, #340]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ba:	4952      	ldr	r1, [pc, #328]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	650b      	str	r3, [r1, #80]	; 0x50
 80031c0:	e001      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	7dfb      	ldrb	r3, [r7, #23]
 80031c4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d049      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031dc:	d030      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80031de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80031e2:	d82a      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031e8:	d02c      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80031ea:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80031ee:	d824      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f4:	d018      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80031f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fa:	d81e      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003204:	d007      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003206:	e018      	b.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003208:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a3d      	ldr	r2, [pc, #244]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003214:	e017      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f8f5 	bl	800440c <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003226:	e00e      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f001 f99e 	bl	8004570 <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003238:	e005      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      break;
 800323e:	e002      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003240:	bf00      	nop
 8003242:	e000      	b.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003246:	7dfb      	ldrb	r3, [r7, #23]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10a      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800325a:	492a      	ldr	r1, [pc, #168]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800325c:	4313      	orrs	r3, r2
 800325e:	658b      	str	r3, [r1, #88]	; 0x58
 8003260:	e001      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003262:	7dfb      	ldrb	r3, [r7, #23]
 8003264:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326e:	2b00      	cmp	r3, #0
 8003270:	d04c      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800327c:	d030      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800327e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003282:	d82a      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003284:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003288:	d02c      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800328a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800328e:	d824      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003290:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003294:	d018      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8003296:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800329a:	d81e      	bhi.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d007      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80032a6:	e018      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032b4:	e017      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 f8a5 	bl	800440c <RCCEx_PLL2_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80032c6:	e00e      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3324      	adds	r3, #36	; 0x24
 80032cc:	2100      	movs	r1, #0
 80032ce:	4618      	mov	r0, r3
 80032d0:	f001 f94e 	bl	8004570 <RCCEx_PLL3_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80032d8:	e005      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	75fb      	strb	r3, [r7, #23]
      break;
 80032de:	e002      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80032e0:	bf00      	nop
 80032e2:	e000      	b.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80032e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032e6:	7dfb      	ldrb	r3, [r7, #23]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d10d      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032fa:	4902      	ldr	r1, [pc, #8]	; (8003304 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	658b      	str	r3, [r1, #88]	; 0x58
 8003300:	e004      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7dfb      	ldrb	r3, [r7, #23]
 800330a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d032      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331c:	2b30      	cmp	r3, #48	; 0x30
 800331e:	d01c      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003320:	2b30      	cmp	r3, #48	; 0x30
 8003322:	d817      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003324:	2b20      	cmp	r3, #32
 8003326:	d00c      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003328:	2b20      	cmp	r3, #32
 800332a:	d813      	bhi.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x344>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d016      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003330:	2b10      	cmp	r3, #16
 8003332:	d10f      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003334:	4baf      	ldr	r3, [pc, #700]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4aae      	ldr	r2, [pc, #696]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800333a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003340:	e00e      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2102      	movs	r1, #2
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f85f 	bl	800440c <RCCEx_PLL2_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003352:	e005      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	75fb      	strb	r3, [r7, #23]
      break;
 8003358:	e002      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800335a:	bf00      	nop
 800335c:	e000      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800335e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003360:	7dfb      	ldrb	r3, [r7, #23]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d109      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003366:	4ba3      	ldr	r3, [pc, #652]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800336a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003372:	49a0      	ldr	r1, [pc, #640]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003378:	e001      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d047      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003392:	d030      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d82a      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800339a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800339e:	d02c      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80033a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80033a4:	d824      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033aa:	d018      	beq.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80033ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033b0:	d81e      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80033b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ba:	d007      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80033bc:	e018      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033be:	4b8d      	ldr	r3, [pc, #564]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	4a8c      	ldr	r2, [pc, #560]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033ca:	e017      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	2100      	movs	r1, #0
 80033d2:	4618      	mov	r0, r3
 80033d4:	f001 f81a 	bl	800440c <RCCEx_PLL2_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033dc:	e00e      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	3324      	adds	r3, #36	; 0x24
 80033e2:	2100      	movs	r1, #0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f001 f8c3 	bl	8004570 <RCCEx_PLL3_Config>
 80033ea:	4603      	mov	r3, r0
 80033ec:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80033ee:	e005      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
      break;
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80033fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fc:	7dfb      	ldrb	r3, [r7, #23]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d109      	bne.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003402:	4b7c      	ldr	r3, [pc, #496]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003406:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800340e:	4979      	ldr	r1, [pc, #484]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003410:	4313      	orrs	r3, r2
 8003412:	650b      	str	r3, [r1, #80]	; 0x50
 8003414:	e001      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003416:	7dfb      	ldrb	r3, [r7, #23]
 8003418:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d049      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800342a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800342e:	d02e      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003434:	d828      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003436:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800343a:	d02a      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x482>
 800343c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003440:	d822      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003442:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003446:	d026      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003448:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800344c:	d81c      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800344e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003452:	d010      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003458:	d816      	bhi.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d01d      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003462:	d111      	bne.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	3304      	adds	r3, #4
 8003468:	2101      	movs	r1, #1
 800346a:	4618      	mov	r0, r3
 800346c:	f000 ffce 	bl	800440c <RCCEx_PLL2_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003474:	e012      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3324      	adds	r3, #36	; 0x24
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f001 f877 	bl	8004570 <RCCEx_PLL3_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003486:	e009      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
      break;
 800348c:	e006      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800348e:	bf00      	nop
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003492:	bf00      	nop
 8003494:	e002      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8003496:	bf00      	nop
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800349a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800349c:	7dfb      	ldrb	r3, [r7, #23]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d109      	bne.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80034a2:	4b54      	ldr	r3, [pc, #336]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ae:	4951      	ldr	r1, [pc, #324]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	650b      	str	r3, [r1, #80]	; 0x50
 80034b4:	e001      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d04b      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d0:	d02e      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80034d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034d6:	d828      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034dc:	d02a      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80034de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034e2:	d822      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034e8:	d026      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80034ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80034ee:	d81c      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f4:	d010      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80034f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034fa:	d816      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01d      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003504:	d111      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3304      	adds	r3, #4
 800350a:	2101      	movs	r1, #1
 800350c:	4618      	mov	r0, r3
 800350e:	f000 ff7d 	bl	800440c <RCCEx_PLL2_Config>
 8003512:	4603      	mov	r3, r0
 8003514:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003516:	e012      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3324      	adds	r3, #36	; 0x24
 800351c:	2101      	movs	r1, #1
 800351e:	4618      	mov	r0, r3
 8003520:	f001 f826 	bl	8004570 <RCCEx_PLL3_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003528:	e009      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	75fb      	strb	r3, [r7, #23]
      break;
 800352e:	e006      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003530:	bf00      	nop
 8003532:	e004      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003534:	bf00      	nop
 8003536:	e002      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800353c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003544:	4b2b      	ldr	r3, [pc, #172]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003548:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003552:	4928      	ldr	r1, [pc, #160]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003554:	4313      	orrs	r3, r2
 8003556:	658b      	str	r3, [r1, #88]	; 0x58
 8003558:	e001      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
 800355c:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d02f      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800356e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003572:	d00e      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8003574:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003578:	d814      	bhi.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d015      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800357e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003582:	d10f      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003590:	e00c      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3304      	adds	r3, #4
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f000 ff37 	bl	800440c <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80035a2:	e003      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	75fb      	strb	r3, [r7, #23]
      break;
 80035a8:	e000      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80035aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d109      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035be:	490d      	ldr	r1, [pc, #52]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	650b      	str	r3, [r1, #80]	; 0x50
 80035c4:	e001      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d033      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	2b03      	cmp	r3, #3
 80035dc:	d81c      	bhi.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	0800361f 	.word	0x0800361f
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003607 	.word	0x08003607
 80035f0:	0800361f 	.word	0x0800361f
 80035f4:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f8:	4bb8      	ldr	r3, [pc, #736]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fc:	4ab7      	ldr	r2, [pc, #732]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003604:	e00c      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3304      	adds	r3, #4
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fefd 	bl	800440c <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003616:	e003      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	75fb      	strb	r3, [r7, #23]
      break;
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800361e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003620:	7dfb      	ldrb	r3, [r7, #23]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003626:	4bad      	ldr	r3, [pc, #692]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003632:	49aa      	ldr	r1, [pc, #680]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003634:	4313      	orrs	r3, r2
 8003636:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003638:	e001      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363a:	7dfb      	ldrb	r3, [r7, #23]
 800363c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 8086 	beq.w	8003758 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800364c:	4ba4      	ldr	r3, [pc, #656]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4aa3      	ldr	r2, [pc, #652]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003656:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003658:	f7fd fc74 	bl	8000f44 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800365e:	e009      	b.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fd fc70 	bl	8000f44 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d902      	bls.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	75fb      	strb	r3, [r7, #23]
        break;
 8003672:	e005      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003674:	4b9a      	ldr	r3, [pc, #616]	; (80038e0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0ef      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003680:	7dfb      	ldrb	r3, [r7, #23]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d166      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003686:	4b95      	ldr	r3, [pc, #596]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003688:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003690:	4053      	eors	r3, r2
 8003692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003696:	2b00      	cmp	r3, #0
 8003698:	d013      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369a:	4b90      	ldr	r3, [pc, #576]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036a4:	4b8d      	ldr	r3, [pc, #564]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a8:	4a8c      	ldr	r2, [pc, #560]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036ae:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036b0:	4b8a      	ldr	r3, [pc, #552]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b4:	4a89      	ldr	r2, [pc, #548]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036ba:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80036bc:	4a87      	ldr	r2, [pc, #540]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036cc:	d115      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ce:	f7fd fc39 	bl	8000f44 <HAL_GetTick>
 80036d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036d4:	e00b      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d6:	f7fd fc35 	bl	8000f44 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d902      	bls.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	75fb      	strb	r3, [r7, #23]
            break;
 80036ec:	e005      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80036ee:	4b7b      	ldr	r3, [pc, #492]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d0ed      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80036fa:	7dfb      	ldrb	r3, [r7, #23]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d126      	bne.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370e:	d10d      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003710:	4b72      	ldr	r3, [pc, #456]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800371e:	0919      	lsrs	r1, r3, #4
 8003720:	4b70      	ldr	r3, [pc, #448]	; (80038e4 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8003722:	400b      	ands	r3, r1
 8003724:	496d      	ldr	r1, [pc, #436]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	610b      	str	r3, [r1, #16]
 800372a:	e005      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800372c:	4b6b      	ldr	r3, [pc, #428]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4a6a      	ldr	r2, [pc, #424]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003732:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003736:	6113      	str	r3, [r2, #16]
 8003738:	4b68      	ldr	r3, [pc, #416]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800373a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003746:	4965      	ldr	r1, [pc, #404]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003748:	4313      	orrs	r3, r2
 800374a:	670b      	str	r3, [r1, #112]	; 0x70
 800374c:	e004      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	75bb      	strb	r3, [r7, #22]
 8003752:	e001      	b.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003754:	7dfb      	ldrb	r3, [r7, #23]
 8003756:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	d07e      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003768:	2b28      	cmp	r3, #40	; 0x28
 800376a:	d867      	bhi.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800376c:	a201      	add	r2, pc, #4	; (adr r2, 8003774 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800376e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003772:	bf00      	nop
 8003774:	08003843 	.word	0x08003843
 8003778:	0800383d 	.word	0x0800383d
 800377c:	0800383d 	.word	0x0800383d
 8003780:	0800383d 	.word	0x0800383d
 8003784:	0800383d 	.word	0x0800383d
 8003788:	0800383d 	.word	0x0800383d
 800378c:	0800383d 	.word	0x0800383d
 8003790:	0800383d 	.word	0x0800383d
 8003794:	08003819 	.word	0x08003819
 8003798:	0800383d 	.word	0x0800383d
 800379c:	0800383d 	.word	0x0800383d
 80037a0:	0800383d 	.word	0x0800383d
 80037a4:	0800383d 	.word	0x0800383d
 80037a8:	0800383d 	.word	0x0800383d
 80037ac:	0800383d 	.word	0x0800383d
 80037b0:	0800383d 	.word	0x0800383d
 80037b4:	0800382b 	.word	0x0800382b
 80037b8:	0800383d 	.word	0x0800383d
 80037bc:	0800383d 	.word	0x0800383d
 80037c0:	0800383d 	.word	0x0800383d
 80037c4:	0800383d 	.word	0x0800383d
 80037c8:	0800383d 	.word	0x0800383d
 80037cc:	0800383d 	.word	0x0800383d
 80037d0:	0800383d 	.word	0x0800383d
 80037d4:	08003843 	.word	0x08003843
 80037d8:	0800383d 	.word	0x0800383d
 80037dc:	0800383d 	.word	0x0800383d
 80037e0:	0800383d 	.word	0x0800383d
 80037e4:	0800383d 	.word	0x0800383d
 80037e8:	0800383d 	.word	0x0800383d
 80037ec:	0800383d 	.word	0x0800383d
 80037f0:	0800383d 	.word	0x0800383d
 80037f4:	08003843 	.word	0x08003843
 80037f8:	0800383d 	.word	0x0800383d
 80037fc:	0800383d 	.word	0x0800383d
 8003800:	0800383d 	.word	0x0800383d
 8003804:	0800383d 	.word	0x0800383d
 8003808:	0800383d 	.word	0x0800383d
 800380c:	0800383d 	.word	0x0800383d
 8003810:	0800383d 	.word	0x0800383d
 8003814:	08003843 	.word	0x08003843
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	2101      	movs	r1, #1
 800381e:	4618      	mov	r0, r3
 8003820:	f000 fdf4 	bl	800440c <RCCEx_PLL2_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003828:	e00c      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	3324      	adds	r3, #36	; 0x24
 800382e:	2101      	movs	r1, #1
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fe9d 	bl	8004570 <RCCEx_PLL3_Config>
 8003836:	4603      	mov	r3, r0
 8003838:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800383a:	e003      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	75fb      	strb	r3, [r7, #23]
      break;
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8003842:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003844:	7dfb      	ldrb	r3, [r7, #23]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800384a:	4b24      	ldr	r3, [pc, #144]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800384c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800384e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003856:	4921      	ldr	r1, [pc, #132]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003858:	4313      	orrs	r3, r2
 800385a:	654b      	str	r3, [r1, #84]	; 0x54
 800385c:	e001      	b.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800385e:	7dfb      	ldrb	r3, [r7, #23]
 8003860:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d03e      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003872:	2b05      	cmp	r3, #5
 8003874:	d820      	bhi.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8003876:	a201      	add	r2, pc, #4	; (adr r2, 800387c <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800387c:	080038bf 	.word	0x080038bf
 8003880:	08003895 	.word	0x08003895
 8003884:	080038a7 	.word	0x080038a7
 8003888:	080038bf 	.word	0x080038bf
 800388c:	080038bf 	.word	0x080038bf
 8003890:	080038bf 	.word	0x080038bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	2101      	movs	r1, #1
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fdb6 	bl	800440c <RCCEx_PLL2_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038a4:	e00c      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3324      	adds	r3, #36	; 0x24
 80038aa:	2101      	movs	r1, #1
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 fe5f 	bl	8004570 <RCCEx_PLL3_Config>
 80038b2:	4603      	mov	r3, r0
 80038b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	75fb      	strb	r3, [r7, #23]
      break;
 80038bc:	e000      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80038be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c0:	7dfb      	ldrb	r3, [r7, #23]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d110      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ca:	f023 0207 	bic.w	r2, r3, #7
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d2:	4902      	ldr	r1, [pc, #8]	; (80038dc <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	654b      	str	r3, [r1, #84]	; 0x54
 80038d8:	e008      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80038da:	bf00      	nop
 80038dc:	58024400 	.word	0x58024400
 80038e0:	58024800 	.word	0x58024800
 80038e4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d039      	beq.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d820      	bhi.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003902:	a201      	add	r2, pc, #4	; (adr r2, 8003908 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003908:	0800394b 	.word	0x0800394b
 800390c:	08003921 	.word	0x08003921
 8003910:	08003933 	.word	0x08003933
 8003914:	0800394b 	.word	0x0800394b
 8003918:	0800394b 	.word	0x0800394b
 800391c:	0800394b 	.word	0x0800394b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	2101      	movs	r1, #1
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fd70 	bl	800440c <RCCEx_PLL2_Config>
 800392c:	4603      	mov	r3, r0
 800392e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003930:	e00c      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	3324      	adds	r3, #36	; 0x24
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f000 fe19 	bl	8004570 <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003942:	e003      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	75fb      	strb	r3, [r7, #23]
      break;
 8003948:	e000      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800394a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394c:	7dfb      	ldrb	r3, [r7, #23]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d10a      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003952:	4bb7      	ldr	r3, [pc, #732]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003956:	f023 0207 	bic.w	r2, r3, #7
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003960:	49b3      	ldr	r1, [pc, #716]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003962:	4313      	orrs	r3, r2
 8003964:	658b      	str	r3, [r1, #88]	; 0x58
 8003966:	e001      	b.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003968:	7dfb      	ldrb	r3, [r7, #23]
 800396a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0320 	and.w	r3, r3, #32
 8003974:	2b00      	cmp	r3, #0
 8003976:	d04b      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800397e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003982:	d02e      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003988:	d828      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800398a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398e:	d02a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d822      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003996:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800399a:	d026      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800399c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039a0:	d81c      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80039a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039a6:	d010      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80039a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039ac:	d816      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d01d      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80039b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039b6:	d111      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3304      	adds	r3, #4
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fd24 	bl	800440c <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039c8:	e012      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3324      	adds	r3, #36	; 0x24
 80039ce:	2102      	movs	r1, #2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fdcd 	bl	8004570 <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80039da:	e009      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
      break;
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80039e2:	bf00      	nop
 80039e4:	e004      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80039ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039f0:	7dfb      	ldrb	r3, [r7, #23]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b8e      	ldr	r3, [pc, #568]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a04:	498a      	ldr	r1, [pc, #552]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	654b      	str	r3, [r1, #84]	; 0x54
 8003a0a:	e001      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	7dfb      	ldrb	r3, [r7, #23]
 8003a0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d04b      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a22:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a26:	d02e      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003a28:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a2c:	d828      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a32:	d02a      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d822      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003a3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a3e:	d026      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003a40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a44:	d81c      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a4a:	d010      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003a4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a50:	d816      	bhi.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d01d      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d111      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3304      	adds	r3, #4
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 fcd2 	bl	800440c <RCCEx_PLL2_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a6c:	e012      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3324      	adds	r3, #36	; 0x24
 8003a72:	2102      	movs	r1, #2
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 fd7b 	bl	8004570 <RCCEx_PLL3_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003a7e:	e009      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
      break;
 8003a84:	e006      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003a86:	bf00      	nop
 8003a88:	e004      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003a8a:	bf00      	nop
 8003a8c:	e002      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003a8e:	bf00      	nop
 8003a90:	e000      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003a92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a9a:	4b65      	ldr	r3, [pc, #404]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa8:	4961      	ldr	r1, [pc, #388]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	658b      	str	r3, [r1, #88]	; 0x58
 8003aae:	e001      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d04b      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003aca:	d02e      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003acc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003ad0:	d828      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	d02a      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003adc:	d822      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003ade:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ae2:	d026      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003ae4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ae8:	d81c      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003aee:	d010      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af4:	d816      	bhi.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01d      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d111      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3304      	adds	r3, #4
 8003b04:	2100      	movs	r1, #0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fc80 	bl	800440c <RCCEx_PLL2_Config>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b10:	e012      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3324      	adds	r3, #36	; 0x24
 8003b16:	2102      	movs	r1, #2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fd29 	bl	8004570 <RCCEx_PLL3_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003b22:	e009      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	75fb      	strb	r3, [r7, #23]
      break;
 8003b28:	e006      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003b2a:	bf00      	nop
 8003b2c:	e004      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003b2e:	bf00      	nop
 8003b30:	e002      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003b32:	bf00      	nop
 8003b34:	e000      	b.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003b36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003b3e:	4b3c      	ldr	r3, [pc, #240]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b4c:	4938      	ldr	r1, [pc, #224]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	658b      	str	r3, [r1, #88]	; 0x58
 8003b52:	e001      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d01a      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6e:	d10a      	bne.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3324      	adds	r3, #36	; 0x24
 8003b74:	2102      	movs	r1, #2
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fcfa 	bl	8004570 <RCCEx_PLL3_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b86:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b94:	4926      	ldr	r1, [pc, #152]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d01a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3324      	adds	r3, #36	; 0x24
 8003bb6:	2102      	movs	r1, #2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f000 fcd9 	bl	8004570 <RCCEx_PLL3_Config>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bd6:	4916      	ldr	r1, [pc, #88]	; (8003c30 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d036      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf2:	d01f      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bf8:	d817      	bhi.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003bfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c02:	d009      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003c04:	e011      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fbfd 	bl	800440c <RCCEx_PLL2_Config>
 8003c12:	4603      	mov	r3, r0
 8003c14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c16:	e00e      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3324      	adds	r3, #36	; 0x24
 8003c1c:	2102      	movs	r1, #2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fca6 	bl	8004570 <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003c28:	e005      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003c2e:	e002      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003c30:	58024400 	.word	0x58024400
      break;
 8003c34:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c36:	7dfb      	ldrb	r3, [r7, #23]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c3c:	4b93      	ldr	r3, [pc, #588]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003c4a:	4990      	ldr	r1, [pc, #576]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	658b      	str	r3, [r1, #88]	; 0x58
 8003c50:	e001      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	7dfb      	ldrb	r3, [r7, #23]
 8003c54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d033      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c6c:	d01c      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003c6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c72:	d816      	bhi.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003c74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c78:	d003      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003c7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c7e:	d007      	beq.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003c80:	e00f      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c82:	4b82      	ldr	r3, [pc, #520]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	4a81      	ldr	r2, [pc, #516]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003c8e:	e00c      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3324      	adds	r3, #36	; 0x24
 8003c94:	2101      	movs	r1, #1
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fc6a 	bl	8004570 <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003ca0:	e003      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8003ca6:	e000      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003ca8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003caa:	7dfb      	ldrb	r3, [r7, #23]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb0:	4b76      	ldr	r3, [pc, #472]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cbe:	4973      	ldr	r1, [pc, #460]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	654b      	str	r3, [r1, #84]	; 0x54
 8003cc4:	e001      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
 8003cc8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d029      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ce2:	d007      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003ce4:	e00f      	b.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ce6:	4b69      	ldr	r3, [pc, #420]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	4a68      	ldr	r2, [pc, #416]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003cf2:	e00b      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 fb86 	bl	800440c <RCCEx_PLL2_Config>
 8003d00:	4603      	mov	r3, r0
 8003d02:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003d04:	e002      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d12:	4b5e      	ldr	r3, [pc, #376]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1e:	495b      	ldr	r1, [pc, #364]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d24:	e001      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00a      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fc17 	bl	8004570 <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d030      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d60:	d017      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003d62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d66:	d811      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d6c:	d013      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003d6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d72:	d80b      	bhi.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d010      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d7c:	d106      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d7e:	4b43      	ldr	r3, [pc, #268]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	4a42      	ldr	r2, [pc, #264]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003d8a:	e007      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d90:	e004      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003d92:	bf00      	nop
 8003d94:	e002      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003d96:	bf00      	nop
 8003d98:	e000      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003d9a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d9c:	7dfb      	ldrb	r3, [r7, #23]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da2:	4b3a      	ldr	r3, [pc, #232]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dae:	4937      	ldr	r1, [pc, #220]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	654b      	str	r3, [r1, #84]	; 0x54
 8003db4:	e001      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db6:	7dfb      	ldrb	r3, [r7, #23]
 8003db8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d008      	beq.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dc6:	4b31      	ldr	r3, [pc, #196]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd2:	492e      	ldr	r1, [pc, #184]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d009      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003de4:	4b29      	ldr	r3, [pc, #164]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003df2:	4926      	ldr	r1, [pc, #152]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d008      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e04:	4b21      	ldr	r3, [pc, #132]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e10:	491e      	ldr	r1, [pc, #120]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e22:	4b1a      	ldr	r3, [pc, #104]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e28:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e2c:	6113      	str	r3, [r2, #16]
 8003e2e:	4b17      	ldr	r3, [pc, #92]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e38:	4914      	ldr	r1, [pc, #80]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	da08      	bge.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003e46:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e52:	490e      	ldr	r1, [pc, #56]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d009      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e64:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e72:	4906      	ldr	r1, [pc, #24]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003e78:	7dbb      	ldrb	r3, [r7, #22]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e000      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	58024400 	.word	0x58024400

08003e90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003e94:	f7ff f860 	bl	8002f58 <HAL_RCC_GetHCLKFreq>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	091b      	lsrs	r3, r3, #4
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	4904      	ldr	r1, [pc, #16]	; (8003eb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003ea6:	5ccb      	ldrb	r3, [r1, r3]
 8003ea8:	f003 031f 	and.w	r3, r3, #31
 8003eac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	58024400 	.word	0x58024400
 8003eb8:	08006cfc 	.word	0x08006cfc

08003ebc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b089      	sub	sp, #36	; 0x24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ec4:	4ba1      	ldr	r3, [pc, #644]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec8:	f003 0303 	and.w	r3, r3, #3
 8003ecc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ece:	4b9f      	ldr	r3, [pc, #636]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed2:	0b1b      	lsrs	r3, r3, #12
 8003ed4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ed8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003eda:	4b9c      	ldr	r3, [pc, #624]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003ee6:	4b99      	ldr	r3, [pc, #612]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	08db      	lsrs	r3, r3, #3
 8003eec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	ee07 3a90 	vmov	s15, r3
 8003efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8111 	beq.w	800412c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	f000 8083 	beq.w	8004018 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	f200 80a1 	bhi.w	800405c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d056      	beq.n	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003f26:	e099      	b.n	800405c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d02d      	beq.n	8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f34:	4b85      	ldr	r3, [pc, #532]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	08db      	lsrs	r3, r3, #3
 8003f3a:	f003 0303 	and.w	r3, r3, #3
 8003f3e:	4a84      	ldr	r2, [pc, #528]	; (8004150 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003f40:	fa22 f303 	lsr.w	r3, r2, r3
 8003f44:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	ee07 3a90 	vmov	s15, r3
 8003f4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f5e:	4b7b      	ldr	r3, [pc, #492]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f66:	ee07 3a90 	vmov	s15, r3
 8003f6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f72:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003f76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f8a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8003f8e:	e087      	b.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	ee07 3a90 	vmov	s15, r3
 8003f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f9a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004158 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fa2:	4b6a      	ldr	r3, [pc, #424]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003faa:	ee07 3a90 	vmov	s15, r3
 8003fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fb6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003fd2:	e065      	b.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	ee07 3a90 	vmov	s15, r3
 8003fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fde:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800415c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fe6:	4b59      	ldr	r3, [pc, #356]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ff6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ffa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004006:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800400a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800400e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004012:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004016:	e043      	b.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	ee07 3a90 	vmov	s15, r3
 800401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004022:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004160 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800402a:	4b48      	ldr	r3, [pc, #288]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800402c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800402e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004032:	ee07 3a90 	vmov	s15, r3
 8004036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403a:	ed97 6a03 	vldr	s12, [r7, #12]
 800403e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800404a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800404e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800405a:	e021      	b.n	80040a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004066:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800415c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800406a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004082:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004154 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800408a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800408e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800409e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80040a0:	4b2a      	ldr	r3, [pc, #168]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	0a5b      	lsrs	r3, r3, #9
 80040a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80040be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040c6:	ee17 2a90 	vmov	r2, s15
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80040ce:	4b1f      	ldr	r3, [pc, #124]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	0c1b      	lsrs	r3, r3, #16
 80040d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040d8:	ee07 3a90 	vmov	s15, r3
 80040dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80040e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80040e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80040ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f4:	ee17 2a90 	vmov	r2, s15
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80040fc:	4b13      	ldr	r3, [pc, #76]	; (800414c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	0e1b      	lsrs	r3, r3, #24
 8004102:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004112:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004116:	edd7 6a07 	vldr	s13, [r7, #28]
 800411a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800411e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004122:	ee17 2a90 	vmov	r2, s15
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800412a:	e008      	b.n	800413e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
}
 800413e:	bf00      	nop
 8004140:	3724      	adds	r7, #36	; 0x24
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	58024400 	.word	0x58024400
 8004150:	03d09000 	.word	0x03d09000
 8004154:	46000000 	.word	0x46000000
 8004158:	4c742400 	.word	0x4c742400
 800415c:	4a742400 	.word	0x4a742400
 8004160:	4bbebc20 	.word	0x4bbebc20

08004164 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004164:	b480      	push	{r7}
 8004166:	b089      	sub	sp, #36	; 0x24
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800416c:	4ba1      	ldr	r3, [pc, #644]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800416e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004176:	4b9f      	ldr	r3, [pc, #636]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417a:	0d1b      	lsrs	r3, r3, #20
 800417c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004180:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004182:	4b9c      	ldr	r3, [pc, #624]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800418e:	4b99      	ldr	r3, [pc, #612]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	08db      	lsrs	r3, r3, #3
 8004194:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	fb02 f303 	mul.w	r3, r2, r3
 800419e:	ee07 3a90 	vmov	s15, r3
 80041a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 8111 	beq.w	80043d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	f000 8083 	beq.w	80042c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	2b02      	cmp	r3, #2
 80041be:	f200 80a1 	bhi.w	8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d056      	beq.n	800427c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80041ce:	e099      	b.n	8004304 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80041d0:	4b88      	ldr	r3, [pc, #544]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d02d      	beq.n	8004238 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041dc:	4b85      	ldr	r3, [pc, #532]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	08db      	lsrs	r3, r3, #3
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	4a84      	ldr	r2, [pc, #528]	; (80043f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	ee07 3a90 	vmov	s15, r3
 80041fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	4b7b      	ldr	r3, [pc, #492]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004216:	ed97 6a03 	vldr	s12, [r7, #12]
 800421a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800421e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800422a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004236:	e087      	b.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004400 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425a:	ed97 6a03 	vldr	s12, [r7, #12]
 800425e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800426e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800427a:	e065      	b.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004286:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800428a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428e:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429e:	ed97 6a03 	vldr	s12, [r7, #12]
 80042a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80042be:	e043      	b.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004408 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80042ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042d2:	4b48      	ldr	r3, [pc, #288]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80042ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004302:	e021      	b.n	8004348 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	ee07 3a90 	vmov	s15, r3
 800430a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800430e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004312:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004326:	ed97 6a03 	vldr	s12, [r7, #12]
 800432a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80043fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800432e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004332:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004336:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800433a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800433e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004342:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004346:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004348:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	0a5b      	lsrs	r3, r3, #9
 800434e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800435e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004362:	edd7 6a07 	vldr	s13, [r7, #28]
 8004366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800436a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800436e:	ee17 2a90 	vmov	r2, s15
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004376:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	0c1b      	lsrs	r3, r3, #16
 800437c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004380:	ee07 3a90 	vmov	s15, r3
 8004384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800438c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004390:	edd7 6a07 	vldr	s13, [r7, #28]
 8004394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800439c:	ee17 2a90 	vmov	r2, s15
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	0e1b      	lsrs	r3, r3, #24
 80043aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043be:	edd7 6a07 	vldr	s13, [r7, #28]
 80043c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043ca:	ee17 2a90 	vmov	r2, s15
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80043d2:	e008      	b.n	80043e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
}
 80043e6:	bf00      	nop
 80043e8:	3724      	adds	r7, #36	; 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	58024400 	.word	0x58024400
 80043f8:	03d09000 	.word	0x03d09000
 80043fc:	46000000 	.word	0x46000000
 8004400:	4c742400 	.word	0x4c742400
 8004404:	4a742400 	.word	0x4a742400
 8004408:	4bbebc20 	.word	0x4bbebc20

0800440c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800441a:	4b53      	ldr	r3, [pc, #332]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	2b03      	cmp	r3, #3
 8004424:	d101      	bne.n	800442a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e099      	b.n	800455e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800442a:	4b4f      	ldr	r3, [pc, #316]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a4e      	ldr	r2, [pc, #312]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004430:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004434:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004436:	f7fc fd85 	bl	8000f44 <HAL_GetTick>
 800443a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800443c:	e008      	b.n	8004450 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800443e:	f7fc fd81 	bl	8000f44 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d901      	bls.n	8004450 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	e086      	b.n	800455e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004450:	4b45      	ldr	r3, [pc, #276]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1f0      	bne.n	800443e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800445c:	4b42      	ldr	r3, [pc, #264]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 800445e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004460:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	031b      	lsls	r3, r3, #12
 800446a:	493f      	ldr	r1, [pc, #252]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 800446c:	4313      	orrs	r3, r2
 800446e:	628b      	str	r3, [r1, #40]	; 0x28
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	3b01      	subs	r3, #1
 8004476:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	3b01      	subs	r3, #1
 8004480:	025b      	lsls	r3, r3, #9
 8004482:	b29b      	uxth	r3, r3
 8004484:	431a      	orrs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	3b01      	subs	r3, #1
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	3b01      	subs	r3, #1
 800449a:	061b      	lsls	r3, r3, #24
 800449c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80044a0:	4931      	ldr	r1, [pc, #196]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80044a6:	4b30      	ldr	r3, [pc, #192]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	492d      	ldr	r1, [pc, #180]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80044b8:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	f023 0220 	bic.w	r2, r3, #32
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	4928      	ldr	r1, [pc, #160]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80044ca:	4b27      	ldr	r3, [pc, #156]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	4a26      	ldr	r2, [pc, #152]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044d0:	f023 0310 	bic.w	r3, r3, #16
 80044d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044da:	4b24      	ldr	r3, [pc, #144]	; (800456c <RCCEx_PLL2_Config+0x160>)
 80044dc:	4013      	ands	r3, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	69d2      	ldr	r2, [r2, #28]
 80044e2:	00d2      	lsls	r2, r2, #3
 80044e4:	4920      	ldr	r1, [pc, #128]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80044ea:	4b1f      	ldr	r3, [pc, #124]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044f0:	f043 0310 	orr.w	r3, r3, #16
 80044f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80044fc:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 80044fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004500:	4a19      	ldr	r2, [pc, #100]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004502:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004508:	e00f      	b.n	800452a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d106      	bne.n	800451e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004510:	4b15      	ldr	r3, [pc, #84]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800451a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800451c:	e005      	b.n	800452a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800451e:	4b12      	ldr	r3, [pc, #72]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a11      	ldr	r2, [pc, #68]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004524:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800452a:	4b0f      	ldr	r3, [pc, #60]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a0e      	ldr	r2, [pc, #56]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004530:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004536:	f7fc fd05 	bl	8000f44 <HAL_GetTick>
 800453a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800453c:	e008      	b.n	8004550 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800453e:	f7fc fd01 	bl	8000f44 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d901      	bls.n	8004550 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e006      	b.n	800455e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <RCCEx_PLL2_Config+0x15c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0f0      	beq.n	800453e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	58024400 	.word	0x58024400
 800456c:	ffff0007 	.word	0xffff0007

08004570 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800457e:	4b53      	ldr	r3, [pc, #332]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	2b03      	cmp	r3, #3
 8004588:	d101      	bne.n	800458e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e099      	b.n	80046c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800458e:	4b4f      	ldr	r3, [pc, #316]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4e      	ldr	r2, [pc, #312]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004598:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800459a:	f7fc fcd3 	bl	8000f44 <HAL_GetTick>
 800459e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80045a2:	f7fc fccf 	bl	8000f44 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e086      	b.n	80046c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80045b4:	4b45      	ldr	r3, [pc, #276]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1f0      	bne.n	80045a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80045c0:	4b42      	ldr	r3, [pc, #264]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 80045c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	051b      	lsls	r3, r3, #20
 80045ce:	493f      	ldr	r1, [pc, #252]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	628b      	str	r3, [r1, #40]	; 0x28
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	3b01      	subs	r3, #1
 80045da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	025b      	lsls	r3, r3, #9
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	431a      	orrs	r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68db      	ldr	r3, [r3, #12]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	041b      	lsls	r3, r3, #16
 80045f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045f6:	431a      	orrs	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	3b01      	subs	r3, #1
 80045fe:	061b      	lsls	r3, r3, #24
 8004600:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004604:	4931      	ldr	r1, [pc, #196]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004606:	4313      	orrs	r3, r2
 8004608:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800460a:	4b30      	ldr	r3, [pc, #192]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	492d      	ldr	r1, [pc, #180]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004618:	4313      	orrs	r3, r2
 800461a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800461c:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	4928      	ldr	r1, [pc, #160]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 800462a:	4313      	orrs	r3, r2
 800462c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800462e:	4b27      	ldr	r3, [pc, #156]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004632:	4a26      	ldr	r2, [pc, #152]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004634:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004638:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800463a:	4b24      	ldr	r3, [pc, #144]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 800463c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463e:	4b24      	ldr	r3, [pc, #144]	; (80046d0 <RCCEx_PLL3_Config+0x160>)
 8004640:	4013      	ands	r3, r2
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	69d2      	ldr	r2, [r2, #28]
 8004646:	00d2      	lsls	r2, r2, #3
 8004648:	4920      	ldr	r1, [pc, #128]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 800464a:	4313      	orrs	r3, r2
 800464c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800464e:	4b1f      	ldr	r3, [pc, #124]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004658:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004660:	4b1a      	ldr	r3, [pc, #104]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004664:	4a19      	ldr	r2, [pc, #100]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004666:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800466a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800466c:	e00f      	b.n	800468e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d106      	bne.n	8004682 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004674:	4b15      	ldr	r3, [pc, #84]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 800467a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800467e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004680:	e005      	b.n	800468e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	4a11      	ldr	r2, [pc, #68]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004688:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800468c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800468e:	4b0f      	ldr	r3, [pc, #60]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a0e      	ldr	r2, [pc, #56]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 8004694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800469a:	f7fc fc53 	bl	8000f44 <HAL_GetTick>
 800469e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046a0:	e008      	b.n	80046b4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046a2:	f7fc fc4f 	bl	8000f44 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e006      	b.n	80046c2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80046b4:	4b05      	ldr	r3, [pc, #20]	; (80046cc <RCCEx_PLL3_Config+0x15c>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	58024400 	.word	0x58024400
 80046d0:	ffff0007 	.word	0xffff0007

080046d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 80046dc:	2300      	movs	r3, #0
 80046de:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0eb      	b.n	80048c2 <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a75      	ldr	r2, [pc, #468]	; (80048cc <HAL_SPI_Init+0x1f8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <HAL_SPI_Init+0x46>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a74      	ldr	r2, [pc, #464]	; (80048d0 <HAL_SPI_Init+0x1fc>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d00a      	beq.n	800471a <HAL_SPI_Init+0x46>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a72      	ldr	r2, [pc, #456]	; (80048d4 <HAL_SPI_Init+0x200>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d005      	beq.n	800471a <HAL_SPI_Init+0x46>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b0f      	cmp	r3, #15
 8004714:	d901      	bls.n	800471a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e0d3      	b.n	80048c2 <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 fe88 	bl	8005430 <SPI_GetPacketSize>
 8004720:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a69      	ldr	r2, [pc, #420]	; (80048cc <HAL_SPI_Init+0x1f8>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00c      	beq.n	8004746 <HAL_SPI_Init+0x72>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a67      	ldr	r2, [pc, #412]	; (80048d0 <HAL_SPI_Init+0x1fc>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d007      	beq.n	8004746 <HAL_SPI_Init+0x72>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a66      	ldr	r2, [pc, #408]	; (80048d4 <HAL_SPI_Init+0x200>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d002      	beq.n	8004746 <HAL_SPI_Init+0x72>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b08      	cmp	r3, #8
 8004744:	d811      	bhi.n	800476a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800474a:	4a60      	ldr	r2, [pc, #384]	; (80048cc <HAL_SPI_Init+0x1f8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d009      	beq.n	8004764 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a5e      	ldr	r2, [pc, #376]	; (80048d0 <HAL_SPI_Init+0x1fc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d004      	beq.n	8004764 <HAL_SPI_Init+0x90>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_SPI_Init+0x200>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d104      	bne.n	800476e <HAL_SPI_Init+0x9a>
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	2b10      	cmp	r3, #16
 8004768:	d901      	bls.n	800476e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e0a9      	b.n	80048c2 <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc fa08 	bl	8000b98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047a8:	d119      	bne.n	80047de <HAL_SPI_Init+0x10a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047b2:	d103      	bne.n	80047bc <HAL_SPI_Init+0xe8>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d10c      	bne.n	80047de <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047cc:	d107      	bne.n	80047de <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69da      	ldr	r2, [r3, #28]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	431a      	orrs	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f0:	ea42 0103 	orr.w	r1, r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68da      	ldr	r2, [r3, #12]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	431a      	orrs	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800483e:	ea42 0103 	orr.w	r1, r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d113      	bne.n	800487e <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004868:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800487c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0201 	bic.w	r2, r2, #1
 800488c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00a      	beq.n	80048b0 <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80048c0:	2300      	movs	r3, #0
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	40013000 	.word	0x40013000
 80048d0:	40003800 	.word	0x40003800
 80048d4:	40003c00 	.word	0x40003c00

080048d8 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08a      	sub	sp, #40	; 0x28
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048e8:	2300      	movs	r3, #0
 80048ea:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	3330      	adds	r3, #48	; 0x30
 80048f2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048fc:	d112      	bne.n	8004924 <HAL_SPI_Receive+0x4c>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10e      	bne.n	8004924 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2204      	movs	r2, #4
 800490a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800490e:	88fa      	ldrh	r2, [r7, #6]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	9300      	str	r3, [sp, #0]
 8004914:	4613      	mov	r3, r2
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 f9ce 	bl	8004cbc <HAL_SPI_TransmitReceive>
 8004920:	4603      	mov	r3, r0
 8004922:	e1c7      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_SPI_Receive+0x5a>
 800492e:	2302      	movs	r3, #2
 8004930:	e1c0      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800493a:	f7fc fb03 	bl	8000f44 <HAL_GetTick>
 800493e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b01      	cmp	r3, #1
 800494a:	d007      	beq.n	800495c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800494c:	2302      	movs	r3, #2
 800494e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004958:	7ffb      	ldrb	r3, [r7, #31]
 800495a:	e1ab      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d002      	beq.n	8004968 <HAL_SPI_Receive+0x90>
 8004962:	88fb      	ldrh	r3, [r7, #6]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d107      	bne.n	8004978 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004974:	7ffb      	ldrb	r3, [r7, #31]
 8004976:	e19d      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2204      	movs	r2, #4
 800497c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	88fa      	ldrh	r2, [r7, #6]
 800499a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80049c8:	d107      	bne.n	80049da <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	4b94      	ldr	r3, [pc, #592]	; (8004c34 <HAL_SPI_Receive+0x35c>)
 80049e2:	4013      	ands	r3, r2
 80049e4:	88f9      	ldrh	r1, [r7, #6]
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	430b      	orrs	r3, r1
 80049ec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f042 0201 	orr.w	r2, r2, #1
 80049fc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d107      	bne.n	8004a18 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a16:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b0f      	cmp	r3, #15
 8004a1e:	d948      	bls.n	8004ab2 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004a20:	e040      	b.n	8004aa4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695a      	ldr	r2, [r3, #20]
 8004a28:	f248 0308 	movw	r3, #32776	; 0x8008
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d014      	beq.n	8004a5c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a3c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004a5a:	e023      	b.n	8004aa4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5c:	f7fc fa72 	bl	8000f44 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d803      	bhi.n	8004a74 <HAL_SPI_Receive+0x19c>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Receive+0x1a2>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d114      	bne.n	8004aa4 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fc0a 	bl	8005294 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e107      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1b8      	bne.n	8004a22 <HAL_SPI_Receive+0x14a>
 8004ab0:	e0ed      	b.n	8004c8e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b07      	cmp	r3, #7
 8004ab8:	f240 80e2 	bls.w	8004c80 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004abc:	e05b      	b.n	8004b76 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d030      	beq.n	8004b2e <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d014      	beq.n	8004b04 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ae2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ae4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	3b02      	subs	r3, #2
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004b02:	e038      	b.n	8004b76 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	8812      	ldrh	r2, [r2, #0]
 8004b0c:	b292      	uxth	r2, r2
 8004b0e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b14:	1c9a      	adds	r2, r3, #2
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004b2c:	e023      	b.n	8004b76 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b2e:	f7fc fa09 	bl	8000f44 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d803      	bhi.n	8004b46 <HAL_SPI_Receive+0x26e>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d102      	bne.n	8004b4c <HAL_SPI_Receive+0x274>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d114      	bne.n	8004b76 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 fba1 	bl	8005294 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e09e      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d19d      	bne.n	8004abe <HAL_SPI_Receive+0x1e6>
 8004b82:	e084      	b.n	8004c8e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695b      	ldr	r3, [r3, #20]
 8004b8a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d052      	beq.n	8004c38 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d014      	beq.n	8004bca <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004baa:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb0:	1d1a      	adds	r2, r3, #4
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b04      	subs	r3, #4
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004bc8:	e05a      	b.n	8004c80 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd8:	d914      	bls.n	8004c04 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	b292      	uxth	r2, r2
 8004be4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bea:	1c9a      	adds	r2, r3, #2
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b02      	subs	r3, #2
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004c02:	e03d      	b.n	8004c80 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004c32:	e025      	b.n	8004c80 <HAL_SPI_Receive+0x3a8>
 8004c34:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c38:	f7fc f984 	bl	8000f44 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	683a      	ldr	r2, [r7, #0]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d803      	bhi.n	8004c50 <HAL_SPI_Receive+0x378>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d102      	bne.n	8004c56 <HAL_SPI_Receive+0x37e>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d114      	bne.n	8004c80 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 fb1c 	bl	8005294 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c6a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e019      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f47f af7b 	bne.w	8004b84 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 fb00 	bl	8005294 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e000      	b.n	8004cb4 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8004cb2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3720      	adds	r7, #32
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08e      	sub	sp, #56	; 0x38
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3320      	adds	r3, #32
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	3330      	adds	r3, #48	; 0x30
 8004cde:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x32>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e2ce      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cf6:	f7fc f925 	bl	8000f44 <HAL_GetTick>
 8004cfa:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004cfc:	887b      	ldrh	r3, [r7, #2]
 8004cfe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004d00:	887b      	ldrh	r3, [r7, #2]
 8004d02:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d0a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d12:	7efb      	ldrb	r3, [r7, #27]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d014      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x86>
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d1e:	d106      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <HAL_SPI_TransmitReceive+0x72>
 8004d28:	7efb      	ldrb	r3, [r7, #27]
 8004d2a:	2b04      	cmp	r3, #4
 8004d2c:	d009      	beq.n	8004d42 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d40:	e2a4      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d005      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x98>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d002      	beq.n	8004d54 <HAL_SPI_TransmitReceive+0x98>
 8004d4e:	887b      	ldrh	r3, [r7, #2]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d109      	bne.n	8004d68 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004d62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d66:	e291      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d003      	beq.n	8004d7c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2205      	movs	r2, #5
 8004d78:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	887a      	ldrh	r2, [r7, #2]
 8004d8e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	887a      	ldrh	r2, [r7, #2]
 8004d96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	887a      	ldrh	r2, [r7, #2]
 8004dac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2200      	movs	r2, #0
 8004db4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	4b9f      	ldr	r3, [pc, #636]	; (8005040 <HAL_SPI_TransmitReceive+0x384>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	8879      	ldrh	r1, [r7, #2]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	430b      	orrs	r3, r1
 8004dce:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004de8:	d107      	bne.n	8004dfa <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b0f      	cmp	r3, #15
 8004e00:	d970      	bls.n	8004ee4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004e02:	e068      	b.n	8004ed6 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d11a      	bne.n	8004e48 <HAL_SPI_TransmitReceive+0x18c>
 8004e12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d017      	beq.n	8004e48 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e28:	1d1a      	adds	r2, r3, #4
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004e46:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	695a      	ldr	r2, [r3, #20]
 8004e4e:	f248 0308 	movw	r3, #32776	; 0x8008
 8004e52:	4013      	ands	r3, r2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01a      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x1d2>
 8004e58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d017      	beq.n	8004e8e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e68:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e6e:	1d1a      	adds	r2, r3, #4
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	3b01      	subs	r3, #1
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004e8c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e8e:	f7fc f859 	bl	8000f44 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d803      	bhi.n	8004ea6 <HAL_SPI_TransmitReceive+0x1ea>
 8004e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea4:	d102      	bne.n	8004eac <HAL_SPI_TransmitReceive+0x1f0>
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d114      	bne.n	8004ed6 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004eac:	68f8      	ldr	r0, [r7, #12]
 8004eae:	f000 f9f1 	bl	8005294 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ec0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e1da      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004ed6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d193      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x148>
 8004edc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d190      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x148>
 8004ee2:	e1ac      	b.n	800523e <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	f240 81a0 	bls.w	800522e <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004eee:	e0a9      	b.n	8005044 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0302 	and.w	r3, r3, #2
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d139      	bne.n	8004f72 <HAL_SPI_TransmitReceive+0x2b6>
 8004efe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d036      	beq.n	8004f72 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8004f04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d91c      	bls.n	8004f44 <HAL_SPI_TransmitReceive+0x288>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d018      	beq.n	8004f44 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6812      	ldr	r2, [r2, #0]
 8004f1c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	1d1a      	adds	r2, r3, #4
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	3b02      	subs	r3, #2
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f40:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004f42:	e016      	b.n	8004f72 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f48:	881a      	ldrh	r2, [r3, #0]
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f52:	1c9a      	adds	r2, r3, #2
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	3b01      	subs	r3, #1
 8004f62:	b29a      	uxth	r2, r3
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f70:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d03a      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x33a>
 8004f80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d037      	beq.n	8004ff6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d018      	beq.n	8004fc6 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f9e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fa4:	1d1a      	adds	r2, r3, #4
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b02      	subs	r3, #2
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004fc4:	e017      	b.n	8004ff6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fca:	6a3a      	ldr	r2, [r7, #32]
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ff4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff6:	f7fb ffa5 	bl	8000f44 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005002:	429a      	cmp	r2, r3
 8005004:	d803      	bhi.n	800500e <HAL_SPI_TransmitReceive+0x352>
 8005006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d102      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x358>
 800500e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005010:	2b00      	cmp	r3, #0
 8005012:	d117      	bne.n	8005044 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005014:	68f8      	ldr	r0, [r7, #12]
 8005016:	f000 f93d 	bl	8005294 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005028:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e126      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
 800503e:	bf00      	nop
 8005040:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005046:	2b00      	cmp	r3, #0
 8005048:	f47f af52 	bne.w	8004ef0 <HAL_SPI_TransmitReceive+0x234>
 800504c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800504e:	2b00      	cmp	r3, #0
 8005050:	f47f af4e 	bne.w	8004ef0 <HAL_SPI_TransmitReceive+0x234>
 8005054:	e0f3      	b.n	800523e <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	f003 0302 	and.w	r3, r3, #2
 8005060:	2b02      	cmp	r3, #2
 8005062:	d15a      	bne.n	800511a <HAL_SPI_TransmitReceive+0x45e>
 8005064:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005066:	2b00      	cmp	r3, #0
 8005068:	d057      	beq.n	800511a <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800506a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800506c:	2b03      	cmp	r3, #3
 800506e:	d91c      	bls.n	80050aa <HAL_SPI_TransmitReceive+0x3ee>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d918      	bls.n	80050aa <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005088:	1d1a      	adds	r2, r3, #4
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b04      	subs	r3, #4
 8005098:	b29a      	uxth	r2, r3
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050a8:	e037      	b.n	800511a <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80050aa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d91b      	bls.n	80050e8 <HAL_SPI_TransmitReceive+0x42c>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d017      	beq.n	80050e8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050bc:	881a      	ldrh	r2, [r3, #0]
 80050be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b02      	subs	r3, #2
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80050e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050e6:	e018      	b.n	800511a <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3320      	adds	r3, #32
 80050f2:	7812      	ldrb	r2, [r2, #0]
 80050f4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005118:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695b      	ldr	r3, [r3, #20]
 8005120:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d05e      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x52a>
 8005128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d05b      	beq.n	80051e6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d018      	beq.n	800516e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005146:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514c:	1d1a      	adds	r2, r3, #4
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005158:	b29b      	uxth	r3, r3
 800515a:	3b04      	subs	r3, #4
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800516a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800516c:	e03b      	b.n	80051e6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8005178:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800517c:	d918      	bls.n	80051b0 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005182:	6a3a      	ldr	r2, [r7, #32]
 8005184:	8812      	ldrh	r2, [r2, #0]
 8005186:	b292      	uxth	r2, r2
 8005188:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800518e:	1c9a      	adds	r2, r3, #2
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b02      	subs	r3, #2
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80051ae:	e01a      	b.n	80051e6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051bc:	7812      	ldrb	r2, [r2, #0]
 80051be:	b2d2      	uxtb	r2, r2
 80051c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80051e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051e6:	f7fb fead 	bl	8000f44 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d803      	bhi.n	80051fe <HAL_SPI_TransmitReceive+0x542>
 80051f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d102      	bne.n	8005204 <HAL_SPI_TransmitReceive+0x548>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d114      	bne.n	800522e <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 f845 	bl	8005294 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	e02e      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800522e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005230:	2b00      	cmp	r3, #0
 8005232:	f47f af10 	bne.w	8005056 <HAL_SPI_TransmitReceive+0x39a>
 8005236:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	f47f af0c 	bne.w	8005056 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800523e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	2200      	movs	r2, #0
 8005246:	2108      	movs	r1, #8
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 f8c3 	bl	80053d4 <SPI_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d007      	beq.n	8005264 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f000 f815 	bl	8005294 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e001      	b.n	800528c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8005288:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800528c:	4618      	mov	r0, r3
 800528e:	3730      	adds	r7, #48	; 0x30
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699a      	ldr	r2, [r3, #24]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f042 0208 	orr.w	r2, r2, #8
 80052b2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f042 0210 	orr.w	r2, r2, #16
 80052c2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f022 0201 	bic.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6919      	ldr	r1, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	4b3c      	ldr	r3, [pc, #240]	; (80053d0 <SPI_CloseTransfer+0x13c>)
 80052e0:	400b      	ands	r3, r1
 80052e2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80052f2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2b04      	cmp	r3, #4
 80052fe:	d014      	beq.n	800532a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f003 0320 	and.w	r3, r3, #32
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00f      	beq.n	800532a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005310:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f042 0220 	orr.w	r2, r2, #32
 8005328:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b03      	cmp	r3, #3
 8005334:	d014      	beq.n	8005360 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00f      	beq.n	8005360 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005346:	f043 0204 	orr.w	r2, r3, #4
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800535e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00f      	beq.n	800538a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005370:	f043 0201 	orr.w	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699a      	ldr	r2, [r3, #24]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005388:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00f      	beq.n	80053b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539a:	f043 0208 	orr.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	699a      	ldr	r2, [r3, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80053c4:	bf00      	nop
 80053c6:	3714      	adds	r7, #20
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr
 80053d0:	fffffc90 	.word	0xfffffc90

080053d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	4613      	mov	r3, r2
 80053e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80053e4:	e010      	b.n	8005408 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e6:	f7fb fdad 	bl	8000f44 <HAL_GetTick>
 80053ea:	4602      	mov	r2, r0
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d803      	bhi.n	80053fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fc:	d102      	bne.n	8005404 <SPI_WaitOnFlagUntilTimeout+0x30>
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e00f      	b.n	8005428 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	695a      	ldr	r2, [r3, #20]
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	4013      	ands	r3, r2
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	429a      	cmp	r2, r3
 8005416:	bf0c      	ite	eq
 8005418:	2301      	moveq	r3, #1
 800541a:	2300      	movne	r3, #0
 800541c:	b2db      	uxtb	r3, r3
 800541e:	461a      	mov	r2, r3
 8005420:	79fb      	ldrb	r3, [r7, #7]
 8005422:	429a      	cmp	r2, r3
 8005424:	d0df      	beq.n	80053e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	3301      	adds	r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	3307      	adds	r3, #7
 800544e:	08db      	lsrs	r3, r3, #3
 8005450:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	fb02 f303 	mul.w	r3, r2, r3
}
 800545a:	4618      	mov	r0, r3
 800545c:	3714      	adds	r7, #20
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005466:	b580      	push	{r7, lr}
 8005468:	b082      	sub	sp, #8
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d101      	bne.n	8005478 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e042      	b.n	80054fe <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fb fb16 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2224      	movs	r2, #36	; 0x24
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0201 	bic.w	r2, r2, #1
 80054a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fb9d 	bl	8005be8 <UART_SetConfig>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e022      	b.n	80054fe <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f001 f8f1 	bl	80066a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054e4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f001 f978 	bl	80067ec <UART_CheckIdleState>
 80054fc:	4603      	mov	r3, r0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b08a      	sub	sp, #40	; 0x28
 800550a:	af02      	add	r7, sp, #8
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	603b      	str	r3, [r7, #0]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551c:	2b20      	cmp	r3, #32
 800551e:	f040 8083 	bne.w	8005628 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <HAL_UART_Transmit+0x28>
 8005528:	88fb      	ldrh	r3, [r7, #6]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d101      	bne.n	8005532 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e07b      	b.n	800562a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005538:	2b01      	cmp	r3, #1
 800553a:	d101      	bne.n	8005540 <HAL_UART_Transmit+0x3a>
 800553c:	2302      	movs	r3, #2
 800553e:	e074      	b.n	800562a <HAL_UART_Transmit+0x124>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2221      	movs	r2, #33	; 0x21
 8005554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005558:	f7fb fcf4 	bl	8000f44 <HAL_GetTick>
 800555c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	88fa      	ldrh	r2, [r7, #6]
 8005562:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	88fa      	ldrh	r2, [r7, #6]
 800556a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d108      	bne.n	800558a <HAL_UART_Transmit+0x84>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d104      	bne.n	800558a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	e003      	b.n	8005592 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800558e:	2300      	movs	r3, #0
 8005590:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2200      	movs	r2, #0
 8005596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800559a:	e02c      	b.n	80055f6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	9300      	str	r3, [sp, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2200      	movs	r2, #0
 80055a4:	2180      	movs	r1, #128	; 0x80
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f001 f96b 	bl	8006882 <UART_WaitOnFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e039      	b.n	800562a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10b      	bne.n	80055d4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	881b      	ldrh	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	3302      	adds	r3, #2
 80055d0:	61bb      	str	r3, [r7, #24]
 80055d2:	e007      	b.n	80055e4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	781a      	ldrb	r2, [r3, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	3301      	adds	r3, #1
 80055e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1cc      	bne.n	800559c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	2140      	movs	r1, #64	; 0x40
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f001 f938 	bl	8006882 <UART_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e006      	b.n	800562a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005624:	2300      	movs	r3, #0
 8005626:	e000      	b.n	800562a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005628:	2302      	movs	r3, #2
  }
}
 800562a:	4618      	mov	r0, r3
 800562c:	3720      	adds	r7, #32
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
	...

08005634 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	f640 030f 	movw	r3, #2063	; 0x80f
 800565a:	4013      	ands	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d118      	bne.n	8005696 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b00      	cmp	r3, #0
 800566c:	d013      	beq.n	8005696 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567e:	2b00      	cmp	r3, #0
 8005680:	d009      	beq.n	8005696 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 8282 	beq.w	8005b90 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	4798      	blx	r3
      }
      return;
 8005694:	e27c      	b.n	8005b90 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f000 80ef 	beq.w	800587c <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	4b73      	ldr	r3, [pc, #460]	; (8005870 <HAL_UART_IRQHandler+0x23c>)
 80056a2:	4013      	ands	r3, r2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d105      	bne.n	80056b4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4b72      	ldr	r3, [pc, #456]	; (8005874 <HAL_UART_IRQHandler+0x240>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 80e4 	beq.w	800587c <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f003 0301 	and.w	r3, r3, #1
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d010      	beq.n	80056e0 <HAL_UART_IRQHandler+0xac>
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2201      	movs	r2, #1
 80056ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056d6:	f043 0201 	orr.w	r2, r3, #1
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d010      	beq.n	800570c <HAL_UART_IRQHandler+0xd8>
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00b      	beq.n	800570c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2202      	movs	r2, #2
 80056fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005702:	f043 0204 	orr.w	r2, r3, #4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0304 	and.w	r3, r3, #4
 8005712:	2b00      	cmp	r3, #0
 8005714:	d010      	beq.n	8005738 <HAL_UART_IRQHandler+0x104>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0301 	and.w	r3, r3, #1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00b      	beq.n	8005738 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2204      	movs	r2, #4
 8005726:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572e:	f043 0202 	orr.w	r2, r3, #2
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005738:	69fb      	ldr	r3, [r7, #28]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d015      	beq.n	800576e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4b48      	ldr	r3, [pc, #288]	; (8005870 <HAL_UART_IRQHandler+0x23c>)
 8005750:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00b      	beq.n	800576e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2208      	movs	r2, #8
 800575c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005764:	f043 0208 	orr.w	r2, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005774:	2b00      	cmp	r3, #0
 8005776:	d011      	beq.n	800579c <HAL_UART_IRQHandler+0x168>
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00c      	beq.n	800579c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800578a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	f000 81f6 	beq.w	8005b94 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d011      	beq.n	80057d6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	f003 0320 	and.w	r3, r3, #32
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d104      	bne.n	80057c6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057dc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d004      	beq.n	80057f6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d031      	beq.n	800585a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 f8c4 	bl	8006984 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b40      	cmp	r3, #64	; 0x40
 8005808:	d123      	bne.n	8005852 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689a      	ldr	r2, [r3, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005818:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005826:	4a14      	ldr	r2, [pc, #80]	; (8005878 <HAL_UART_IRQHandler+0x244>)
 8005828:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800582e:	4618      	mov	r0, r3
 8005830:	f7fb fff2 	bl	8001818 <HAL_DMA_Abort_IT>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d017      	beq.n	800586a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005844:	4610      	mov	r0, r2
 8005846:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	e00f      	b.n	800586a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9b6 	bl	8005bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005850:	e00b      	b.n	800586a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f9b2 	bl	8005bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005858:	e007      	b.n	800586a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 f9ae 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005868:	e194      	b.n	8005b94 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800586a:	bf00      	nop
    return;
 800586c:	e192      	b.n	8005b94 <HAL_UART_IRQHandler+0x560>
 800586e:	bf00      	nop
 8005870:	10000001 	.word	0x10000001
 8005874:	04000120 	.word	0x04000120
 8005878:	080069e9 	.word	0x080069e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005880:	2b01      	cmp	r3, #1
 8005882:	f040 810f 	bne.w	8005aa4 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b00      	cmp	r3, #0
 800588e:	f000 8109 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 8103 	beq.w	8005aa4 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	2210      	movs	r2, #16
 80058a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b0:	2b40      	cmp	r3, #64	; 0x40
 80058b2:	f040 80bb 	bne.w	8005a2c <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a96      	ldr	r2, [pc, #600]	; (8005b18 <HAL_UART_IRQHandler+0x4e4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d059      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a94      	ldr	r2, [pc, #592]	; (8005b1c <HAL_UART_IRQHandler+0x4e8>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d053      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a92      	ldr	r2, [pc, #584]	; (8005b20 <HAL_UART_IRQHandler+0x4ec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d04d      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a90      	ldr	r2, [pc, #576]	; (8005b24 <HAL_UART_IRQHandler+0x4f0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d047      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a8e      	ldr	r2, [pc, #568]	; (8005b28 <HAL_UART_IRQHandler+0x4f4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d041      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a8c      	ldr	r2, [pc, #560]	; (8005b2c <HAL_UART_IRQHandler+0x4f8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d03b      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a8a      	ldr	r2, [pc, #552]	; (8005b30 <HAL_UART_IRQHandler+0x4fc>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d035      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a88      	ldr	r2, [pc, #544]	; (8005b34 <HAL_UART_IRQHandler+0x500>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d02f      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a86      	ldr	r2, [pc, #536]	; (8005b38 <HAL_UART_IRQHandler+0x504>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d029      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a84      	ldr	r2, [pc, #528]	; (8005b3c <HAL_UART_IRQHandler+0x508>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d023      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a82      	ldr	r2, [pc, #520]	; (8005b40 <HAL_UART_IRQHandler+0x50c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01d      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a80      	ldr	r2, [pc, #512]	; (8005b44 <HAL_UART_IRQHandler+0x510>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d017      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a7e      	ldr	r2, [pc, #504]	; (8005b48 <HAL_UART_IRQHandler+0x514>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d011      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a7c      	ldr	r2, [pc, #496]	; (8005b4c <HAL_UART_IRQHandler+0x518>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d00b      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a7a      	ldr	r2, [pc, #488]	; (8005b50 <HAL_UART_IRQHandler+0x51c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d005      	beq.n	8005976 <HAL_UART_IRQHandler+0x342>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a78      	ldr	r2, [pc, #480]	; (8005b54 <HAL_UART_IRQHandler+0x520>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d105      	bne.n	8005982 <HAL_UART_IRQHandler+0x34e>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	b29b      	uxth	r3, r3
 8005980:	e004      	b.n	800598c <HAL_UART_IRQHandler+0x358>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	b29b      	uxth	r3, r3
 800598c:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800598e:	893b      	ldrh	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8101 	beq.w	8005b98 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800599c:	893a      	ldrh	r2, [r7, #8]
 800599e:	429a      	cmp	r2, r3
 80059a0:	f080 80fa 	bcs.w	8005b98 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	893a      	ldrh	r2, [r7, #8]
 80059a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059b6:	d02b      	beq.n	8005a10 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f022 0201 	bic.w	r2, r2, #1
 80059d6:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	689a      	ldr	r2, [r3, #8]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e6:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0210 	bic.w	r2, r2, #16
 8005a04:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fb fbe6 	bl	80011dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a1c:	b29b      	uxth	r3, r3
 8005a1e:	1ad3      	subs	r3, r2, r3
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	4619      	mov	r1, r3
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f8d3 	bl	8005bd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a2a:	e0b5      	b.n	8005b98 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80a8 	beq.w	8005b9c <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005a4c:	897b      	ldrh	r3, [r7, #10]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f000 80a4 	beq.w	8005b9c <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a62:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6899      	ldr	r1, [r3, #8]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	4b3a      	ldr	r3, [pc, #232]	; (8005b58 <HAL_UART_IRQHandler+0x524>)
 8005a70:	400b      	ands	r3, r1
 8005a72:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0210 	bic.w	r2, r2, #16
 8005a96:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a98:	897b      	ldrh	r3, [r7, #10]
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f000 f897 	bl	8005bd0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aa2:	e07b      	b.n	8005b9c <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <HAL_UART_IRQHandler+0x496>
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d008      	beq.n	8005aca <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005ac0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 ffc0 	bl	8006a48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ac8:	e06b      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d104      	bne.n	8005ae8 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d008      	beq.n	8005afa <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d057      	beq.n	8005ba0 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	4798      	blx	r3
    }
    return;
 8005af8:	e052      	b.n	8005ba0 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d02b      	beq.n	8005b5c <HAL_UART_IRQHandler+0x528>
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d026      	beq.n	8005b5c <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 ff80 	bl	8006a14 <UART_EndTransmit_IT>
    return;
 8005b14:	e045      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
 8005b16:	bf00      	nop
 8005b18:	40020010 	.word	0x40020010
 8005b1c:	40020028 	.word	0x40020028
 8005b20:	40020040 	.word	0x40020040
 8005b24:	40020058 	.word	0x40020058
 8005b28:	40020070 	.word	0x40020070
 8005b2c:	40020088 	.word	0x40020088
 8005b30:	400200a0 	.word	0x400200a0
 8005b34:	400200b8 	.word	0x400200b8
 8005b38:	40020410 	.word	0x40020410
 8005b3c:	40020428 	.word	0x40020428
 8005b40:	40020440 	.word	0x40020440
 8005b44:	40020458 	.word	0x40020458
 8005b48:	40020470 	.word	0x40020470
 8005b4c:	40020488 	.word	0x40020488
 8005b50:	400204a0 	.word	0x400204a0
 8005b54:	400204b8 	.word	0x400204b8
 8005b58:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d008      	beq.n	8005b78 <HAL_UART_IRQHandler+0x544>
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 ff7d 	bl	8006a70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b76:	e014      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00f      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	da0c      	bge.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f000 ff67 	bl	8006a5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b8e:	e008      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
      return;
 8005b90:	bf00      	nop
 8005b92:	e006      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
    return;
 8005b94:	bf00      	nop
 8005b96:	e004      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
      return;
 8005b98:	bf00      	nop
 8005b9a:	e002      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
      return;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_IRQHandler+0x56e>
    return;
 8005ba0:	bf00      	nop
  }
}
 8005ba2:	3720      	adds	r7, #32
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be8:	b5b0      	push	{r4, r5, r7, lr}
 8005bea:	b08e      	sub	sp, #56	; 0x38
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	431a      	orrs	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	4bbf      	ldr	r3, [pc, #764]	; (8005f14 <UART_SetConfig+0x32c>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6812      	ldr	r2, [r2, #0]
 8005c1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c1e:	430b      	orrs	r3, r1
 8005c20:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	68da      	ldr	r2, [r3, #12]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4ab5      	ldr	r2, [pc, #724]	; (8005f18 <UART_SetConfig+0x330>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d004      	beq.n	8005c52 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a1b      	ldr	r3, [r3, #32]
 8005c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689a      	ldr	r2, [r3, #8]
 8005c58:	4bb0      	ldr	r3, [pc, #704]	; (8005f1c <UART_SetConfig+0x334>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005c62:	430b      	orrs	r3, r1
 8005c64:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6c:	f023 010f 	bic.w	r1, r3, #15
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	430a      	orrs	r2, r1
 8005c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4aa7      	ldr	r2, [pc, #668]	; (8005f20 <UART_SetConfig+0x338>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d176      	bne.n	8005d74 <UART_SetConfig+0x18c>
 8005c86:	4ba7      	ldr	r3, [pc, #668]	; (8005f24 <UART_SetConfig+0x33c>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c8e:	2b28      	cmp	r3, #40	; 0x28
 8005c90:	d86c      	bhi.n	8005d6c <UART_SetConfig+0x184>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0xb0>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005d3d 	.word	0x08005d3d
 8005c9c:	08005d6d 	.word	0x08005d6d
 8005ca0:	08005d6d 	.word	0x08005d6d
 8005ca4:	08005d6d 	.word	0x08005d6d
 8005ca8:	08005d6d 	.word	0x08005d6d
 8005cac:	08005d6d 	.word	0x08005d6d
 8005cb0:	08005d6d 	.word	0x08005d6d
 8005cb4:	08005d6d 	.word	0x08005d6d
 8005cb8:	08005d45 	.word	0x08005d45
 8005cbc:	08005d6d 	.word	0x08005d6d
 8005cc0:	08005d6d 	.word	0x08005d6d
 8005cc4:	08005d6d 	.word	0x08005d6d
 8005cc8:	08005d6d 	.word	0x08005d6d
 8005ccc:	08005d6d 	.word	0x08005d6d
 8005cd0:	08005d6d 	.word	0x08005d6d
 8005cd4:	08005d6d 	.word	0x08005d6d
 8005cd8:	08005d4d 	.word	0x08005d4d
 8005cdc:	08005d6d 	.word	0x08005d6d
 8005ce0:	08005d6d 	.word	0x08005d6d
 8005ce4:	08005d6d 	.word	0x08005d6d
 8005ce8:	08005d6d 	.word	0x08005d6d
 8005cec:	08005d6d 	.word	0x08005d6d
 8005cf0:	08005d6d 	.word	0x08005d6d
 8005cf4:	08005d6d 	.word	0x08005d6d
 8005cf8:	08005d55 	.word	0x08005d55
 8005cfc:	08005d6d 	.word	0x08005d6d
 8005d00:	08005d6d 	.word	0x08005d6d
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005d6d 	.word	0x08005d6d
 8005d0c:	08005d6d 	.word	0x08005d6d
 8005d10:	08005d6d 	.word	0x08005d6d
 8005d14:	08005d6d 	.word	0x08005d6d
 8005d18:	08005d5d 	.word	0x08005d5d
 8005d1c:	08005d6d 	.word	0x08005d6d
 8005d20:	08005d6d 	.word	0x08005d6d
 8005d24:	08005d6d 	.word	0x08005d6d
 8005d28:	08005d6d 	.word	0x08005d6d
 8005d2c:	08005d6d 	.word	0x08005d6d
 8005d30:	08005d6d 	.word	0x08005d6d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d65 	.word	0x08005d65
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d42:	e222      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d44:	2304      	movs	r3, #4
 8005d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d4a:	e21e      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d4c:	2308      	movs	r3, #8
 8005d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d52:	e21a      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d54:	2310      	movs	r3, #16
 8005d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d5a:	e216      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d5c:	2320      	movs	r3, #32
 8005d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d62:	e212      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d64:	2340      	movs	r3, #64	; 0x40
 8005d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d6a:	e20e      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d6c:	2380      	movs	r3, #128	; 0x80
 8005d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d72:	e20a      	b.n	800618a <UART_SetConfig+0x5a2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a6b      	ldr	r2, [pc, #428]	; (8005f28 <UART_SetConfig+0x340>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d130      	bne.n	8005de0 <UART_SetConfig+0x1f8>
 8005d7e:	4b69      	ldr	r3, [pc, #420]	; (8005f24 <UART_SetConfig+0x33c>)
 8005d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d82:	f003 0307 	and.w	r3, r3, #7
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d826      	bhi.n	8005dd8 <UART_SetConfig+0x1f0>
 8005d8a:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <UART_SetConfig+0x1a8>)
 8005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005db1 	.word	0x08005db1
 8005d98:	08005db9 	.word	0x08005db9
 8005d9c:	08005dc1 	.word	0x08005dc1
 8005da0:	08005dc9 	.word	0x08005dc9
 8005da4:	08005dd1 	.word	0x08005dd1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dae:	e1ec      	b.n	800618a <UART_SetConfig+0x5a2>
 8005db0:	2304      	movs	r3, #4
 8005db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005db6:	e1e8      	b.n	800618a <UART_SetConfig+0x5a2>
 8005db8:	2308      	movs	r3, #8
 8005dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dbe:	e1e4      	b.n	800618a <UART_SetConfig+0x5a2>
 8005dc0:	2310      	movs	r3, #16
 8005dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc6:	e1e0      	b.n	800618a <UART_SetConfig+0x5a2>
 8005dc8:	2320      	movs	r3, #32
 8005dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dce:	e1dc      	b.n	800618a <UART_SetConfig+0x5a2>
 8005dd0:	2340      	movs	r3, #64	; 0x40
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd6:	e1d8      	b.n	800618a <UART_SetConfig+0x5a2>
 8005dd8:	2380      	movs	r3, #128	; 0x80
 8005dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dde:	e1d4      	b.n	800618a <UART_SetConfig+0x5a2>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a51      	ldr	r2, [pc, #324]	; (8005f2c <UART_SetConfig+0x344>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d130      	bne.n	8005e4c <UART_SetConfig+0x264>
 8005dea:	4b4e      	ldr	r3, [pc, #312]	; (8005f24 <UART_SetConfig+0x33c>)
 8005dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b05      	cmp	r3, #5
 8005df4:	d826      	bhi.n	8005e44 <UART_SetConfig+0x25c>
 8005df6:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <UART_SetConfig+0x214>)
 8005df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfc:	08005e15 	.word	0x08005e15
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	08005e25 	.word	0x08005e25
 8005e08:	08005e2d 	.word	0x08005e2d
 8005e0c:	08005e35 	.word	0x08005e35
 8005e10:	08005e3d 	.word	0x08005e3d
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e1a:	e1b6      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e1c:	2304      	movs	r3, #4
 8005e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e22:	e1b2      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e24:	2308      	movs	r3, #8
 8005e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e2a:	e1ae      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e2c:	2310      	movs	r3, #16
 8005e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e32:	e1aa      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e34:	2320      	movs	r3, #32
 8005e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e3a:	e1a6      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e42:	e1a2      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e4a:	e19e      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a37      	ldr	r2, [pc, #220]	; (8005f30 <UART_SetConfig+0x348>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d130      	bne.n	8005eb8 <UART_SetConfig+0x2d0>
 8005e56:	4b33      	ldr	r3, [pc, #204]	; (8005f24 <UART_SetConfig+0x33c>)
 8005e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b05      	cmp	r3, #5
 8005e60:	d826      	bhi.n	8005eb0 <UART_SetConfig+0x2c8>
 8005e62:	a201      	add	r2, pc, #4	; (adr r2, 8005e68 <UART_SetConfig+0x280>)
 8005e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e68:	08005e81 	.word	0x08005e81
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005e91 	.word	0x08005e91
 8005e74:	08005e99 	.word	0x08005e99
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005ea9 	.word	0x08005ea9
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e180      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e88:	2304      	movs	r3, #4
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e17c      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e90:	2308      	movs	r3, #8
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e178      	b.n	800618a <UART_SetConfig+0x5a2>
 8005e98:	2310      	movs	r3, #16
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e174      	b.n	800618a <UART_SetConfig+0x5a2>
 8005ea0:	2320      	movs	r3, #32
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e170      	b.n	800618a <UART_SetConfig+0x5a2>
 8005ea8:	2340      	movs	r3, #64	; 0x40
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e16c      	b.n	800618a <UART_SetConfig+0x5a2>
 8005eb0:	2380      	movs	r3, #128	; 0x80
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e168      	b.n	800618a <UART_SetConfig+0x5a2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <UART_SetConfig+0x34c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d142      	bne.n	8005f48 <UART_SetConfig+0x360>
 8005ec2:	4b18      	ldr	r3, [pc, #96]	; (8005f24 <UART_SetConfig+0x33c>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f003 0307 	and.w	r3, r3, #7
 8005eca:	2b05      	cmp	r3, #5
 8005ecc:	d838      	bhi.n	8005f40 <UART_SetConfig+0x358>
 8005ece:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0x2ec>)
 8005ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed4:	08005eed 	.word	0x08005eed
 8005ed8:	08005ef5 	.word	0x08005ef5
 8005edc:	08005efd 	.word	0x08005efd
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f0d 	.word	0x08005f0d
 8005ee8:	08005f39 	.word	0x08005f39
 8005eec:	2300      	movs	r3, #0
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e14a      	b.n	800618a <UART_SetConfig+0x5a2>
 8005ef4:	2304      	movs	r3, #4
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e146      	b.n	800618a <UART_SetConfig+0x5a2>
 8005efc:	2308      	movs	r3, #8
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e142      	b.n	800618a <UART_SetConfig+0x5a2>
 8005f04:	2310      	movs	r3, #16
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e13e      	b.n	800618a <UART_SetConfig+0x5a2>
 8005f0c:	2320      	movs	r3, #32
 8005f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f12:	e13a      	b.n	800618a <UART_SetConfig+0x5a2>
 8005f14:	cfff69f3 	.word	0xcfff69f3
 8005f18:	58000c00 	.word	0x58000c00
 8005f1c:	11fff4ff 	.word	0x11fff4ff
 8005f20:	40011000 	.word	0x40011000
 8005f24:	58024400 	.word	0x58024400
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004800 	.word	0x40004800
 8005f30:	40004c00 	.word	0x40004c00
 8005f34:	40005000 	.word	0x40005000
 8005f38:	2340      	movs	r3, #64	; 0x40
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3e:	e124      	b.n	800618a <UART_SetConfig+0x5a2>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f46:	e120      	b.n	800618a <UART_SetConfig+0x5a2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4acc      	ldr	r2, [pc, #816]	; (8006280 <UART_SetConfig+0x698>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d176      	bne.n	8006040 <UART_SetConfig+0x458>
 8005f52:	4bcc      	ldr	r3, [pc, #816]	; (8006284 <UART_SetConfig+0x69c>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f5a:	2b28      	cmp	r3, #40	; 0x28
 8005f5c:	d86c      	bhi.n	8006038 <UART_SetConfig+0x450>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x37c>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08006009 	.word	0x08006009
 8005f68:	08006039 	.word	0x08006039
 8005f6c:	08006039 	.word	0x08006039
 8005f70:	08006039 	.word	0x08006039
 8005f74:	08006039 	.word	0x08006039
 8005f78:	08006039 	.word	0x08006039
 8005f7c:	08006039 	.word	0x08006039
 8005f80:	08006039 	.word	0x08006039
 8005f84:	08006011 	.word	0x08006011
 8005f88:	08006039 	.word	0x08006039
 8005f8c:	08006039 	.word	0x08006039
 8005f90:	08006039 	.word	0x08006039
 8005f94:	08006039 	.word	0x08006039
 8005f98:	08006039 	.word	0x08006039
 8005f9c:	08006039 	.word	0x08006039
 8005fa0:	08006039 	.word	0x08006039
 8005fa4:	08006019 	.word	0x08006019
 8005fa8:	08006039 	.word	0x08006039
 8005fac:	08006039 	.word	0x08006039
 8005fb0:	08006039 	.word	0x08006039
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	08006039 	.word	0x08006039
 8005fbc:	08006039 	.word	0x08006039
 8005fc0:	08006039 	.word	0x08006039
 8005fc4:	08006021 	.word	0x08006021
 8005fc8:	08006039 	.word	0x08006039
 8005fcc:	08006039 	.word	0x08006039
 8005fd0:	08006039 	.word	0x08006039
 8005fd4:	08006039 	.word	0x08006039
 8005fd8:	08006039 	.word	0x08006039
 8005fdc:	08006039 	.word	0x08006039
 8005fe0:	08006039 	.word	0x08006039
 8005fe4:	08006029 	.word	0x08006029
 8005fe8:	08006039 	.word	0x08006039
 8005fec:	08006039 	.word	0x08006039
 8005ff0:	08006039 	.word	0x08006039
 8005ff4:	08006039 	.word	0x08006039
 8005ff8:	08006039 	.word	0x08006039
 8005ffc:	08006039 	.word	0x08006039
 8006000:	08006039 	.word	0x08006039
 8006004:	08006031 	.word	0x08006031
 8006008:	2301      	movs	r3, #1
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600e:	e0bc      	b.n	800618a <UART_SetConfig+0x5a2>
 8006010:	2304      	movs	r3, #4
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006016:	e0b8      	b.n	800618a <UART_SetConfig+0x5a2>
 8006018:	2308      	movs	r3, #8
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e0b4      	b.n	800618a <UART_SetConfig+0x5a2>
 8006020:	2310      	movs	r3, #16
 8006022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006026:	e0b0      	b.n	800618a <UART_SetConfig+0x5a2>
 8006028:	2320      	movs	r3, #32
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e0ac      	b.n	800618a <UART_SetConfig+0x5a2>
 8006030:	2340      	movs	r3, #64	; 0x40
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e0a8      	b.n	800618a <UART_SetConfig+0x5a2>
 8006038:	2380      	movs	r3, #128	; 0x80
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e0a4      	b.n	800618a <UART_SetConfig+0x5a2>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a90      	ldr	r2, [pc, #576]	; (8006288 <UART_SetConfig+0x6a0>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d130      	bne.n	80060ac <UART_SetConfig+0x4c4>
 800604a:	4b8e      	ldr	r3, [pc, #568]	; (8006284 <UART_SetConfig+0x69c>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	f003 0307 	and.w	r3, r3, #7
 8006052:	2b05      	cmp	r3, #5
 8006054:	d826      	bhi.n	80060a4 <UART_SetConfig+0x4bc>
 8006056:	a201      	add	r2, pc, #4	; (adr r2, 800605c <UART_SetConfig+0x474>)
 8006058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605c:	08006075 	.word	0x08006075
 8006060:	0800607d 	.word	0x0800607d
 8006064:	08006085 	.word	0x08006085
 8006068:	0800608d 	.word	0x0800608d
 800606c:	08006095 	.word	0x08006095
 8006070:	0800609d 	.word	0x0800609d
 8006074:	2300      	movs	r3, #0
 8006076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800607a:	e086      	b.n	800618a <UART_SetConfig+0x5a2>
 800607c:	2304      	movs	r3, #4
 800607e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006082:	e082      	b.n	800618a <UART_SetConfig+0x5a2>
 8006084:	2308      	movs	r3, #8
 8006086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800608a:	e07e      	b.n	800618a <UART_SetConfig+0x5a2>
 800608c:	2310      	movs	r3, #16
 800608e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006092:	e07a      	b.n	800618a <UART_SetConfig+0x5a2>
 8006094:	2320      	movs	r3, #32
 8006096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800609a:	e076      	b.n	800618a <UART_SetConfig+0x5a2>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a2:	e072      	b.n	800618a <UART_SetConfig+0x5a2>
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060aa:	e06e      	b.n	800618a <UART_SetConfig+0x5a2>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a76      	ldr	r2, [pc, #472]	; (800628c <UART_SetConfig+0x6a4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d130      	bne.n	8006118 <UART_SetConfig+0x530>
 80060b6:	4b73      	ldr	r3, [pc, #460]	; (8006284 <UART_SetConfig+0x69c>)
 80060b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ba:	f003 0307 	and.w	r3, r3, #7
 80060be:	2b05      	cmp	r3, #5
 80060c0:	d826      	bhi.n	8006110 <UART_SetConfig+0x528>
 80060c2:	a201      	add	r2, pc, #4	; (adr r2, 80060c8 <UART_SetConfig+0x4e0>)
 80060c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c8:	080060e1 	.word	0x080060e1
 80060cc:	080060e9 	.word	0x080060e9
 80060d0:	080060f1 	.word	0x080060f1
 80060d4:	080060f9 	.word	0x080060f9
 80060d8:	08006101 	.word	0x08006101
 80060dc:	08006109 	.word	0x08006109
 80060e0:	2300      	movs	r3, #0
 80060e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060e6:	e050      	b.n	800618a <UART_SetConfig+0x5a2>
 80060e8:	2304      	movs	r3, #4
 80060ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ee:	e04c      	b.n	800618a <UART_SetConfig+0x5a2>
 80060f0:	2308      	movs	r3, #8
 80060f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f6:	e048      	b.n	800618a <UART_SetConfig+0x5a2>
 80060f8:	2310      	movs	r3, #16
 80060fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fe:	e044      	b.n	800618a <UART_SetConfig+0x5a2>
 8006100:	2320      	movs	r3, #32
 8006102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006106:	e040      	b.n	800618a <UART_SetConfig+0x5a2>
 8006108:	2340      	movs	r3, #64	; 0x40
 800610a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800610e:	e03c      	b.n	800618a <UART_SetConfig+0x5a2>
 8006110:	2380      	movs	r3, #128	; 0x80
 8006112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006116:	e038      	b.n	800618a <UART_SetConfig+0x5a2>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a5c      	ldr	r2, [pc, #368]	; (8006290 <UART_SetConfig+0x6a8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d130      	bne.n	8006184 <UART_SetConfig+0x59c>
 8006122:	4b58      	ldr	r3, [pc, #352]	; (8006284 <UART_SetConfig+0x69c>)
 8006124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	2b05      	cmp	r3, #5
 800612c:	d826      	bhi.n	800617c <UART_SetConfig+0x594>
 800612e:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <UART_SetConfig+0x54c>)
 8006130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006134:	0800614d 	.word	0x0800614d
 8006138:	08006155 	.word	0x08006155
 800613c:	0800615d 	.word	0x0800615d
 8006140:	08006165 	.word	0x08006165
 8006144:	0800616d 	.word	0x0800616d
 8006148:	08006175 	.word	0x08006175
 800614c:	2302      	movs	r3, #2
 800614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006152:	e01a      	b.n	800618a <UART_SetConfig+0x5a2>
 8006154:	2304      	movs	r3, #4
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615a:	e016      	b.n	800618a <UART_SetConfig+0x5a2>
 800615c:	2308      	movs	r3, #8
 800615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006162:	e012      	b.n	800618a <UART_SetConfig+0x5a2>
 8006164:	2310      	movs	r3, #16
 8006166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616a:	e00e      	b.n	800618a <UART_SetConfig+0x5a2>
 800616c:	2320      	movs	r3, #32
 800616e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006172:	e00a      	b.n	800618a <UART_SetConfig+0x5a2>
 8006174:	2340      	movs	r3, #64	; 0x40
 8006176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800617a:	e006      	b.n	800618a <UART_SetConfig+0x5a2>
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006182:	e002      	b.n	800618a <UART_SetConfig+0x5a2>
 8006184:	2380      	movs	r3, #128	; 0x80
 8006186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a40      	ldr	r2, [pc, #256]	; (8006290 <UART_SetConfig+0x6a8>)
 8006190:	4293      	cmp	r3, r2
 8006192:	f040 80ef 	bne.w	8006374 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006196:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800619a:	2b20      	cmp	r3, #32
 800619c:	dc46      	bgt.n	800622c <UART_SetConfig+0x644>
 800619e:	2b02      	cmp	r3, #2
 80061a0:	f2c0 8081 	blt.w	80062a6 <UART_SetConfig+0x6be>
 80061a4:	3b02      	subs	r3, #2
 80061a6:	2b1e      	cmp	r3, #30
 80061a8:	d87d      	bhi.n	80062a6 <UART_SetConfig+0x6be>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0x5c8>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	08006233 	.word	0x08006233
 80061b4:	080062a7 	.word	0x080062a7
 80061b8:	0800623b 	.word	0x0800623b
 80061bc:	080062a7 	.word	0x080062a7
 80061c0:	080062a7 	.word	0x080062a7
 80061c4:	080062a7 	.word	0x080062a7
 80061c8:	0800624b 	.word	0x0800624b
 80061cc:	080062a7 	.word	0x080062a7
 80061d0:	080062a7 	.word	0x080062a7
 80061d4:	080062a7 	.word	0x080062a7
 80061d8:	080062a7 	.word	0x080062a7
 80061dc:	080062a7 	.word	0x080062a7
 80061e0:	080062a7 	.word	0x080062a7
 80061e4:	080062a7 	.word	0x080062a7
 80061e8:	0800625b 	.word	0x0800625b
 80061ec:	080062a7 	.word	0x080062a7
 80061f0:	080062a7 	.word	0x080062a7
 80061f4:	080062a7 	.word	0x080062a7
 80061f8:	080062a7 	.word	0x080062a7
 80061fc:	080062a7 	.word	0x080062a7
 8006200:	080062a7 	.word	0x080062a7
 8006204:	080062a7 	.word	0x080062a7
 8006208:	080062a7 	.word	0x080062a7
 800620c:	080062a7 	.word	0x080062a7
 8006210:	080062a7 	.word	0x080062a7
 8006214:	080062a7 	.word	0x080062a7
 8006218:	080062a7 	.word	0x080062a7
 800621c:	080062a7 	.word	0x080062a7
 8006220:	080062a7 	.word	0x080062a7
 8006224:	080062a7 	.word	0x080062a7
 8006228:	08006299 	.word	0x08006299
 800622c:	2b40      	cmp	r3, #64	; 0x40
 800622e:	d036      	beq.n	800629e <UART_SetConfig+0x6b6>
 8006230:	e039      	b.n	80062a6 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006232:	f7fd fe2d 	bl	8003e90 <HAL_RCCEx_GetD3PCLK1Freq>
 8006236:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006238:	e03b      	b.n	80062b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800623a:	f107 0314 	add.w	r3, r7, #20
 800623e:	4618      	mov	r0, r3
 8006240:	f7fd fe3c 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006248:	e033      	b.n	80062b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	4618      	mov	r0, r3
 8006250:	f7fd ff88 	bl	8004164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006258:	e02b      	b.n	80062b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <UART_SetConfig+0x69c>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0320 	and.w	r3, r3, #32
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <UART_SetConfig+0x69c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	08db      	lsrs	r3, r3, #3
 800626c:	f003 0303 	and.w	r3, r3, #3
 8006270:	4a08      	ldr	r2, [pc, #32]	; (8006294 <UART_SetConfig+0x6ac>)
 8006272:	fa22 f303 	lsr.w	r3, r2, r3
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006278:	e01b      	b.n	80062b2 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <UART_SetConfig+0x6ac>)
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800627e:	e018      	b.n	80062b2 <UART_SetConfig+0x6ca>
 8006280:	40011400 	.word	0x40011400
 8006284:	58024400 	.word	0x58024400
 8006288:	40007800 	.word	0x40007800
 800628c:	40007c00 	.word	0x40007c00
 8006290:	58000c00 	.word	0x58000c00
 8006294:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006298:	4bc4      	ldr	r3, [pc, #784]	; (80065ac <UART_SetConfig+0x9c4>)
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80062b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f000 81da 	beq.w	800666e <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	4abc      	ldr	r2, [pc, #752]	; (80065b0 <UART_SetConfig+0x9c8>)
 80062c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c4:	461a      	mov	r2, r3
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062cc:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	4613      	mov	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4413      	add	r3, r2
 80062d8:	6a3a      	ldr	r2, [r7, #32]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d305      	bcc.n	80062ea <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062e4:	6a3a      	ldr	r2, [r7, #32]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d903      	bls.n	80062f2 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80062f0:	e1bd      	b.n	800666e <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	4618      	mov	r0, r3
 80062f6:	f04f 0100 	mov.w	r1, #0
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	4aac      	ldr	r2, [pc, #688]	; (80065b0 <UART_SetConfig+0x9c8>)
 8006300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006304:	b29a      	uxth	r2, r3
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	f7f9 ffe5 	bl	80002d8 <__aeabi_uldivmod>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	f04f 0200 	mov.w	r2, #0
 800631a:	f04f 0300 	mov.w	r3, #0
 800631e:	020b      	lsls	r3, r1, #8
 8006320:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006324:	0202      	lsls	r2, r0, #8
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	6849      	ldr	r1, [r1, #4]
 800632a:	0849      	lsrs	r1, r1, #1
 800632c:	4608      	mov	r0, r1
 800632e:	f04f 0100 	mov.w	r1, #0
 8006332:	1814      	adds	r4, r2, r0
 8006334:	eb43 0501 	adc.w	r5, r3, r1
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	461a      	mov	r2, r3
 800633e:	f04f 0300 	mov.w	r3, #0
 8006342:	4620      	mov	r0, r4
 8006344:	4629      	mov	r1, r5
 8006346:	f7f9 ffc7 	bl	80002d8 <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4613      	mov	r3, r2
 8006350:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006358:	d308      	bcc.n	800636c <UART_SetConfig+0x784>
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006360:	d204      	bcs.n	800636c <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	60da      	str	r2, [r3, #12]
 800636a:	e180      	b.n	800666e <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006372:	e17c      	b.n	800666e <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637c:	f040 80bf 	bne.w	80064fe <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006380:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006384:	2b20      	cmp	r3, #32
 8006386:	dc49      	bgt.n	800641c <UART_SetConfig+0x834>
 8006388:	2b00      	cmp	r3, #0
 800638a:	db7c      	blt.n	8006486 <UART_SetConfig+0x89e>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d87a      	bhi.n	8006486 <UART_SetConfig+0x89e>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x7b0>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	08006423 	.word	0x08006423
 800639c:	0800642b 	.word	0x0800642b
 80063a0:	08006487 	.word	0x08006487
 80063a4:	08006487 	.word	0x08006487
 80063a8:	08006433 	.word	0x08006433
 80063ac:	08006487 	.word	0x08006487
 80063b0:	08006487 	.word	0x08006487
 80063b4:	08006487 	.word	0x08006487
 80063b8:	08006443 	.word	0x08006443
 80063bc:	08006487 	.word	0x08006487
 80063c0:	08006487 	.word	0x08006487
 80063c4:	08006487 	.word	0x08006487
 80063c8:	08006487 	.word	0x08006487
 80063cc:	08006487 	.word	0x08006487
 80063d0:	08006487 	.word	0x08006487
 80063d4:	08006487 	.word	0x08006487
 80063d8:	08006453 	.word	0x08006453
 80063dc:	08006487 	.word	0x08006487
 80063e0:	08006487 	.word	0x08006487
 80063e4:	08006487 	.word	0x08006487
 80063e8:	08006487 	.word	0x08006487
 80063ec:	08006487 	.word	0x08006487
 80063f0:	08006487 	.word	0x08006487
 80063f4:	08006487 	.word	0x08006487
 80063f8:	08006487 	.word	0x08006487
 80063fc:	08006487 	.word	0x08006487
 8006400:	08006487 	.word	0x08006487
 8006404:	08006487 	.word	0x08006487
 8006408:	08006487 	.word	0x08006487
 800640c:	08006487 	.word	0x08006487
 8006410:	08006487 	.word	0x08006487
 8006414:	08006487 	.word	0x08006487
 8006418:	08006479 	.word	0x08006479
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d02e      	beq.n	800647e <UART_SetConfig+0x896>
 8006420:	e031      	b.n	8006486 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006422:	f7fc fdc9 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 8006426:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006428:	e033      	b.n	8006492 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642a:	f7fc fddb 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 800642e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006430:	e02f      	b.n	8006492 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006432:	f107 0314 	add.w	r3, r7, #20
 8006436:	4618      	mov	r0, r3
 8006438:	f7fd fd40 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800643c:	69bb      	ldr	r3, [r7, #24]
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006440:	e027      	b.n	8006492 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006442:	f107 0308 	add.w	r3, r7, #8
 8006446:	4618      	mov	r0, r3
 8006448:	f7fd fe8c 	bl	8004164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006450:	e01f      	b.n	8006492 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006452:	4b58      	ldr	r3, [pc, #352]	; (80065b4 <UART_SetConfig+0x9cc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800645e:	4b55      	ldr	r3, [pc, #340]	; (80065b4 <UART_SetConfig+0x9cc>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	4a53      	ldr	r2, [pc, #332]	; (80065b8 <UART_SetConfig+0x9d0>)
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006470:	e00f      	b.n	8006492 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006472:	4b51      	ldr	r3, [pc, #324]	; (80065b8 <UART_SetConfig+0x9d0>)
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006476:	e00c      	b.n	8006492 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006478:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <UART_SetConfig+0x9c4>)
 800647a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 80ea 	beq.w	800666e <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649e:	4a44      	ldr	r2, [pc, #272]	; (80065b0 <UART_SetConfig+0x9c8>)
 80064a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a4:	461a      	mov	r2, r3
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80064ac:	005a      	lsls	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	085b      	lsrs	r3, r3, #1
 80064b4:	441a      	add	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80064be:	b29b      	uxth	r3, r3
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c4:	2b0f      	cmp	r3, #15
 80064c6:	d916      	bls.n	80064f6 <UART_SetConfig+0x90e>
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ce:	d212      	bcs.n	80064f6 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f023 030f 	bic.w	r3, r3, #15
 80064d8:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	085b      	lsrs	r3, r3, #1
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064e8:	4313      	orrs	r3, r2
 80064ea:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80064f2:	60da      	str	r2, [r3, #12]
 80064f4:	e0bb      	b.n	800666e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80064fc:	e0b7      	b.n	800666e <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006502:	2b20      	cmp	r3, #32
 8006504:	dc4a      	bgt.n	800659c <UART_SetConfig+0x9b4>
 8006506:	2b00      	cmp	r3, #0
 8006508:	f2c0 8086 	blt.w	8006618 <UART_SetConfig+0xa30>
 800650c:	2b20      	cmp	r3, #32
 800650e:	f200 8083 	bhi.w	8006618 <UART_SetConfig+0xa30>
 8006512:	a201      	add	r2, pc, #4	; (adr r2, 8006518 <UART_SetConfig+0x930>)
 8006514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006518:	080065a3 	.word	0x080065a3
 800651c:	080065bd 	.word	0x080065bd
 8006520:	08006619 	.word	0x08006619
 8006524:	08006619 	.word	0x08006619
 8006528:	080065c5 	.word	0x080065c5
 800652c:	08006619 	.word	0x08006619
 8006530:	08006619 	.word	0x08006619
 8006534:	08006619 	.word	0x08006619
 8006538:	080065d5 	.word	0x080065d5
 800653c:	08006619 	.word	0x08006619
 8006540:	08006619 	.word	0x08006619
 8006544:	08006619 	.word	0x08006619
 8006548:	08006619 	.word	0x08006619
 800654c:	08006619 	.word	0x08006619
 8006550:	08006619 	.word	0x08006619
 8006554:	08006619 	.word	0x08006619
 8006558:	080065e5 	.word	0x080065e5
 800655c:	08006619 	.word	0x08006619
 8006560:	08006619 	.word	0x08006619
 8006564:	08006619 	.word	0x08006619
 8006568:	08006619 	.word	0x08006619
 800656c:	08006619 	.word	0x08006619
 8006570:	08006619 	.word	0x08006619
 8006574:	08006619 	.word	0x08006619
 8006578:	08006619 	.word	0x08006619
 800657c:	08006619 	.word	0x08006619
 8006580:	08006619 	.word	0x08006619
 8006584:	08006619 	.word	0x08006619
 8006588:	08006619 	.word	0x08006619
 800658c:	08006619 	.word	0x08006619
 8006590:	08006619 	.word	0x08006619
 8006594:	08006619 	.word	0x08006619
 8006598:	0800660b 	.word	0x0800660b
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	d037      	beq.n	8006610 <UART_SetConfig+0xa28>
 80065a0:	e03a      	b.n	8006618 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a2:	f7fc fd09 	bl	8002fb8 <HAL_RCC_GetPCLK1Freq>
 80065a6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065a8:	e03c      	b.n	8006624 <UART_SetConfig+0xa3c>
 80065aa:	bf00      	nop
 80065ac:	003d0900 	.word	0x003d0900
 80065b0:	08006d0c 	.word	0x08006d0c
 80065b4:	58024400 	.word	0x58024400
 80065b8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065bc:	f7fc fd12 	bl	8002fe4 <HAL_RCC_GetPCLK2Freq>
 80065c0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065c2:	e02f      	b.n	8006624 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065c4:	f107 0314 	add.w	r3, r7, #20
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7fd fc77 	bl	8003ebc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065d2:	e027      	b.n	8006624 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fd fdc3 	bl	8004164 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065e2:	e01f      	b.n	8006624 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065e4:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <UART_SetConfig+0xab0>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0320 	and.w	r3, r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d009      	beq.n	8006604 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065f0:	4b29      	ldr	r3, [pc, #164]	; (8006698 <UART_SetConfig+0xab0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	08db      	lsrs	r3, r3, #3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	4a28      	ldr	r2, [pc, #160]	; (800669c <UART_SetConfig+0xab4>)
 80065fc:	fa22 f303 	lsr.w	r3, r2, r3
 8006600:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006602:	e00f      	b.n	8006624 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <UART_SetConfig+0xab4>)
 8006606:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006608:	e00c      	b.n	8006624 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800660a:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <UART_SetConfig+0xab8>)
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800660e:	e009      	b.n	8006624 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006610:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006616:	e005      	b.n	8006624 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006618:	2300      	movs	r3, #0
 800661a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800661c:	2301      	movs	r3, #1
 800661e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006622:	bf00      	nop
    }

    if (pclk != 0U)
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d021      	beq.n	800666e <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662e:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <UART_SetConfig+0xabc>)
 8006630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006634:	461a      	mov	r2, r3
 8006636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006638:	fbb3 f2f2 	udiv	r2, r3, r2
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	085b      	lsrs	r3, r3, #1
 8006642:	441a      	add	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	fbb2 f3f3 	udiv	r3, r2, r3
 800664c:	b29b      	uxth	r3, r3
 800664e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006652:	2b0f      	cmp	r3, #15
 8006654:	d908      	bls.n	8006668 <UART_SetConfig+0xa80>
 8006656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800665c:	d204      	bcs.n	8006668 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	e002      	b.n	800666e <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2201      	movs	r2, #1
 8006672:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800668a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800668e:	4618      	mov	r0, r3
 8006690:	3738      	adds	r7, #56	; 0x38
 8006692:	46bd      	mov	sp, r7
 8006694:	bdb0      	pop	{r4, r5, r7, pc}
 8006696:	bf00      	nop
 8006698:	58024400 	.word	0x58024400
 800669c:	03d09000 	.word	0x03d09000
 80066a0:	003d0900 	.word	0x003d0900
 80066a4:	08006d0c 	.word	0x08006d0c

080066a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d6:	f003 0302 	and.w	r3, r3, #2
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d00a      	beq.n	8006716 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	f003 0308 	and.w	r3, r3, #8
 800671e:	2b00      	cmp	r3, #0
 8006720:	d00a      	beq.n	8006738 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	430a      	orrs	r2, r1
 8006736:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800673c:	f003 0310 	and.w	r3, r3, #16
 8006740:	2b00      	cmp	r3, #0
 8006742:	d00a      	beq.n	800675a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	f003 0320 	and.w	r3, r3, #32
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006784:	2b00      	cmp	r3, #0
 8006786:	d01a      	beq.n	80067be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	430a      	orrs	r2, r1
 800679c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067a6:	d10a      	bne.n	80067be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	605a      	str	r2, [r3, #4]
  }
}
 80067e0:	bf00      	nop
 80067e2:	370c      	adds	r7, #12
 80067e4:	46bd      	mov	sp, r7
 80067e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ea:	4770      	bx	lr

080067ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067fc:	f7fa fba2 	bl	8000f44 <HAL_GetTick>
 8006800:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0308 	and.w	r3, r3, #8
 800680c:	2b08      	cmp	r3, #8
 800680e:	d10e      	bne.n	800682e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006814:	9300      	str	r3, [sp, #0]
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f82f 	bl	8006882 <UART_WaitOnFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e025      	b.n	800687a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0304 	and.w	r3, r3, #4
 8006838:	2b04      	cmp	r3, #4
 800683a:	d10e      	bne.n	800685a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800683c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f819 	bl	8006882 <UART_WaitOnFlagUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e00f      	b.n	800687a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2220      	movs	r2, #32
 800685e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b084      	sub	sp, #16
 8006886:	af00      	add	r7, sp, #0
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006892:	e062      	b.n	800695a <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d05e      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689c:	f7fa fb52 	bl	8000f44 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d302      	bcc.n	80068b2 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d11d      	bne.n	80068ee <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068c0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	689a      	ldr	r2, [r3, #8]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f022 0201 	bic.w	r2, r2, #1
 80068d0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80068ea:	2303      	movs	r3, #3
 80068ec:	e045      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d02e      	beq.n	800695a <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006906:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800690a:	d126      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006914:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006924:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0201 	bic.w	r2, r2, #1
 8006934:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2220      	movs	r2, #32
 800694a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e00f      	b.n	800697a <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	69da      	ldr	r2, [r3, #28]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4013      	ands	r3, r2
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	bf0c      	ite	eq
 800696a:	2301      	moveq	r3, #1
 800696c:	2300      	movne	r3, #0
 800696e:	b2db      	uxtb	r3, r3
 8006970:	461a      	mov	r2, r3
 8006972:	79fb      	ldrb	r3, [r7, #7]
 8006974:	429a      	cmp	r2, r3
 8006976:	d08d      	beq.n	8006894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800699a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6899      	ldr	r1, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <UART_EndRxTransfer+0x60>)
 80069a8:	400b      	ands	r3, r1
 80069aa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d107      	bne.n	80069c4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f022 0210 	bic.w	r2, r2, #16
 80069c2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	effffffe 	.word	0xeffffffe

080069e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7ff f8d8 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b082      	sub	sp, #8
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f7ff f8b4 	bl	8005ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b083      	sub	sp, #12
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b083      	sub	sp, #12
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_UARTEx_DisableFifoMode+0x16>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e027      	b.n	8006aea <HAL_UARTEx_DisableFifoMode+0x66>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2224      	movs	r2, #36	; 0x24
 8006aa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f022 0201 	bic.w	r2, r2, #1
 8006ac0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ac8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2220      	movs	r2, #32
 8006adc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b084      	sub	sp, #16
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e02d      	b.n	8006b6a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f022 0201 	bic.w	r2, r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	683a      	ldr	r2, [r7, #0]
 8006b46:	430a      	orrs	r2, r1
 8006b48:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f850 	bl	8006bf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e02d      	b.n	8006be6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2224      	movs	r2, #36	; 0x24
 8006b96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f022 0201 	bic.w	r2, r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	683a      	ldr	r2, [r7, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 f812 	bl	8006bf0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d108      	bne.n	8006c12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c10:	e031      	b.n	8006c76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c12:	2310      	movs	r3, #16
 8006c14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c16:	2310      	movs	r3, #16
 8006c18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	0e5b      	lsrs	r3, r3, #25
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	f003 0307 	and.w	r3, r3, #7
 8006c28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	0f5b      	lsrs	r3, r3, #29
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0307 	and.w	r3, r3, #7
 8006c38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	7b3a      	ldrb	r2, [r7, #12]
 8006c3e:	4911      	ldr	r1, [pc, #68]	; (8006c84 <UARTEx_SetNbDataToProcess+0x94>)
 8006c40:	5c8a      	ldrb	r2, [r1, r2]
 8006c42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c46:	7b3a      	ldrb	r2, [r7, #12]
 8006c48:	490f      	ldr	r1, [pc, #60]	; (8006c88 <UARTEx_SetNbDataToProcess+0x98>)
 8006c4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c4c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c50:	b29a      	uxth	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	7b7a      	ldrb	r2, [r7, #13]
 8006c5c:	4909      	ldr	r1, [pc, #36]	; (8006c84 <UARTEx_SetNbDataToProcess+0x94>)
 8006c5e:	5c8a      	ldrb	r2, [r1, r2]
 8006c60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c64:	7b7a      	ldrb	r2, [r7, #13]
 8006c66:	4908      	ldr	r1, [pc, #32]	; (8006c88 <UARTEx_SetNbDataToProcess+0x98>)
 8006c68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c6e:	b29a      	uxth	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	08006d24 	.word	0x08006d24
 8006c88:	08006d2c 	.word	0x08006d2c

08006c8c <__libc_init_array>:
 8006c8c:	b570      	push	{r4, r5, r6, lr}
 8006c8e:	4d0d      	ldr	r5, [pc, #52]	; (8006cc4 <__libc_init_array+0x38>)
 8006c90:	4c0d      	ldr	r4, [pc, #52]	; (8006cc8 <__libc_init_array+0x3c>)
 8006c92:	1b64      	subs	r4, r4, r5
 8006c94:	10a4      	asrs	r4, r4, #2
 8006c96:	2600      	movs	r6, #0
 8006c98:	42a6      	cmp	r6, r4
 8006c9a:	d109      	bne.n	8006cb0 <__libc_init_array+0x24>
 8006c9c:	4d0b      	ldr	r5, [pc, #44]	; (8006ccc <__libc_init_array+0x40>)
 8006c9e:	4c0c      	ldr	r4, [pc, #48]	; (8006cd0 <__libc_init_array+0x44>)
 8006ca0:	f000 f820 	bl	8006ce4 <_init>
 8006ca4:	1b64      	subs	r4, r4, r5
 8006ca6:	10a4      	asrs	r4, r4, #2
 8006ca8:	2600      	movs	r6, #0
 8006caa:	42a6      	cmp	r6, r4
 8006cac:	d105      	bne.n	8006cba <__libc_init_array+0x2e>
 8006cae:	bd70      	pop	{r4, r5, r6, pc}
 8006cb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb4:	4798      	blx	r3
 8006cb6:	3601      	adds	r6, #1
 8006cb8:	e7ee      	b.n	8006c98 <__libc_init_array+0xc>
 8006cba:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cbe:	4798      	blx	r3
 8006cc0:	3601      	adds	r6, #1
 8006cc2:	e7f2      	b.n	8006caa <__libc_init_array+0x1e>
 8006cc4:	08006d3c 	.word	0x08006d3c
 8006cc8:	08006d3c 	.word	0x08006d3c
 8006ccc:	08006d3c 	.word	0x08006d3c
 8006cd0:	08006d40 	.word	0x08006d40

08006cd4 <memset>:
 8006cd4:	4402      	add	r2, r0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d100      	bne.n	8006cde <memset+0xa>
 8006cdc:	4770      	bx	lr
 8006cde:	f803 1b01 	strb.w	r1, [r3], #1
 8006ce2:	e7f9      	b.n	8006cd8 <memset+0x4>

08006ce4 <_init>:
 8006ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ce6:	bf00      	nop
 8006ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cea:	bc08      	pop	{r3}
 8006cec:	469e      	mov	lr, r3
 8006cee:	4770      	bx	lr

08006cf0 <_fini>:
 8006cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cf2:	bf00      	nop
 8006cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf6:	bc08      	pop	{r3}
 8006cf8:	469e      	mov	lr, r3
 8006cfa:	4770      	bx	lr
