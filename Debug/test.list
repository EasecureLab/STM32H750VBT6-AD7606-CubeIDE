
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b90  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006e6c  08006e6c  00016e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  08006e7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000138  20000010  08006e8c  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000148  08006e8c  00020148  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00018e22  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000028f0  00000000  00000000  00038e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c78  00000000  00000000  0003b750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000bc0  00000000  00000000  0003c3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000360f7  00000000  00000000  0003cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010914  00000000  00000000  0007307f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159e04  00000000  00000000  00083993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001dd797  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003398  00000000  00000000  001dd7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006e10 	.word	0x08006e10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08006e10 	.word	0x08006e10

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <AD7606_StartConvst>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void AD7606_StartConvst(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CO_A_GPIO_Port, CO_A_Pin, GPIO_PIN_RESET); //	CO_A_L;
 80005d4:	2200      	movs	r2, #0
 80005d6:	2120      	movs	r1, #32
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <AD7606_StartConvst+0x3c>)
 80005da:	f001 fdbf 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CO_B_GPIO_Port, CO_B_Pin, GPIO_PIN_RESET); //	CO_B_L;
 80005de:	2200      	movs	r2, #0
 80005e0:	2140      	movs	r1, #64	; 0x40
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <AD7606_StartConvst+0x3c>)
 80005e4:	f001 fdba 	bl	800215c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005e8:	2001      	movs	r0, #1
 80005ea:	f000 fd4d 	bl	8001088 <HAL_Delay>
	HAL_GPIO_WritePin(CO_A_GPIO_Port, CO_A_Pin, GPIO_PIN_SET); //	CO_A_H;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4806      	ldr	r0, [pc, #24]	; (800060c <AD7606_StartConvst+0x3c>)
 80005f4:	f001 fdb2 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CO_B_GPIO_Port, CO_B_Pin, GPIO_PIN_SET); //	CO_B_H;
 80005f8:	2201      	movs	r2, #1
 80005fa:	2140      	movs	r1, #64	; 0x40
 80005fc:	4803      	ldr	r0, [pc, #12]	; (800060c <AD7606_StartConvst+0x3c>)
 80005fe:	f001 fdad 	bl	800215c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fd40 	bl	8001088 <HAL_Delay>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	58020800 	.word	0x58020800

08000610 <AD7606_RESET>:

void AD7606_RESET(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(REST_GPIO_Port, REST_Pin, GPIO_PIN_RESET); //REST_L;
 8000614:	2200      	movs	r2, #0
 8000616:	2180      	movs	r1, #128	; 0x80
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <AD7606_RESET+0x34>)
 800061a:	f001 fd9f 	bl	800215c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800061e:	2001      	movs	r0, #1
 8000620:	f000 fd32 	bl	8001088 <HAL_Delay>
	HAL_GPIO_WritePin(REST_GPIO_Port, REST_Pin, GPIO_PIN_SET); //REST_L;//REST_H;
 8000624:	2201      	movs	r2, #1
 8000626:	2180      	movs	r1, #128	; 0x80
 8000628:	4806      	ldr	r0, [pc, #24]	; (8000644 <AD7606_RESET+0x34>)
 800062a:	f001 fd97 	bl	800215c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800062e:	2001      	movs	r0, #1
 8000630:	f000 fd2a 	bl	8001088 <HAL_Delay>
	HAL_GPIO_WritePin(REST_GPIO_Port, REST_Pin, GPIO_PIN_RESET); //REST_L;
 8000634:	2200      	movs	r2, #0
 8000636:	2180      	movs	r1, #128	; 0x80
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <AD7606_RESET+0x34>)
 800063a:	f001 fd8f 	bl	800215c <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	58020800 	.word	0x58020800

08000648 <AD7606_Init>:

void AD7606_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
//	MX_SPI2_Init();
//	GPIO_AD7606_Configuration();
	HAL_GPIO_WritePin(CO_A_GPIO_Port, CO_A_Pin, GPIO_PIN_SET); //	CO_A_H;
 800064c:	2201      	movs	r2, #1
 800064e:	2120      	movs	r1, #32
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <AD7606_Init+0x3c>)
 8000652:	f001 fd83 	bl	800215c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CO_B_GPIO_Port, CO_B_Pin, GPIO_PIN_SET); //	CO_B_H;
 8000656:	2201      	movs	r2, #1
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <AD7606_Init+0x3c>)
 800065c:	f001 fd7e 	bl	800215c <HAL_GPIO_WritePin>
//	delay_ms(1);
	HAL_Delay(1);
 8000660:	2001      	movs	r0, #1
 8000662:	f000 fd11 	bl	8001088 <HAL_Delay>
	HAL_GPIO_WritePin(SER_GPIO_Port, SER_Pin, GPIO_PIN_SET); //SER_H;
 8000666:	2201      	movs	r2, #1
 8000668:	2108      	movs	r1, #8
 800066a:	4806      	ldr	r0, [pc, #24]	; (8000684 <AD7606_Init+0x3c>)
 800066c:	f001 fd76 	bl	800215c <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, GPIO_PIN_SET); //STBY_H;

	AD7606_RESET();
 8000670:	f7ff ffce 	bl	8000610 <AD7606_RESET>
	HAL_Delay(1);
 8000674:	2001      	movs	r0, #1
 8000676:	f000 fd07 	bl	8001088 <HAL_Delay>
	AD7606_StartConvst();
 800067a:	f7ff ffa9 	bl	80005d0 <AD7606_StartConvst>
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	58020800 	.word	0x58020800

08000688 <AD7606_ReadData>:


void AD7606_ReadData(int * DB_data)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	HAL_SPI_Receive(&hspi2, (uint8_t *)DB_data, 8, 1000);
 8000690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000694:	2208      	movs	r2, #8
 8000696:	6879      	ldr	r1, [r7, #4]
 8000698:	4803      	ldr	r0, [pc, #12]	; (80006a8 <AD7606_ReadData+0x20>)
 800069a:	f004 f9b3 	bl	8004a04 <HAL_SPI_Receive>
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000002c 	.word	0x2000002c

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0de      	sub	sp, #376	; 0x178
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
 char UART_BUF[12] = "you press A!";
 80006b2:	4a2e      	ldr	r2, [pc, #184]	; (800076c <main+0xc0>)
 80006b4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80006b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 char dis_buf[40];
 int DB_data[80] = {0};
 80006be:	463b      	mov	r3, r7
 80006c0:	4618      	mov	r0, r3
 80006c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80006c6:	461a      	mov	r2, r3
 80006c8:	2100      	movs	r1, #0
 80006ca:	f006 fb99 	bl	8006e00 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 fc49 	bl	8000f64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f855 	bl	8000780 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006d6:	f000 f8d1 	bl	800087c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f98f 	bl	80009fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80006de:	f000 f8e9 	bl	80008b4 <MX_LPUART1_UART_Init>
  MX_SPI2_Init();
 80006e2:	f000 f933 	bl	800094c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  AD7606_Init();
 80006e6:	f7ff ffaf 	bl	8000648 <AD7606_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET); // �øߣ�������
 80006ea:	2201      	movs	r2, #1
 80006ec:	2110      	movs	r1, #16
 80006ee:	4820      	ldr	r0, [pc, #128]	; (8000770 <main+0xc4>)
 80006f0:	f001 fd34 	bl	800215c <HAL_GPIO_WritePin>
	  HAL_Delay(500); // ��ʱ 500ms
 80006f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f8:	f000 fcc6 	bl	8001088 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);// �õͣ�������
 80006fc:	2200      	movs	r2, #0
 80006fe:	2110      	movs	r1, #16
 8000700:	481b      	ldr	r0, [pc, #108]	; (8000770 <main+0xc4>)
 8000702:	f001 fd2b 	bl	800215c <HAL_GPIO_WritePin>
	  HAL_Delay(500); // ��ʱ 500ms
 8000706:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800070a:	f000 fcbd 	bl	8001088 <HAL_Delay>

//	  HAL_UART_Transmit(&hlpuart1,UART_BUF,12,0xffff);
	  AD7606_StartConvst();
 800070e:	f7ff ff5f 	bl	80005d0 <AD7606_StartConvst>
	  while((HAL_GPIO_ReadPin(GPIOA,BUSY_Pin) == GPIO_PIN_SET))	//
 8000712:	e002      	b.n	800071a <main+0x6e>
		  HAL_Delay(10);
 8000714:	200a      	movs	r0, #10
 8000716:	f000 fcb7 	bl	8001088 <HAL_Delay>
	  while((HAL_GPIO_ReadPin(GPIOA,BUSY_Pin) == GPIO_PIN_SET))	//
 800071a:	2101      	movs	r1, #1
 800071c:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0xc8>)
 800071e:	f001 fd05 	bl	800212c <HAL_GPIO_ReadPin>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d0f5      	beq.n	8000714 <main+0x68>
	  AD7606_ReadData(DB_data);
 8000728:	463b      	mov	r3, r7
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ffac 	bl	8000688 <AD7606_ReadData>
//	  }
//	  HAL_UART_Transmit(&hlpuart1,DB_data,16,0xffff);

//	  HAL_UART_Transmit(&hlpuart1,DB_data,16,0xffff);
//	  DB_data[i];
	  temp =(uint16_t)(DB_data[2]^0x8000);
 8000730:	463b      	mov	r3, r7
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	b21a      	sxth	r2, r3
 8000736:	4b10      	ldr	r3, [pc, #64]	; (8000778 <main+0xcc>)
 8000738:	4053      	eors	r3, r2
 800073a:	b21b      	sxth	r3, r3
 800073c:	b29b      	uxth	r3, r3
 800073e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
	  HAL_UART_Transmit(&hlpuart1,temp >> 8,1,0xffff); //& 0xff
 8000742:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000746:	121b      	asrs	r3, r3, #8
 8000748:	4619      	mov	r1, r3
 800074a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800074e:	2201      	movs	r2, #1
 8000750:	480a      	ldr	r0, [pc, #40]	; (800077c <main+0xd0>)
 8000752:	f004 ff6e 	bl	8005632 <HAL_UART_Transmit>
//	  HAL_Delay(100);
	  HAL_UART_Transmit(&hlpuart1,temp & 0xff,1,0xffff);
 8000756:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800075a:	b2db      	uxtb	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000762:	2201      	movs	r2, #1
 8000764:	4805      	ldr	r0, [pc, #20]	; (800077c <main+0xd0>)
 8000766:	f004 ff64 	bl	8005632 <HAL_UART_Transmit>
	  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET); // �øߣ�������
 800076a:	e7be      	b.n	80006ea <main+0x3e>
 800076c:	08006e28 	.word	0x08006e28
 8000770:	58021000 	.word	0x58021000
 8000774:	58020000 	.word	0x58020000
 8000778:	ffff8000 	.word	0xffff8000
 800077c:	200000b4 	.word	0x200000b4

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b09c      	sub	sp, #112	; 0x70
 8000784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800078a:	224c      	movs	r2, #76	; 0x4c
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f006 fb36 	bl	8006e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2220      	movs	r2, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f006 fb30 	bl	8006e00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007a0:	2002      	movs	r0, #2
 80007a2:	f001 fcf5 	bl	8002190 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007a6:	2300      	movs	r3, #0
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	4b32      	ldr	r3, [pc, #200]	; (8000874 <SystemClock_Config+0xf4>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	4a31      	ldr	r2, [pc, #196]	; (8000874 <SystemClock_Config+0xf4>)
 80007b0:	f023 0301 	bic.w	r3, r3, #1
 80007b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007b6:	4b2f      	ldr	r3, [pc, #188]	; (8000874 <SystemClock_Config+0xf4>)
 80007b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	4b2d      	ldr	r3, [pc, #180]	; (8000878 <SystemClock_Config+0xf8>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	4a2c      	ldr	r2, [pc, #176]	; (8000878 <SystemClock_Config+0xf8>)
 80007c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b2a      	ldr	r3, [pc, #168]	; (8000878 <SystemClock_Config+0xf8>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d8:	bf00      	nop
 80007da:	4b27      	ldr	r3, [pc, #156]	; (8000878 <SystemClock_Config+0xf8>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007e6:	d1f8      	bne.n	80007da <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007e8:	2303      	movs	r3, #3
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007f2:	2301      	movs	r3, #1
 80007f4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2340      	movs	r3, #64	; 0x40
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fe:	2302      	movs	r3, #2
 8000800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000802:	2305      	movs	r3, #5
 8000804:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000806:	23a0      	movs	r3, #160	; 0xa0
 8000808:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800080a:	2302      	movs	r3, #2
 800080c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000816:	2308      	movs	r3, #8
 8000818:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800081a:	2300      	movs	r3, #0
 800081c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800081e:	2300      	movs	r3, #0
 8000820:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	4618      	mov	r0, r3
 8000828:	f001 fcec 	bl	8002204 <HAL_RCC_OscConfig>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000832:	f000 f98f 	bl	8000b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	233f      	movs	r3, #63	; 0x3f
 8000838:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2303      	movs	r3, #3
 800083c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000842:	2308      	movs	r3, #8
 8000844:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000846:	2340      	movs	r3, #64	; 0x40
 8000848:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800084e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000852:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000854:	2340      	movs	r3, #64	; 0x40
 8000856:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000858:	1d3b      	adds	r3, r7, #4
 800085a:	2102      	movs	r1, #2
 800085c:	4618      	mov	r0, r3
 800085e:	f002 f8e1 	bl	8002a24 <HAL_RCC_ClockConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000868:	f000 f974 	bl	8000b54 <Error_Handler>
  }
}
 800086c:	bf00      	nop
 800086e:	3770      	adds	r7, #112	; 0x70
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b0b0      	sub	sp, #192	; 0xc0
 8000880:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	22bc      	movs	r2, #188	; 0xbc
 8000886:	2100      	movs	r1, #0
 8000888:	4618      	mov	r0, r3
 800088a:	f006 fab9 	bl	8006e00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800088e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000892:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000894:	2300      	movs	r3, #0
 8000896:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fc4e 	bl	800313c <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <PeriphCommonClock_Config+0x2e>
  {
    Error_Handler();
 80008a6:	f000 f955 	bl	8000b54 <Error_Handler>
  }
}
 80008aa:	bf00      	nop
 80008ac:	37c0      	adds	r7, #192	; 0xc0
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <MX_LPUART1_UART_Init+0x94>)
 80008bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008d8:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008da:	220c      	movs	r2, #12
 80008dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e4:	4b17      	ldr	r3, [pc, #92]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ea:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80008f6:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008fc:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 80008fe:	f004 fe48 	bl	8005592 <HAL_UART_Init>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000908:	f000 f924 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 8000910:	f006 f987 	bl	8006c22 <HAL_UARTEx_SetTxFifoThreshold>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 800091a:	f000 f91b 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800091e:	2100      	movs	r1, #0
 8000920:	4808      	ldr	r0, [pc, #32]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 8000922:	f006 f9bc 	bl	8006c9e <HAL_UARTEx_SetRxFifoThreshold>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 800092c:	f000 f912 	bl	8000b54 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_LPUART1_UART_Init+0x90>)
 8000932:	f006 f93d 	bl	8006bb0 <HAL_UARTEx_DisableFifoMode>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 800093c:	f000 f90a 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200000b4 	.word	0x200000b4
 8000948:	58000c00 	.word	0x58000c00

0800094c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000950:	4b28      	ldr	r3, [pc, #160]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000952:	4a29      	ldr	r2, [pc, #164]	; (80009f8 <MX_SPI2_Init+0xac>)
 8000954:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000956:	4b27      	ldr	r3, [pc, #156]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000958:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800095c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800095e:	4b25      	ldr	r3, [pc, #148]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000960:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000964:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000968:	220f      	movs	r2, #15
 800096a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096c:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_SPI2_Init+0xa8>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000972:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000978:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_SPI2_Init+0xa8>)
 800097a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800097e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000980:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000982:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000986:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_SPI2_Init+0xa8>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_SPI2_Init+0xa8>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_SPI2_Init+0xa8>)
 800099c:	2200      	movs	r2, #0
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009a6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009bc:	2200      	movs	r2, #0
 80009be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_SPI2_Init+0xa8>)
 80009e0:	f003 ff0e 	bl	8004800 <HAL_SPI_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80009ea:	f000 f8b3 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000002c 	.word	0x2000002c
 80009f8:	40003800 	.word	0x40003800

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a12:	4b4b      	ldr	r3, [pc, #300]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	4a49      	ldr	r2, [pc, #292]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a1a:	f043 0310 	orr.w	r3, r3, #16
 8000a1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a22:	4b47      	ldr	r3, [pc, #284]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	613b      	str	r3, [r7, #16]
 8000a2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a30:	4b43      	ldr	r3, [pc, #268]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	4a42      	ldr	r2, [pc, #264]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a40:	4b3f      	ldr	r3, [pc, #252]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4e:	4b3c      	ldr	r3, [pc, #240]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	4a3a      	ldr	r2, [pc, #232]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a56:	f043 0304 	orr.w	r3, r3, #4
 8000a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a5e:	4b38      	ldr	r3, [pc, #224]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a64:	f003 0304 	and.w	r3, r3, #4
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	4b34      	ldr	r3, [pc, #208]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	4a33      	ldr	r2, [pc, #204]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a74:	f043 0301 	orr.w	r3, r3, #1
 8000a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8a:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a92:	f043 0302 	orr.w	r3, r3, #2
 8000a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_GPIO_Init+0x144>)
 8000a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2110      	movs	r1, #16
 8000aac:	4825      	ldr	r0, [pc, #148]	; (8000b44 <MX_GPIO_Init+0x148>)
 8000aae:	f001 fb55 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SER_Pin|CO_A_Pin|CO_B_Pin|REST_Pin, GPIO_PIN_RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	21e8      	movs	r1, #232	; 0xe8
 8000ab6:	4824      	ldr	r0, [pc, #144]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000ab8:	f001 fb50 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_N_GPIO_Port, CS_N_Pin, GPIO_PIN_RESET);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac2:	4822      	ldr	r0, [pc, #136]	; (8000b4c <MX_GPIO_Init+0x150>)
 8000ac4:	f001 fb4a 	bl	800215c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4819      	ldr	r0, [pc, #100]	; (8000b44 <MX_GPIO_Init+0x148>)
 8000ae0:	f001 f974 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : SER_Pin CO_A_Pin CO_B_Pin REST_Pin */
  GPIO_InitStruct.Pin = SER_Pin|CO_A_Pin|CO_B_Pin|REST_Pin;
 8000ae4:	23e8      	movs	r3, #232	; 0xe8
 8000ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af4:	f107 0314 	add.w	r3, r7, #20
 8000af8:	4619      	mov	r1, r3
 8000afa:	4813      	ldr	r0, [pc, #76]	; (8000b48 <MX_GPIO_Init+0x14c>)
 8000afc:	f001 f966 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUSY_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin;
 8000b00:	2301      	movs	r3, #1
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUSY_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	480f      	ldr	r0, [pc, #60]	; (8000b50 <MX_GPIO_Init+0x154>)
 8000b14:	f001 f95a 	bl	8001dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_N_Pin */
  GPIO_InitStruct.Pin = CS_N_Pin;
 8000b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_N_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4806      	ldr	r0, [pc, #24]	; (8000b4c <MX_GPIO_Init+0x150>)
 8000b32:	f001 f94b 	bl	8001dcc <HAL_GPIO_Init>

}
 8000b36:	bf00      	nop
 8000b38:	3728      	adds	r7, #40	; 0x28
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	58024400 	.word	0x58024400
 8000b44:	58021000 	.word	0x58021000
 8000b48:	58020800 	.word	0x58020800
 8000b4c:	58020400 	.word	0x58020400
 8000b50:	58020000 	.word	0x58020000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x34>)
 8000b68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b6c:	4a09      	ldr	r2, [pc, #36]	; (8000b94 <HAL_MspInit+0x34>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <HAL_MspInit+0x34>)
 8000b78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000b84:	2005      	movs	r0, #5
 8000b86:	f000 fb7f 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	58024400 	.word	0x58024400

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0b8      	sub	sp, #224	; 0xe0
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	22bc      	movs	r2, #188	; 0xbc
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f006 f921 	bl	8006e00 <memset>
  if(huart->Instance==LPUART1)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <HAL_UART_MspInit+0xd0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d14a      	bne.n	8000c5e <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_D3PCLK1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0310 	add.w	r3, r7, #16
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fab0 	bl	800313c <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000be2:	f7ff ffb7 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <HAL_UART_MspInit+0xd4>)
 8000be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bec:	4a1f      	ldr	r2, [pc, #124]	; (8000c6c <HAL_UART_MspInit+0xd4>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bf6:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <HAL_UART_MspInit+0xd4>)
 8000bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c04:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_UART_MspInit+0xd4>)
 8000c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_UART_MspInit+0xd4>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_UART_MspInit+0xd4>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA9     ------> LPUART1_TX
    PA10     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c22:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF3_LPUART;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c46:	4619      	mov	r1, r3
 8000c48:	4809      	ldr	r0, [pc, #36]	; (8000c70 <HAL_UART_MspInit+0xd8>)
 8000c4a:	f001 f8bf 	bl	8001dcc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 3, 3);
 8000c4e:	2203      	movs	r2, #3
 8000c50:	2103      	movs	r1, #3
 8000c52:	208e      	movs	r0, #142	; 0x8e
 8000c54:	f000 fb23 	bl	800129e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c58:	208e      	movs	r0, #142	; 0x8e
 8000c5a:	f000 fb3a 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	37e0      	adds	r7, #224	; 0xe0
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	58000c00 	.word	0x58000c00
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	58020000 	.word	0x58020000

08000c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ba      	sub	sp, #232	; 0xe8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c8c:	f107 0318 	add.w	r3, r7, #24
 8000c90:	22bc      	movs	r2, #188	; 0xbc
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f006 f8b3 	bl	8006e00 <memset>
  if(hspi->Instance==SPI2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a38      	ldr	r2, [pc, #224]	; (8000d80 <HAL_SPI_MspInit+0x10c>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d168      	bne.n	8000d76 <HAL_SPI_MspInit+0x102>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000ca4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_CLKP;
 8000caa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cae:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fa41 	bl	800313c <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000cc0:	f7ff ff48 	bl	8000b54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc4:	4b2f      	ldr	r3, [pc, #188]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cca:	4a2e      	ldr	r2, [pc, #184]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000ce4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce8:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000cea:	f043 0302 	orr.w	r3, r3, #2
 8000cee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf8:	f003 0302 	and.w	r3, r3, #2
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d06:	4a1f      	ldr	r2, [pc, #124]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d10:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <HAL_SPI_MspInit+0x110>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PA11     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d1e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d26:	2302      	movs	r3, #2
 8000d28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d42:	4619      	mov	r1, r3
 8000d44:	4810      	ldr	r0, [pc, #64]	; (8000d88 <HAL_SPI_MspInit+0x114>)
 8000d46:	f001 f841 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d64:	2305      	movs	r3, #5
 8000d66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4806      	ldr	r0, [pc, #24]	; (8000d8c <HAL_SPI_MspInit+0x118>)
 8000d72:	f001 f82b 	bl	8001dcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d76:	bf00      	nop
 8000d78:	37e8      	adds	r7, #232	; 0xe8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40003800 	.word	0x40003800
 8000d84:	58024400 	.word	0x58024400
 8000d88:	58020400 	.word	0x58020400
 8000d8c:	58020000 	.word	0x58020000

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f934 	bl	8001048 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <LPUART1_IRQHandler+0x10>)
 8000dea:	f004 fcb9 	bl	8005760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000b4 	.word	0x200000b4

08000df8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b39      	ldr	r3, [pc, #228]	; (8000ee4 <SystemInit+0xec>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a38      	ldr	r2, [pc, #224]	; (8000ee4 <SystemInit+0xec>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e0c:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <SystemInit+0xf0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	2b06      	cmp	r3, #6
 8000e16:	d807      	bhi.n	8000e28 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e18:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <SystemInit+0xf0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f023 030f 	bic.w	r3, r3, #15
 8000e20:	4a31      	ldr	r2, [pc, #196]	; (8000ee8 <SystemInit+0xf0>)
 8000e22:	f043 0307 	orr.w	r3, r3, #7
 8000e26:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e28:	4b30      	ldr	r3, [pc, #192]	; (8000eec <SystemInit+0xf4>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <SystemInit+0xf4>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e34:	4b2d      	ldr	r3, [pc, #180]	; (8000eec <SystemInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	; (8000eec <SystemInit+0xf4>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	492b      	ldr	r1, [pc, #172]	; (8000eec <SystemInit+0xf4>)
 8000e40:	4b2b      	ldr	r3, [pc, #172]	; (8000ef0 <SystemInit+0xf8>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <SystemInit+0xf0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d007      	beq.n	8000e62 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e52:	4b25      	ldr	r3, [pc, #148]	; (8000ee8 <SystemInit+0xf0>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f023 030f 	bic.w	r3, r3, #15
 8000e5a:	4a23      	ldr	r2, [pc, #140]	; (8000ee8 <SystemInit+0xf0>)
 8000e5c:	f043 0307 	orr.w	r3, r3, #7
 8000e60:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <SystemInit+0xf4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e68:	4b20      	ldr	r3, [pc, #128]	; (8000eec <SystemInit+0xf4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <SystemInit+0xf4>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e74:	4b1d      	ldr	r3, [pc, #116]	; (8000eec <SystemInit+0xf4>)
 8000e76:	4a1f      	ldr	r2, [pc, #124]	; (8000ef4 <SystemInit+0xfc>)
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e7a:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <SystemInit+0xf4>)
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <SystemInit+0x100>)
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e80:	4b1a      	ldr	r3, [pc, #104]	; (8000eec <SystemInit+0xf4>)
 8000e82:	4a1e      	ldr	r2, [pc, #120]	; (8000efc <SystemInit+0x104>)
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e86:	4b19      	ldr	r3, [pc, #100]	; (8000eec <SystemInit+0xf4>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e8c:	4b17      	ldr	r3, [pc, #92]	; (8000eec <SystemInit+0xf4>)
 8000e8e:	4a1b      	ldr	r2, [pc, #108]	; (8000efc <SystemInit+0x104>)
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <SystemInit+0xf4>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e98:	4b14      	ldr	r3, [pc, #80]	; (8000eec <SystemInit+0xf4>)
 8000e9a:	4a18      	ldr	r2, [pc, #96]	; (8000efc <SystemInit+0x104>)
 8000e9c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e9e:	4b13      	ldr	r3, [pc, #76]	; (8000eec <SystemInit+0xf4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ea4:	4b11      	ldr	r3, [pc, #68]	; (8000eec <SystemInit+0xf4>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a10      	ldr	r2, [pc, #64]	; (8000eec <SystemInit+0xf4>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000eae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <SystemInit+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <SystemInit+0x108>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	4b12      	ldr	r3, [pc, #72]	; (8000f04 <SystemInit+0x10c>)
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ec2:	d202      	bcs.n	8000eca <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <SystemInit+0x110>)
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <SystemInit+0x114>)
 8000ecc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000ed0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SystemInit+0xec>)
 8000ed4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ed8:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000eda:	bf00      	nop
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00
 8000ee8:	52002000 	.word	0x52002000
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ef4:	02020200 	.word	0x02020200
 8000ef8:	01ff0000 	.word	0x01ff0000
 8000efc:	01010280 	.word	0x01010280
 8000f00:	5c001000 	.word	0x5c001000
 8000f04:	ffff0000 	.word	0xffff0000
 8000f08:	51008108 	.word	0x51008108
 8000f0c:	52004000 	.word	0x52004000

08000f10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f14:	f7ff ff70 	bl	8000df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f18:	480c      	ldr	r0, [pc, #48]	; (8000f4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f1a:	490d      	ldr	r1, [pc, #52]	; (8000f50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f1c:	4a0d      	ldr	r2, [pc, #52]	; (8000f54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f20:	e002      	b.n	8000f28 <LoopCopyDataInit>

08000f22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f26:	3304      	adds	r3, #4

08000f28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f2c:	d3f9      	bcc.n	8000f22 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f30:	4c0a      	ldr	r4, [pc, #40]	; (8000f5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f34:	e001      	b.n	8000f3a <LoopFillZerobss>

08000f36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f38:	3204      	adds	r2, #4

08000f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f3c:	d3fb      	bcc.n	8000f36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f3e:	f005 ff3b 	bl	8006db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f42:	f7ff fbb3 	bl	80006ac <main>
  bx  lr
 8000f46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f54:	08006e7c 	.word	0x08006e7c
  ldr r2, =_sbss
 8000f58:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f5c:	20000148 	.word	0x20000148

08000f60 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC3_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6a:	2003      	movs	r0, #3
 8000f6c:	f000 f98c 	bl	8001288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f70:	f001 ff0e 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8000f74:	4602      	mov	r2, r0
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <HAL_Init+0x68>)
 8000f78:	699b      	ldr	r3, [r3, #24]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	f003 030f 	and.w	r3, r3, #15
 8000f80:	4913      	ldr	r1, [pc, #76]	; (8000fd0 <HAL_Init+0x6c>)
 8000f82:	5ccb      	ldrb	r3, [r1, r3]
 8000f84:	f003 031f 	and.w	r3, r3, #31
 8000f88:	fa22 f303 	lsr.w	r3, r2, r3
 8000f8c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f8e:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <HAL_Init+0x68>)
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_Init+0x6c>)
 8000f98:	5cd3      	ldrb	r3, [r2, r3]
 8000f9a:	f003 031f 	and.w	r3, r3, #31
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa4:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_Init+0x70>)
 8000fa6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	; (8000fd8 <HAL_Init+0x74>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f000 f814 	bl	8000fdc <HAL_InitTick>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e002      	b.n	8000fc4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbe:	f7ff fdcf 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	08006e34 	.word	0x08006e34
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	20000000 	.word	0x20000000

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <HAL_InitTick+0x60>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	e021      	b.n	8001034 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ff0:	4b13      	ldr	r3, [pc, #76]	; (8001040 <HAL_InitTick+0x64>)
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <HAL_InitTick+0x60>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001002:	fbb2 f3f3 	udiv	r3, r2, r3
 8001006:	4618      	mov	r0, r3
 8001008:	f000 f971 	bl	80012ee <HAL_SYSTICK_Config>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e00e      	b.n	8001034 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b0f      	cmp	r3, #15
 800101a:	d80a      	bhi.n	8001032 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	f000 f93b 	bl	800129e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001028:	4a06      	ldr	r2, [pc, #24]	; (8001044 <HAL_InitTick+0x68>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e000      	b.n	8001034 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	2000000c 	.word	0x2000000c
 8001040:	20000000 	.word	0x20000000
 8001044:	20000008 	.word	0x20000008

08001048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_IncTick+0x20>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_IncTick+0x24>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4413      	add	r3, r2
 8001058:	4a04      	ldr	r2, [pc, #16]	; (800106c <HAL_IncTick+0x24>)
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	2000000c 	.word	0x2000000c
 800106c:	20000144 	.word	0x20000144

08001070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  return uwTick;
 8001074:	4b03      	ldr	r3, [pc, #12]	; (8001084 <HAL_GetTick+0x14>)
 8001076:	681b      	ldr	r3, [r3, #0]
}
 8001078:	4618      	mov	r0, r3
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000144 	.word	0x20000144

08001088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001090:	f7ff ffee 	bl	8001070 <HAL_GetTick>
 8001094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a0:	d005      	beq.n	80010ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_Delay+0x44>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ae:	bf00      	nop
 80010b0:	f7ff ffde 	bl	8001070 <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d8f7      	bhi.n	80010b0 <HAL_Delay+0x28>
  {
  }
}
 80010c0:	bf00      	nop
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000000c 	.word	0x2000000c

080010d0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetREVID+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	0c1b      	lsrs	r3, r3, #16
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	5c001000 	.word	0x5c001000

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <__NVIC_SetPriorityGrouping+0x40>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	4313      	orrs	r3, r2
 8001114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001116:	4a04      	ldr	r2, [pc, #16]	; (8001128 <__NVIC_SetPriorityGrouping+0x40>)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	60d3      	str	r3, [r2, #12]
}
 800111c:	bf00      	nop
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	05fa0000 	.word	0x05fa0000

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	f003 021f 	and.w	r2, r3, #31
 8001164:	4907      	ldr	r1, [pc, #28]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	095b      	lsrs	r3, r3, #5
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	490c      	ldr	r1, [pc, #48]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 80011a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	f003 030f 	and.w	r3, r3, #15
 80011be:	3b04      	subs	r3, #4
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43da      	mvns	r2, r3
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	401a      	ands	r2, r3
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001224:	f04f 31ff 	mov.w	r1, #4294967295
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	fa01 f303 	lsl.w	r3, r1, r3
 800122e:	43d9      	mvns	r1, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001234:	4313      	orrs	r3, r2
         );
}
 8001236:	4618      	mov	r0, r3
 8001238:	3724      	adds	r7, #36	; 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3b01      	subs	r3, #1
 8001250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001254:	d301      	bcc.n	800125a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001256:	2301      	movs	r3, #1
 8001258:	e00f      	b.n	800127a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <SysTick_Config+0x40>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001262:	210f      	movs	r1, #15
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f7ff ff8e 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <SysTick_Config+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001272:	4b04      	ldr	r3, [pc, #16]	; (8001284 <SysTick_Config+0x40>)
 8001274:	2207      	movs	r2, #7
 8001276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	e000e010 	.word	0xe000e010

08001288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f7ff ff29 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b086      	sub	sp, #24
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff40 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff33 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa4 	bl	8001244 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001310:	f7ff feae 	bl	8001070 <HAL_GetTick>
 8001314:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e2dc      	b.n	80018da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d008      	beq.n	800133e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e2cd      	b.n	80018da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a76      	ldr	r2, [pc, #472]	; (800151c <HAL_DMA_Abort+0x214>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d04a      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a74      	ldr	r2, [pc, #464]	; (8001520 <HAL_DMA_Abort+0x218>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d045      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a73      	ldr	r2, [pc, #460]	; (8001524 <HAL_DMA_Abort+0x21c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d040      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a71      	ldr	r2, [pc, #452]	; (8001528 <HAL_DMA_Abort+0x220>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d03b      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a70      	ldr	r2, [pc, #448]	; (800152c <HAL_DMA_Abort+0x224>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d036      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a6e      	ldr	r2, [pc, #440]	; (8001530 <HAL_DMA_Abort+0x228>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d031      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a6d      	ldr	r2, [pc, #436]	; (8001534 <HAL_DMA_Abort+0x22c>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d02c      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a6b      	ldr	r2, [pc, #428]	; (8001538 <HAL_DMA_Abort+0x230>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d027      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_DMA_Abort+0x234>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d022      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a68      	ldr	r2, [pc, #416]	; (8001540 <HAL_DMA_Abort+0x238>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d01d      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a67      	ldr	r2, [pc, #412]	; (8001544 <HAL_DMA_Abort+0x23c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d018      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a65      	ldr	r2, [pc, #404]	; (8001548 <HAL_DMA_Abort+0x240>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d013      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a64      	ldr	r2, [pc, #400]	; (800154c <HAL_DMA_Abort+0x244>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d00e      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a62      	ldr	r2, [pc, #392]	; (8001550 <HAL_DMA_Abort+0x248>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d009      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a61      	ldr	r2, [pc, #388]	; (8001554 <HAL_DMA_Abort+0x24c>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d004      	beq.n	80013de <HAL_DMA_Abort+0xd6>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a5f      	ldr	r2, [pc, #380]	; (8001558 <HAL_DMA_Abort+0x250>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d101      	bne.n	80013e2 <HAL_DMA_Abort+0xda>
 80013de:	2301      	movs	r3, #1
 80013e0:	e000      	b.n	80013e4 <HAL_DMA_Abort+0xdc>
 80013e2:	2300      	movs	r3, #0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d013      	beq.n	8001410 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 021e 	bic.w	r2, r2, #30
 80013f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001406:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	e00a      	b.n	8001426 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 020e 	bic.w	r2, r2, #14
 800141e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a3c      	ldr	r2, [pc, #240]	; (800151c <HAL_DMA_Abort+0x214>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d072      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a3a      	ldr	r2, [pc, #232]	; (8001520 <HAL_DMA_Abort+0x218>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d06d      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a39      	ldr	r2, [pc, #228]	; (8001524 <HAL_DMA_Abort+0x21c>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d068      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a37      	ldr	r2, [pc, #220]	; (8001528 <HAL_DMA_Abort+0x220>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d063      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a36      	ldr	r2, [pc, #216]	; (800152c <HAL_DMA_Abort+0x224>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d05e      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a34      	ldr	r2, [pc, #208]	; (8001530 <HAL_DMA_Abort+0x228>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d059      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a33      	ldr	r2, [pc, #204]	; (8001534 <HAL_DMA_Abort+0x22c>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d054      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a31      	ldr	r2, [pc, #196]	; (8001538 <HAL_DMA_Abort+0x230>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d04f      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a30      	ldr	r2, [pc, #192]	; (800153c <HAL_DMA_Abort+0x234>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d04a      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a2e      	ldr	r2, [pc, #184]	; (8001540 <HAL_DMA_Abort+0x238>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d045      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_DMA_Abort+0x23c>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d040      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a2b      	ldr	r2, [pc, #172]	; (8001548 <HAL_DMA_Abort+0x240>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d03b      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a2a      	ldr	r2, [pc, #168]	; (800154c <HAL_DMA_Abort+0x244>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d036      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a28      	ldr	r2, [pc, #160]	; (8001550 <HAL_DMA_Abort+0x248>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d031      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a27      	ldr	r2, [pc, #156]	; (8001554 <HAL_DMA_Abort+0x24c>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d02c      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a25      	ldr	r2, [pc, #148]	; (8001558 <HAL_DMA_Abort+0x250>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d027      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_DMA_Abort+0x254>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d022      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a22      	ldr	r2, [pc, #136]	; (8001560 <HAL_DMA_Abort+0x258>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d01d      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_DMA_Abort+0x25c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d018      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a1f      	ldr	r2, [pc, #124]	; (8001568 <HAL_DMA_Abort+0x260>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <HAL_DMA_Abort+0x264>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d00e      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a1c      	ldr	r2, [pc, #112]	; (8001570 <HAL_DMA_Abort+0x268>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d009      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a1b      	ldr	r2, [pc, #108]	; (8001574 <HAL_DMA_Abort+0x26c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d004      	beq.n	8001516 <HAL_DMA_Abort+0x20e>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	; (8001578 <HAL_DMA_Abort+0x270>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d132      	bne.n	800157c <HAL_DMA_Abort+0x274>
 8001516:	2301      	movs	r3, #1
 8001518:	e031      	b.n	800157e <HAL_DMA_Abort+0x276>
 800151a:	bf00      	nop
 800151c:	40020010 	.word	0x40020010
 8001520:	40020028 	.word	0x40020028
 8001524:	40020040 	.word	0x40020040
 8001528:	40020058 	.word	0x40020058
 800152c:	40020070 	.word	0x40020070
 8001530:	40020088 	.word	0x40020088
 8001534:	400200a0 	.word	0x400200a0
 8001538:	400200b8 	.word	0x400200b8
 800153c:	40020410 	.word	0x40020410
 8001540:	40020428 	.word	0x40020428
 8001544:	40020440 	.word	0x40020440
 8001548:	40020458 	.word	0x40020458
 800154c:	40020470 	.word	0x40020470
 8001550:	40020488 	.word	0x40020488
 8001554:	400204a0 	.word	0x400204a0
 8001558:	400204b8 	.word	0x400204b8
 800155c:	58025408 	.word	0x58025408
 8001560:	5802541c 	.word	0x5802541c
 8001564:	58025430 	.word	0x58025430
 8001568:	58025444 	.word	0x58025444
 800156c:	58025458 	.word	0x58025458
 8001570:	5802546c 	.word	0x5802546c
 8001574:	58025480 	.word	0x58025480
 8001578:	58025494 	.word	0x58025494
 800157c:	2300      	movs	r3, #0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d007      	beq.n	8001592 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001590:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6d      	ldr	r2, [pc, #436]	; (800174c <HAL_DMA_Abort+0x444>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d04a      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a6b      	ldr	r2, [pc, #428]	; (8001750 <HAL_DMA_Abort+0x448>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d045      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6a      	ldr	r2, [pc, #424]	; (8001754 <HAL_DMA_Abort+0x44c>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d040      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a68      	ldr	r2, [pc, #416]	; (8001758 <HAL_DMA_Abort+0x450>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d03b      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a67      	ldr	r2, [pc, #412]	; (800175c <HAL_DMA_Abort+0x454>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d036      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a65      	ldr	r2, [pc, #404]	; (8001760 <HAL_DMA_Abort+0x458>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d031      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HAL_DMA_Abort+0x45c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d02c      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a62      	ldr	r2, [pc, #392]	; (8001768 <HAL_DMA_Abort+0x460>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d027      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a61      	ldr	r2, [pc, #388]	; (800176c <HAL_DMA_Abort+0x464>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d022      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a5f      	ldr	r2, [pc, #380]	; (8001770 <HAL_DMA_Abort+0x468>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d01d      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a5e      	ldr	r2, [pc, #376]	; (8001774 <HAL_DMA_Abort+0x46c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d018      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a5c      	ldr	r2, [pc, #368]	; (8001778 <HAL_DMA_Abort+0x470>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d013      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a5b      	ldr	r2, [pc, #364]	; (800177c <HAL_DMA_Abort+0x474>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00e      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a59      	ldr	r2, [pc, #356]	; (8001780 <HAL_DMA_Abort+0x478>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d009      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_DMA_Abort+0x47c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d004      	beq.n	8001632 <HAL_DMA_Abort+0x32a>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a56      	ldr	r2, [pc, #344]	; (8001788 <HAL_DMA_Abort+0x480>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d108      	bne.n	8001644 <HAL_DMA_Abort+0x33c>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0201 	bic.w	r2, r2, #1
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <HAL_DMA_Abort+0x34c>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001654:	e013      	b.n	800167e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001656:	f7ff fd0b 	bl	8001070 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b05      	cmp	r3, #5
 8001662:	d90c      	bls.n	800167e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2220      	movs	r2, #32
 8001668:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2203      	movs	r2, #3
 8001676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e12d      	b.n	80018da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e5      	bne.n	8001656 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2f      	ldr	r2, [pc, #188]	; (800174c <HAL_DMA_Abort+0x444>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d04a      	beq.n	800172a <HAL_DMA_Abort+0x422>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <HAL_DMA_Abort+0x448>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d045      	beq.n	800172a <HAL_DMA_Abort+0x422>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a2c      	ldr	r2, [pc, #176]	; (8001754 <HAL_DMA_Abort+0x44c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d040      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a2a      	ldr	r2, [pc, #168]	; (8001758 <HAL_DMA_Abort+0x450>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d03b      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <HAL_DMA_Abort+0x454>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d036      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a27      	ldr	r2, [pc, #156]	; (8001760 <HAL_DMA_Abort+0x458>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d031      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a26      	ldr	r2, [pc, #152]	; (8001764 <HAL_DMA_Abort+0x45c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d02c      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a24      	ldr	r2, [pc, #144]	; (8001768 <HAL_DMA_Abort+0x460>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d027      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a23      	ldr	r2, [pc, #140]	; (800176c <HAL_DMA_Abort+0x464>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d022      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a21      	ldr	r2, [pc, #132]	; (8001770 <HAL_DMA_Abort+0x468>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01d      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a20      	ldr	r2, [pc, #128]	; (8001774 <HAL_DMA_Abort+0x46c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d018      	beq.n	800172a <HAL_DMA_Abort+0x422>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_DMA_Abort+0x470>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_DMA_Abort+0x422>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a1d      	ldr	r2, [pc, #116]	; (800177c <HAL_DMA_Abort+0x474>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d00e      	beq.n	800172a <HAL_DMA_Abort+0x422>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a1b      	ldr	r2, [pc, #108]	; (8001780 <HAL_DMA_Abort+0x478>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d009      	beq.n	800172a <HAL_DMA_Abort+0x422>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <HAL_DMA_Abort+0x47c>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d004      	beq.n	800172a <HAL_DMA_Abort+0x422>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a18      	ldr	r2, [pc, #96]	; (8001788 <HAL_DMA_Abort+0x480>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_DMA_Abort+0x426>
 800172a:	2301      	movs	r3, #1
 800172c:	e000      	b.n	8001730 <HAL_DMA_Abort+0x428>
 800172e:	2300      	movs	r3, #0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d02b      	beq.n	800178c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001738:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	f003 031f 	and.w	r3, r3, #31
 8001742:	223f      	movs	r2, #63	; 0x3f
 8001744:	409a      	lsls	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	e02a      	b.n	80017a2 <HAL_DMA_Abort+0x49a>
 800174c:	40020010 	.word	0x40020010
 8001750:	40020028 	.word	0x40020028
 8001754:	40020040 	.word	0x40020040
 8001758:	40020058 	.word	0x40020058
 800175c:	40020070 	.word	0x40020070
 8001760:	40020088 	.word	0x40020088
 8001764:	400200a0 	.word	0x400200a0
 8001768:	400200b8 	.word	0x400200b8
 800176c:	40020410 	.word	0x40020410
 8001770:	40020428 	.word	0x40020428
 8001774:	40020440 	.word	0x40020440
 8001778:	40020458 	.word	0x40020458
 800177c:	40020470 	.word	0x40020470
 8001780:	40020488 	.word	0x40020488
 8001784:	400204a0 	.word	0x400204a0
 8001788:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001796:	f003 031f 	and.w	r3, r3, #31
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a4f      	ldr	r2, [pc, #316]	; (80018e4 <HAL_DMA_Abort+0x5dc>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d072      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a4d      	ldr	r2, [pc, #308]	; (80018e8 <HAL_DMA_Abort+0x5e0>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d06d      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a4c      	ldr	r2, [pc, #304]	; (80018ec <HAL_DMA_Abort+0x5e4>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d068      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a4a      	ldr	r2, [pc, #296]	; (80018f0 <HAL_DMA_Abort+0x5e8>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d063      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a49      	ldr	r2, [pc, #292]	; (80018f4 <HAL_DMA_Abort+0x5ec>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d05e      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a47      	ldr	r2, [pc, #284]	; (80018f8 <HAL_DMA_Abort+0x5f0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d059      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a46      	ldr	r2, [pc, #280]	; (80018fc <HAL_DMA_Abort+0x5f4>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d054      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a44      	ldr	r2, [pc, #272]	; (8001900 <HAL_DMA_Abort+0x5f8>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d04f      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a43      	ldr	r2, [pc, #268]	; (8001904 <HAL_DMA_Abort+0x5fc>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d04a      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a41      	ldr	r2, [pc, #260]	; (8001908 <HAL_DMA_Abort+0x600>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d045      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a40      	ldr	r2, [pc, #256]	; (800190c <HAL_DMA_Abort+0x604>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d040      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a3e      	ldr	r2, [pc, #248]	; (8001910 <HAL_DMA_Abort+0x608>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d03b      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a3d      	ldr	r2, [pc, #244]	; (8001914 <HAL_DMA_Abort+0x60c>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d036      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a3b      	ldr	r2, [pc, #236]	; (8001918 <HAL_DMA_Abort+0x610>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d031      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a3a      	ldr	r2, [pc, #232]	; (800191c <HAL_DMA_Abort+0x614>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d02c      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a38      	ldr	r2, [pc, #224]	; (8001920 <HAL_DMA_Abort+0x618>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d027      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_DMA_Abort+0x61c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d022      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a35      	ldr	r2, [pc, #212]	; (8001928 <HAL_DMA_Abort+0x620>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d01d      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_DMA_Abort+0x624>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d018      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a32      	ldr	r2, [pc, #200]	; (8001930 <HAL_DMA_Abort+0x628>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d013      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_DMA_Abort+0x62c>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d00e      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a2f      	ldr	r2, [pc, #188]	; (8001938 <HAL_DMA_Abort+0x630>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d009      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a2e      	ldr	r2, [pc, #184]	; (800193c <HAL_DMA_Abort+0x634>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d004      	beq.n	8001892 <HAL_DMA_Abort+0x58a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a2c      	ldr	r2, [pc, #176]	; (8001940 <HAL_DMA_Abort+0x638>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d101      	bne.n	8001896 <HAL_DMA_Abort+0x58e>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_DMA_Abort+0x590>
 8001896:	2300      	movs	r3, #0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d015      	beq.n	80018c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80018a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d00c      	beq.n	80018c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80018c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3718      	adds	r7, #24
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40020010 	.word	0x40020010
 80018e8:	40020028 	.word	0x40020028
 80018ec:	40020040 	.word	0x40020040
 80018f0:	40020058 	.word	0x40020058
 80018f4:	40020070 	.word	0x40020070
 80018f8:	40020088 	.word	0x40020088
 80018fc:	400200a0 	.word	0x400200a0
 8001900:	400200b8 	.word	0x400200b8
 8001904:	40020410 	.word	0x40020410
 8001908:	40020428 	.word	0x40020428
 800190c:	40020440 	.word	0x40020440
 8001910:	40020458 	.word	0x40020458
 8001914:	40020470 	.word	0x40020470
 8001918:	40020488 	.word	0x40020488
 800191c:	400204a0 	.word	0x400204a0
 8001920:	400204b8 	.word	0x400204b8
 8001924:	58025408 	.word	0x58025408
 8001928:	5802541c 	.word	0x5802541c
 800192c:	58025430 	.word	0x58025430
 8001930:	58025444 	.word	0x58025444
 8001934:	58025458 	.word	0x58025458
 8001938:	5802546c 	.word	0x5802546c
 800193c:	58025480 	.word	0x58025480
 8001940:	58025494 	.word	0x58025494

08001944 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e205      	b.n	8001d62 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2b02      	cmp	r3, #2
 8001960:	d004      	beq.n	800196c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2280      	movs	r2, #128	; 0x80
 8001966:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e1fa      	b.n	8001d62 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a8c      	ldr	r2, [pc, #560]	; (8001ba4 <HAL_DMA_Abort_IT+0x260>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d04a      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a8b      	ldr	r2, [pc, #556]	; (8001ba8 <HAL_DMA_Abort_IT+0x264>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d045      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a89      	ldr	r2, [pc, #548]	; (8001bac <HAL_DMA_Abort_IT+0x268>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d040      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a88      	ldr	r2, [pc, #544]	; (8001bb0 <HAL_DMA_Abort_IT+0x26c>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d03b      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a86      	ldr	r2, [pc, #536]	; (8001bb4 <HAL_DMA_Abort_IT+0x270>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d036      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a85      	ldr	r2, [pc, #532]	; (8001bb8 <HAL_DMA_Abort_IT+0x274>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d031      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a83      	ldr	r2, [pc, #524]	; (8001bbc <HAL_DMA_Abort_IT+0x278>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d02c      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a82      	ldr	r2, [pc, #520]	; (8001bc0 <HAL_DMA_Abort_IT+0x27c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d027      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a80      	ldr	r2, [pc, #512]	; (8001bc4 <HAL_DMA_Abort_IT+0x280>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d022      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <HAL_DMA_Abort_IT+0x284>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d01d      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a7d      	ldr	r2, [pc, #500]	; (8001bcc <HAL_DMA_Abort_IT+0x288>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d018      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a7c      	ldr	r2, [pc, #496]	; (8001bd0 <HAL_DMA_Abort_IT+0x28c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d013      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a7a      	ldr	r2, [pc, #488]	; (8001bd4 <HAL_DMA_Abort_IT+0x290>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d00e      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a79      	ldr	r2, [pc, #484]	; (8001bd8 <HAL_DMA_Abort_IT+0x294>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d009      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a77      	ldr	r2, [pc, #476]	; (8001bdc <HAL_DMA_Abort_IT+0x298>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d004      	beq.n	8001a0c <HAL_DMA_Abort_IT+0xc8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a76      	ldr	r2, [pc, #472]	; (8001be0 <HAL_DMA_Abort_IT+0x29c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_DMA_Abort_IT+0xcc>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_DMA_Abort_IT+0xce>
 8001a10:	2300      	movs	r3, #0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d065      	beq.n	8001ae2 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2204      	movs	r2, #4
 8001a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a60      	ldr	r2, [pc, #384]	; (8001ba4 <HAL_DMA_Abort_IT+0x260>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d04a      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a5e      	ldr	r2, [pc, #376]	; (8001ba8 <HAL_DMA_Abort_IT+0x264>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d045      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a5d      	ldr	r2, [pc, #372]	; (8001bac <HAL_DMA_Abort_IT+0x268>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d040      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a5b      	ldr	r2, [pc, #364]	; (8001bb0 <HAL_DMA_Abort_IT+0x26c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d03b      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a5a      	ldr	r2, [pc, #360]	; (8001bb4 <HAL_DMA_Abort_IT+0x270>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d036      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a58      	ldr	r2, [pc, #352]	; (8001bb8 <HAL_DMA_Abort_IT+0x274>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d031      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_DMA_Abort_IT+0x278>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d02c      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a55      	ldr	r2, [pc, #340]	; (8001bc0 <HAL_DMA_Abort_IT+0x27c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d027      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <HAL_DMA_Abort_IT+0x280>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d022      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a52      	ldr	r2, [pc, #328]	; (8001bc8 <HAL_DMA_Abort_IT+0x284>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01d      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a51      	ldr	r2, [pc, #324]	; (8001bcc <HAL_DMA_Abort_IT+0x288>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d018      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a4f      	ldr	r2, [pc, #316]	; (8001bd0 <HAL_DMA_Abort_IT+0x28c>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d013      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a4e      	ldr	r2, [pc, #312]	; (8001bd4 <HAL_DMA_Abort_IT+0x290>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d00e      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a4c      	ldr	r2, [pc, #304]	; (8001bd8 <HAL_DMA_Abort_IT+0x294>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d009      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4b      	ldr	r2, [pc, #300]	; (8001bdc <HAL_DMA_Abort_IT+0x298>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d004      	beq.n	8001abe <HAL_DMA_Abort_IT+0x17a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a49      	ldr	r2, [pc, #292]	; (8001be0 <HAL_DMA_Abort_IT+0x29c>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d108      	bne.n	8001ad0 <HAL_DMA_Abort_IT+0x18c>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f022 0201 	bic.w	r2, r2, #1
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	e147      	b.n	8001d60 <HAL_DMA_Abort_IT+0x41c>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0201 	bic.w	r2, r2, #1
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	e13e      	b.n	8001d60 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 020e 	bic.w	r2, r2, #14
 8001af0:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2b      	ldr	r2, [pc, #172]	; (8001ba4 <HAL_DMA_Abort_IT+0x260>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04a      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a29      	ldr	r2, [pc, #164]	; (8001ba8 <HAL_DMA_Abort_IT+0x264>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d045      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a28      	ldr	r2, [pc, #160]	; (8001bac <HAL_DMA_Abort_IT+0x268>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <HAL_DMA_Abort_IT+0x26c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03b      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a25      	ldr	r2, [pc, #148]	; (8001bb4 <HAL_DMA_Abort_IT+0x270>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d036      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <HAL_DMA_Abort_IT+0x274>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d031      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a22      	ldr	r2, [pc, #136]	; (8001bbc <HAL_DMA_Abort_IT+0x278>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d02c      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <HAL_DMA_Abort_IT+0x27c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d027      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a1f      	ldr	r2, [pc, #124]	; (8001bc4 <HAL_DMA_Abort_IT+0x280>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a1d      	ldr	r2, [pc, #116]	; (8001bc8 <HAL_DMA_Abort_IT+0x284>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_DMA_Abort_IT+0x288>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <HAL_DMA_Abort_IT+0x28c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a19      	ldr	r2, [pc, #100]	; (8001bd4 <HAL_DMA_Abort_IT+0x290>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_DMA_Abort_IT+0x294>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <HAL_DMA_Abort_IT+0x298>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort_IT+0x24e>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <HAL_DMA_Abort_IT+0x29c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d128      	bne.n	8001be4 <HAL_DMA_Abort_IT+0x2a0>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 0201 	bic.w	r2, r2, #1
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	e027      	b.n	8001bf4 <HAL_DMA_Abort_IT+0x2b0>
 8001ba4:	40020010 	.word	0x40020010
 8001ba8:	40020028 	.word	0x40020028
 8001bac:	40020040 	.word	0x40020040
 8001bb0:	40020058 	.word	0x40020058
 8001bb4:	40020070 	.word	0x40020070
 8001bb8:	40020088 	.word	0x40020088
 8001bbc:	400200a0 	.word	0x400200a0
 8001bc0:	400200b8 	.word	0x400200b8
 8001bc4:	40020410 	.word	0x40020410
 8001bc8:	40020428 	.word	0x40020428
 8001bcc:	40020440 	.word	0x40020440
 8001bd0:	40020458 	.word	0x40020458
 8001bd4:	40020470 	.word	0x40020470
 8001bd8:	40020488 	.word	0x40020488
 8001bdc:	400204a0 	.word	0x400204a0
 8001be0:	400204b8 	.word	0x400204b8
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a5c      	ldr	r2, [pc, #368]	; (8001d6c <HAL_DMA_Abort_IT+0x428>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d072      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5b      	ldr	r2, [pc, #364]	; (8001d70 <HAL_DMA_Abort_IT+0x42c>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d06d      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <HAL_DMA_Abort_IT+0x430>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d068      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a58      	ldr	r2, [pc, #352]	; (8001d78 <HAL_DMA_Abort_IT+0x434>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d063      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a56      	ldr	r2, [pc, #344]	; (8001d7c <HAL_DMA_Abort_IT+0x438>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d05e      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a55      	ldr	r2, [pc, #340]	; (8001d80 <HAL_DMA_Abort_IT+0x43c>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d059      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a53      	ldr	r2, [pc, #332]	; (8001d84 <HAL_DMA_Abort_IT+0x440>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d054      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a52      	ldr	r2, [pc, #328]	; (8001d88 <HAL_DMA_Abort_IT+0x444>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d04f      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a50      	ldr	r2, [pc, #320]	; (8001d8c <HAL_DMA_Abort_IT+0x448>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d04a      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a4f      	ldr	r2, [pc, #316]	; (8001d90 <HAL_DMA_Abort_IT+0x44c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d045      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	; (8001d94 <HAL_DMA_Abort_IT+0x450>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d040      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_DMA_Abort_IT+0x454>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d03b      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a4a      	ldr	r2, [pc, #296]	; (8001d9c <HAL_DMA_Abort_IT+0x458>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d036      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a49      	ldr	r2, [pc, #292]	; (8001da0 <HAL_DMA_Abort_IT+0x45c>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d031      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a47      	ldr	r2, [pc, #284]	; (8001da4 <HAL_DMA_Abort_IT+0x460>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d02c      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a46      	ldr	r2, [pc, #280]	; (8001da8 <HAL_DMA_Abort_IT+0x464>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d027      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a44      	ldr	r2, [pc, #272]	; (8001dac <HAL_DMA_Abort_IT+0x468>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d022      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a43      	ldr	r2, [pc, #268]	; (8001db0 <HAL_DMA_Abort_IT+0x46c>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a41      	ldr	r2, [pc, #260]	; (8001db4 <HAL_DMA_Abort_IT+0x470>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d018      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a40      	ldr	r2, [pc, #256]	; (8001db8 <HAL_DMA_Abort_IT+0x474>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a3e      	ldr	r2, [pc, #248]	; (8001dbc <HAL_DMA_Abort_IT+0x478>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a3d      	ldr	r2, [pc, #244]	; (8001dc0 <HAL_DMA_Abort_IT+0x47c>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a3b      	ldr	r2, [pc, #236]	; (8001dc4 <HAL_DMA_Abort_IT+0x480>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_DMA_Abort_IT+0x3a0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a3a      	ldr	r2, [pc, #232]	; (8001dc8 <HAL_DMA_Abort_IT+0x484>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d101      	bne.n	8001ce8 <HAL_DMA_Abort_IT+0x3a4>
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e000      	b.n	8001cea <HAL_DMA_Abort_IT+0x3a6>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d028      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cfc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	409a      	lsls	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d1c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00c      	beq.n	8001d40 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d34:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d3e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40020010 	.word	0x40020010
 8001d70:	40020028 	.word	0x40020028
 8001d74:	40020040 	.word	0x40020040
 8001d78:	40020058 	.word	0x40020058
 8001d7c:	40020070 	.word	0x40020070
 8001d80:	40020088 	.word	0x40020088
 8001d84:	400200a0 	.word	0x400200a0
 8001d88:	400200b8 	.word	0x400200b8
 8001d8c:	40020410 	.word	0x40020410
 8001d90:	40020428 	.word	0x40020428
 8001d94:	40020440 	.word	0x40020440
 8001d98:	40020458 	.word	0x40020458
 8001d9c:	40020470 	.word	0x40020470
 8001da0:	40020488 	.word	0x40020488
 8001da4:	400204a0 	.word	0x400204a0
 8001da8:	400204b8 	.word	0x400204b8
 8001dac:	58025408 	.word	0x58025408
 8001db0:	5802541c 	.word	0x5802541c
 8001db4:	58025430 	.word	0x58025430
 8001db8:	58025444 	.word	0x58025444
 8001dbc:	58025458 	.word	0x58025458
 8001dc0:	5802546c 	.word	0x5802546c
 8001dc4:	58025480 	.word	0x58025480
 8001dc8:	58025494 	.word	0x58025494

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dda:	4b89      	ldr	r3, [pc, #548]	; (8002000 <HAL_GPIO_Init+0x234>)
 8001ddc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001dde:	e194      	b.n	800210a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2101      	movs	r1, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8186 	beq.w	8002104 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d00b      	beq.n	8001e18 <HAL_GPIO_Init+0x4c>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d007      	beq.n	8001e18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e0c:	2b11      	cmp	r3, #17
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b12      	cmp	r3, #18
 8001e16:	d130      	bne.n	8001e7a <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	2203      	movs	r2, #3
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e4e:	2201      	movs	r2, #1
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	091b      	lsrs	r3, r3, #4
 8001e64:	f003 0201 	and.w	r2, r3, #1
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	2203      	movs	r2, #3
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	689a      	ldr	r2, [r3, #8]
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0xee>
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b12      	cmp	r3, #18
 8001eb8:	d123      	bne.n	8001f02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	08da      	lsrs	r2, r3, #3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	3208      	adds	r2, #8
 8001ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	220f      	movs	r2, #15
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	08da      	lsrs	r2, r3, #3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	3208      	adds	r2, #8
 8001efc:	69b9      	ldr	r1, [r7, #24]
 8001efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	43db      	mvns	r3, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4013      	ands	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0203 	and.w	r2, r3, #3
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80e0 	beq.w	8002104 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_GPIO_Init+0x238>)
 8001f46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f4a:	4a2e      	ldr	r2, [pc, #184]	; (8002004 <HAL_GPIO_Init+0x238>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f54:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_GPIO_Init+0x238>)
 8001f56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f62:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_GPIO_Init+0x23c>)
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	3302      	adds	r3, #2
 8001f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	220f      	movs	r2, #15
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43db      	mvns	r3, r3
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	4013      	ands	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_GPIO_Init+0x240>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d052      	beq.n	8002034 <HAL_GPIO_Init+0x268>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_GPIO_Init+0x244>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_GPIO_Init+0x22e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a1e      	ldr	r2, [pc, #120]	; (8002014 <HAL_GPIO_Init+0x248>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02b      	beq.n	8001ff6 <HAL_GPIO_Init+0x22a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a1d      	ldr	r2, [pc, #116]	; (8002018 <HAL_GPIO_Init+0x24c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d025      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	; (800201c <HAL_GPIO_Init+0x250>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01f      	beq.n	8001fee <HAL_GPIO_Init+0x222>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a1b      	ldr	r2, [pc, #108]	; (8002020 <HAL_GPIO_Init+0x254>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d019      	beq.n	8001fea <HAL_GPIO_Init+0x21e>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a1a      	ldr	r2, [pc, #104]	; (8002024 <HAL_GPIO_Init+0x258>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_GPIO_Init+0x21a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_GPIO_Init+0x25c>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00d      	beq.n	8001fe2 <HAL_GPIO_Init+0x216>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_GPIO_Init+0x260>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <HAL_GPIO_Init+0x212>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_GPIO_Init+0x264>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_GPIO_Init+0x20e>
 8001fd6:	2309      	movs	r3, #9
 8001fd8:	e02d      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001fda:	230a      	movs	r3, #10
 8001fdc:	e02b      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001fde:	2308      	movs	r3, #8
 8001fe0:	e029      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e027      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001fe6:	2306      	movs	r3, #6
 8001fe8:	e025      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001fea:	2305      	movs	r3, #5
 8001fec:	e023      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001fee:	2304      	movs	r3, #4
 8001ff0:	e021      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e01f      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	e01d      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e01b      	b.n	8002036 <HAL_GPIO_Init+0x26a>
 8001ffe:	bf00      	nop
 8002000:	58000080 	.word	0x58000080
 8002004:	58024400 	.word	0x58024400
 8002008:	58000400 	.word	0x58000400
 800200c:	58020000 	.word	0x58020000
 8002010:	58020400 	.word	0x58020400
 8002014:	58020800 	.word	0x58020800
 8002018:	58020c00 	.word	0x58020c00
 800201c:	58021000 	.word	0x58021000
 8002020:	58021400 	.word	0x58021400
 8002024:	58021800 	.word	0x58021800
 8002028:	58021c00 	.word	0x58021c00
 800202c:	58022000 	.word	0x58022000
 8002030:	58022400 	.word	0x58022400
 8002034:	2300      	movs	r3, #0
 8002036:	69fa      	ldr	r2, [r7, #28]
 8002038:	f002 0203 	and.w	r2, r2, #3
 800203c:	0092      	lsls	r2, r2, #2
 800203e:	4093      	lsls	r3, r2
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002046:	4938      	ldr	r1, [pc, #224]	; (8002128 <HAL_GPIO_Init+0x35c>)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	089b      	lsrs	r3, r3, #2
 800204c:	3302      	adds	r3, #2
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d003      	beq.n	8002078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	4313      	orrs	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80020ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	4013      	ands	r3, r2
 80020e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	3301      	adds	r3, #1
 8002108:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa22 f303 	lsr.w	r3, r2, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	f47f ae63 	bne.w	8001de0 <HAL_GPIO_Init+0x14>
  }
}
 800211a:	bf00      	nop
 800211c:	bf00      	nop
 800211e:	3724      	adds	r7, #36	; 0x24
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	58000400 	.word	0x58000400

0800212c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	887b      	ldrh	r3, [r7, #2]
 800213e:	4013      	ands	r3, r2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002144:	2301      	movs	r3, #1
 8002146:	73fb      	strb	r3, [r7, #15]
 8002148:	e001      	b.n	800214e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3714      	adds	r7, #20
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	460b      	mov	r3, r1
 8002166:	807b      	strh	r3, [r7, #2]
 8002168:	4613      	mov	r3, r2
 800216a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002172:	887a      	ldrh	r2, [r7, #2]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002178:	e003      	b.n	8002182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800217a:	887b      	ldrh	r3, [r7, #2]
 800217c:	041a      	lsls	r2, r3, #16
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	619a      	str	r2, [r3, #24]
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002198:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_PWREx_ConfigSupply+0x70>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d00a      	beq.n	80021ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021a4:	4b16      	ldr	r3, [pc, #88]	; (8002200 <HAL_PWREx_ConfigSupply+0x70>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d001      	beq.n	80021b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01f      	b.n	80021f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e01d      	b.n	80021f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021ba:	4b11      	ldr	r3, [pc, #68]	; (8002200 <HAL_PWREx_ConfigSupply+0x70>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	f023 0207 	bic.w	r2, r3, #7
 80021c2:	490f      	ldr	r1, [pc, #60]	; (8002200 <HAL_PWREx_ConfigSupply+0x70>)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021ca:	f7fe ff51 	bl	8001070 <HAL_GetTick>
 80021ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021d0:	e009      	b.n	80021e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021d2:	f7fe ff4d 	bl	8001070 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021e0:	d901      	bls.n	80021e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e007      	b.n	80021f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021e6:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_PWREx_ConfigSupply+0x70>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f2:	d1ee      	bne.n	80021d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	58024800 	.word	0x58024800

08002204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	; 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ff      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002224:	4b99      	ldr	r3, [pc, #612]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800222e:	4b97      	ldr	r3, [pc, #604]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b10      	cmp	r3, #16
 8002238:	d007      	beq.n	800224a <HAL_RCC_OscConfig+0x46>
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	2b18      	cmp	r3, #24
 800223e:	d110      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
 8002240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d10b      	bne.n	8002262 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224a:	4b90      	ldr	r3, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d06c      	beq.n	8002330 <HAL_RCC_OscConfig+0x12c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d168      	bne.n	8002330 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e3d9      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x76>
 800226c:	4b87      	ldr	r3, [pc, #540]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a86      	ldr	r2, [pc, #536]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	e02e      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x98>
 8002282:	4b82      	ldr	r3, [pc, #520]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a81      	ldr	r2, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	4b7f      	ldr	r3, [pc, #508]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7e      	ldr	r2, [pc, #504]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002298:	6013      	str	r3, [r2, #0]
 800229a:	e01d      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022a4:	d10c      	bne.n	80022c0 <HAL_RCC_OscConfig+0xbc>
 80022a6:	4b79      	ldr	r3, [pc, #484]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a78      	ldr	r2, [pc, #480]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a75      	ldr	r2, [pc, #468]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	e00b      	b.n	80022d8 <HAL_RCC_OscConfig+0xd4>
 80022c0:	4b72      	ldr	r3, [pc, #456]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a71      	ldr	r2, [pc, #452]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ca:	6013      	str	r3, [r2, #0]
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e0:	f7fe fec6 	bl	8001070 <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022e8:	f7fe fec2 	bl	8001070 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	; 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e38d      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022fa:	4b64      	ldr	r3, [pc, #400]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0xe4>
 8002306:	e014      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002308:	f7fe feb2 	bl	8001070 <HAL_GetTick>
 800230c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7fe feae 	bl	8001070 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e379      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002322:	4b5a      	ldr	r3, [pc, #360]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x10c>
 800232e:	e000      	b.n	8002332 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 80ae 	beq.w	800249c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002340:	4b52      	ldr	r3, [pc, #328]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002348:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d007      	beq.n	8002366 <HAL_RCC_OscConfig+0x162>
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	2b18      	cmp	r3, #24
 800235a:	d13a      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1ce>
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0303 	and.w	r3, r3, #3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d135      	bne.n	80023d2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002366:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	d005      	beq.n	800237e <HAL_RCC_OscConfig+0x17a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e34b      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237e:	f7fe fea7 	bl	80010d0 <HAL_GetREVID>
 8002382:	4603      	mov	r3, r0
 8002384:	f241 0203 	movw	r2, #4099	; 0x1003
 8002388:	4293      	cmp	r3, r2
 800238a:	d817      	bhi.n	80023bc <HAL_RCC_OscConfig+0x1b8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d108      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1a2>
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800239c:	4a3b      	ldr	r2, [pc, #236]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800239e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a2:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	e07a      	b.n	800249c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	031b      	lsls	r3, r3, #12
 80023b4:	4935      	ldr	r1, [pc, #212]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ba:	e06f      	b.n	800249c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b33      	ldr	r3, [pc, #204]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	4930      	ldr	r1, [pc, #192]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	e064      	b.n	800249c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d045      	beq.n	8002466 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 0219 	bic.w	r2, r3, #25
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	4929      	ldr	r1, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x288>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ec:	f7fe fe40 	bl	8001070 <HAL_GetTick>
 80023f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f4:	f7fe fe3c 	bl	8001070 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e307      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	2b00      	cmp	r3, #0
 8002410:	d0f0      	beq.n	80023f4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	f7fe fe5d 	bl	80010d0 <HAL_GetREVID>
 8002416:	4603      	mov	r3, r0
 8002418:	f241 0203 	movw	r2, #4099	; 0x1003
 800241c:	4293      	cmp	r3, r2
 800241e:	d817      	bhi.n	8002450 <HAL_RCC_OscConfig+0x24c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d108      	bne.n	800243a <HAL_RCC_OscConfig+0x236>
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002430:	4a16      	ldr	r2, [pc, #88]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002436:	6053      	str	r3, [r2, #4]
 8002438:	e030      	b.n	800249c <HAL_RCC_OscConfig+0x298>
 800243a:	4b14      	ldr	r3, [pc, #80]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	031b      	lsls	r3, r3, #12
 8002448:	4910      	ldr	r1, [pc, #64]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
 800244e:	e025      	b.n	800249c <HAL_RCC_OscConfig+0x298>
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	061b      	lsls	r3, r3, #24
 800245e:	490b      	ldr	r1, [pc, #44]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002460:	4313      	orrs	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
 8002464:	e01a      	b.n	800249c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <HAL_RCC_OscConfig+0x288>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a08      	ldr	r2, [pc, #32]	; (800248c <HAL_RCC_OscConfig+0x288>)
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002472:	f7fe fdfd 	bl	8001070 <HAL_GetTick>
 8002476:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247a:	f7fe fdf9 	bl	8001070 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d903      	bls.n	8002490 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e2c4      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
 800248c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002490:	4ba4      	ldr	r3, [pc, #656]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1ee      	bne.n	800247a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0310 	and.w	r3, r3, #16
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a9 	beq.w	80025fc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024aa:	4b9e      	ldr	r3, [pc, #632]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024b2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024b4:	4b9b      	ldr	r3, [pc, #620]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80024b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024b8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d007      	beq.n	80024d0 <HAL_RCC_OscConfig+0x2cc>
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	2b18      	cmp	r3, #24
 80024c4:	d13a      	bne.n	800253c <HAL_RCC_OscConfig+0x338>
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d135      	bne.n	800253c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024d0:	4b94      	ldr	r3, [pc, #592]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2e4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b80      	cmp	r3, #128	; 0x80
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e296      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024e8:	f7fe fdf2 	bl	80010d0 <HAL_GetREVID>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d817      	bhi.n	8002526 <HAL_RCC_OscConfig+0x322>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x30c>
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002506:	4a87      	ldr	r2, [pc, #540]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002508:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800250c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800250e:	e075      	b.n	80025fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002510:	4b84      	ldr	r3, [pc, #528]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	069b      	lsls	r3, r3, #26
 800251e:	4981      	ldr	r1, [pc, #516]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002520:	4313      	orrs	r3, r2
 8002522:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002524:	e06a      	b.n	80025fc <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002528:	68db      	ldr	r3, [r3, #12]
 800252a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	497b      	ldr	r1, [pc, #492]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002536:	4313      	orrs	r3, r2
 8002538:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800253a:	e05f      	b.n	80025fc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d042      	beq.n	80025ca <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002544:	4b77      	ldr	r3, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a76      	ldr	r2, [pc, #472]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 800254a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002550:	f7fe fd8e 	bl	8001070 <HAL_GetTick>
 8002554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002558:	f7fe fd8a 	bl	8001070 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e255      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800256a:	4b6e      	ldr	r3, [pc, #440]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002576:	f7fe fdab 	bl	80010d0 <HAL_GetREVID>
 800257a:	4603      	mov	r3, r0
 800257c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002580:	4293      	cmp	r3, r2
 8002582:	d817      	bhi.n	80025b4 <HAL_RCC_OscConfig+0x3b0>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	2b20      	cmp	r3, #32
 800258a:	d108      	bne.n	800259e <HAL_RCC_OscConfig+0x39a>
 800258c:	4b65      	ldr	r3, [pc, #404]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002594:	4a63      	ldr	r2, [pc, #396]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002596:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800259a:	6053      	str	r3, [r2, #4]
 800259c:	e02e      	b.n	80025fc <HAL_RCC_OscConfig+0x3f8>
 800259e:	4b61      	ldr	r3, [pc, #388]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	069b      	lsls	r3, r3, #26
 80025ac:	495d      	ldr	r1, [pc, #372]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
 80025b2:	e023      	b.n	80025fc <HAL_RCC_OscConfig+0x3f8>
 80025b4:	4b5b      	ldr	r3, [pc, #364]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	061b      	lsls	r3, r3, #24
 80025c2:	4958      	ldr	r1, [pc, #352]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
 80025c8:	e018      	b.n	80025fc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025ca:	4b56      	ldr	r3, [pc, #344]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a55      	ldr	r2, [pc, #340]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d6:	f7fe fd4b 	bl	8001070 <HAL_GetTick>
 80025da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025de:	f7fe fd47 	bl	8001070 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e212      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025f0:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1f0      	bne.n	80025de <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	2b00      	cmp	r3, #0
 8002606:	d036      	beq.n	8002676 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d019      	beq.n	8002644 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002610:	4b44      	ldr	r3, [pc, #272]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002614:	4a43      	ldr	r2, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261c:	f7fe fd28 	bl	8001070 <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002624:	f7fe fd24 	bl	8001070 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e1ef      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002636:	4b3b      	ldr	r3, [pc, #236]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x420>
 8002642:	e018      	b.n	8002676 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002644:	4b37      	ldr	r3, [pc, #220]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002648:	4a36      	ldr	r2, [pc, #216]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002650:	f7fe fd0e 	bl	8001070 <HAL_GetTick>
 8002654:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002658:	f7fe fd0a 	bl	8001070 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e1d5      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800266a:	4b2e      	ldr	r3, [pc, #184]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 800266c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1f0      	bne.n	8002658 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	d036      	beq.n	80026f0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d019      	beq.n	80026be <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a25      	ldr	r2, [pc, #148]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 8002690:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002694:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002696:	f7fe fceb 	bl	8001070 <HAL_GetTick>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800269e:	f7fe fce7 	bl	8001070 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e1b2      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026b0:	4b1c      	ldr	r3, [pc, #112]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x49a>
 80026bc:	e018      	b.n	80026f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026be:	4b19      	ldr	r3, [pc, #100]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a18      	ldr	r2, [pc, #96]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80026c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026ca:	f7fe fcd1 	bl	8001070 <HAL_GetTick>
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026d2:	f7fe fccd 	bl	8001070 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e198      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026e4:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_RCC_OscConfig+0x520>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f0      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f000 8085 	beq.w	8002808 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_RCC_OscConfig+0x524>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x524>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002708:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800270a:	f7fe fcb1 	bl	8001070 <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002710:	e00c      	b.n	800272c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe fcad 	bl	8001070 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b64      	cmp	r3, #100	; 0x64
 800271e:	d905      	bls.n	800272c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e178      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
 8002724:	58024400 	.word	0x58024400
 8002728:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800272c:	4b96      	ldr	r3, [pc, #600]	; (8002988 <HAL_RCC_OscConfig+0x784>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0ec      	beq.n	8002712 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d106      	bne.n	800274e <HAL_RCC_OscConfig+0x54a>
 8002740:	4b92      	ldr	r3, [pc, #584]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	4a91      	ldr	r2, [pc, #580]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	6713      	str	r3, [r2, #112]	; 0x70
 800274c:	e02d      	b.n	80027aa <HAL_RCC_OscConfig+0x5a6>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d10c      	bne.n	8002770 <HAL_RCC_OscConfig+0x56c>
 8002756:	4b8d      	ldr	r3, [pc, #564]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800275a:	4a8c      	ldr	r2, [pc, #560]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800275c:	f023 0301 	bic.w	r3, r3, #1
 8002760:	6713      	str	r3, [r2, #112]	; 0x70
 8002762:	4b8a      	ldr	r3, [pc, #552]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002766:	4a89      	ldr	r2, [pc, #548]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002768:	f023 0304 	bic.w	r3, r3, #4
 800276c:	6713      	str	r3, [r2, #112]	; 0x70
 800276e:	e01c      	b.n	80027aa <HAL_RCC_OscConfig+0x5a6>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	2b05      	cmp	r3, #5
 8002776:	d10c      	bne.n	8002792 <HAL_RCC_OscConfig+0x58e>
 8002778:	4b84      	ldr	r3, [pc, #528]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800277c:	4a83      	ldr	r2, [pc, #524]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	; 0x70
 8002784:	4b81      	ldr	r3, [pc, #516]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	4a80      	ldr	r2, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800278a:	f043 0301 	orr.w	r3, r3, #1
 800278e:	6713      	str	r3, [r2, #112]	; 0x70
 8002790:	e00b      	b.n	80027aa <HAL_RCC_OscConfig+0x5a6>
 8002792:	4b7e      	ldr	r3, [pc, #504]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a7d      	ldr	r2, [pc, #500]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	4b7b      	ldr	r3, [pc, #492]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a7a      	ldr	r2, [pc, #488]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80027a4:	f023 0304 	bic.w	r3, r3, #4
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe fc5d 	bl	8001070 <HAL_GetTick>
 80027b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027b8:	e00a      	b.n	80027d0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ba:	f7fe fc59 	bl	8001070 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e122      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027d0:	4b6e      	ldr	r3, [pc, #440]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0ee      	beq.n	80027ba <HAL_RCC_OscConfig+0x5b6>
 80027dc:	e014      	b.n	8002808 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027de:	f7fe fc47 	bl	8001070 <HAL_GetTick>
 80027e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e4:	e00a      	b.n	80027fc <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027e6:	f7fe fc43 	bl	8001070 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e10c      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027fc:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ee      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 8101 	beq.w	8002a14 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002812:	4b5e      	ldr	r3, [pc, #376]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800281a:	2b18      	cmp	r3, #24
 800281c:	f000 80bc 	beq.w	8002998 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002824:	2b02      	cmp	r3, #2
 8002826:	f040 8095 	bne.w	8002954 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b58      	ldr	r3, [pc, #352]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a57      	ldr	r2, [pc, #348]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002830:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002834:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fc1b 	bl	8001070 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe fc17 	bl	8001070 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0e2      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002850:	4b4e      	ldr	r3, [pc, #312]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1f0      	bne.n	800283e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800285e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002860:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <HAL_RCC_OscConfig+0x78c>)
 8002862:	4013      	ands	r3, r2
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800286c:	0112      	lsls	r2, r2, #4
 800286e:	430a      	orrs	r2, r1
 8002870:	4946      	ldr	r1, [pc, #280]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002872:	4313      	orrs	r3, r2
 8002874:	628b      	str	r3, [r1, #40]	; 0x28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	3b01      	subs	r3, #1
 800287c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	3b01      	subs	r3, #1
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	b29b      	uxth	r3, r3
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002890:	3b01      	subs	r3, #1
 8002892:	041b      	lsls	r3, r3, #16
 8002894:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002898:	431a      	orrs	r2, r3
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	3b01      	subs	r3, #1
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028a6:	4939      	ldr	r1, [pc, #228]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80028ac:	4b37      	ldr	r3, [pc, #220]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b0:	4a36      	ldr	r2, [pc, #216]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028b2:	f023 0301 	bic.w	r3, r3, #1
 80028b6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028b8:	4b34      	ldr	r3, [pc, #208]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_RCC_OscConfig+0x790>)
 80028be:	4013      	ands	r3, r2
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028c4:	00d2      	lsls	r2, r2, #3
 80028c6:	4931      	ldr	r1, [pc, #196]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028cc:	4b2f      	ldr	r3, [pc, #188]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	f023 020c 	bic.w	r2, r3, #12
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	492c      	ldr	r1, [pc, #176]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028de:	4b2b      	ldr	r3, [pc, #172]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f023 0202 	bic.w	r2, r3, #2
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	4928      	ldr	r1, [pc, #160]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028f0:	4b26      	ldr	r3, [pc, #152]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	4a25      	ldr	r2, [pc, #148]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028fc:	4b23      	ldr	r3, [pc, #140]	; (800298c <HAL_RCC_OscConfig+0x788>)
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002906:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002908:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800290e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002918:	4a1c      	ldr	r2, [pc, #112]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b1a      	ldr	r3, [pc, #104]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fba0 	bl	8001070 <HAL_GetTick>
 8002930:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fb9c 	bl	8001070 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e067      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002946:	4b11      	ldr	r3, [pc, #68]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x730>
 8002952:	e05f      	b.n	8002a14 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_OscConfig+0x788>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0c      	ldr	r2, [pc, #48]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fb86 	bl	8001070 <HAL_GetTick>
 8002964:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fb82 	bl	8001070 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e04d      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_RCC_OscConfig+0x788>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x764>
 8002986:	e045      	b.n	8002a14 <HAL_RCC_OscConfig+0x810>
 8002988:	58024800 	.word	0x58024800
 800298c:	58024400 	.word	0x58024400
 8002990:	fffffc0c 	.word	0xfffffc0c
 8002994:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <HAL_RCC_OscConfig+0x81c>)
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800299e:	4b20      	ldr	r3, [pc, #128]	; (8002a20 <HAL_RCC_OscConfig+0x81c>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d031      	beq.n	8002a10 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f003 0203 	and.w	r2, r3, #3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d12a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d122      	bne.n	8002a10 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d11a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	0a5b      	lsrs	r3, r3, #9
 80029de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d111      	bne.n	8002a10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	0e1b      	lsrs	r3, r3, #24
 8002a02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3730      	adds	r7, #48	; 0x30
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	58024400 	.word	0x58024400

08002a24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e19c      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a38:	4b8a      	ldr	r3, [pc, #552]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d910      	bls.n	8002a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b87      	ldr	r3, [pc, #540]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 020f 	bic.w	r2, r3, #15
 8002a4e:	4985      	ldr	r1, [pc, #532]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b83      	ldr	r3, [pc, #524]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e184      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d010      	beq.n	8002a96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691a      	ldr	r2, [r3, #16]
 8002a78:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d908      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a84:	4b78      	ldr	r3, [pc, #480]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	4975      	ldr	r1, [pc, #468]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0308 	and.w	r3, r3, #8
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d010      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	4b70      	ldr	r3, [pc, #448]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d908      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ab2:	4b6d      	ldr	r3, [pc, #436]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	496a      	ldr	r1, [pc, #424]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d010      	beq.n	8002af2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	4b64      	ldr	r3, [pc, #400]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002ad6:	69db      	ldr	r3, [r3, #28]
 8002ad8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d908      	bls.n	8002af2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ae0:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	495e      	ldr	r1, [pc, #376]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d010      	beq.n	8002b20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	4b59      	ldr	r3, [pc, #356]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d908      	bls.n	8002b20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b0e:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	4953      	ldr	r1, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d010      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	4b4d      	ldr	r3, [pc, #308]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d908      	bls.n	8002b4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b3c:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f023 020f 	bic.w	r2, r3, #15
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4947      	ldr	r1, [pc, #284]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d055      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b5a:	4b43      	ldr	r3, [pc, #268]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	4940      	ldr	r1, [pc, #256]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d107      	bne.n	8002b84 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b74:	4b3c      	ldr	r3, [pc, #240]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d121      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0f6      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d107      	bne.n	8002b9c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b8c:	4b36      	ldr	r3, [pc, #216]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d115      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e0ea      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d107      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0de      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0d6      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bc4:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	f023 0207 	bic.w	r2, r3, #7
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4925      	ldr	r1, [pc, #148]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd6:	f7fe fa4b 	bl	8001070 <HAL_GetTick>
 8002bda:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bdc:	e00a      	b.n	8002bf4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bde:	f7fe fa47 	bl	8001070 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e0be      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf4:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d1eb      	bne.n	8002bde <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d010      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	4b14      	ldr	r3, [pc, #80]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d208      	bcs.n	8002c34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c22:	4b11      	ldr	r3, [pc, #68]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f023 020f 	bic.w	r2, r3, #15
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	490e      	ldr	r1, [pc, #56]	; (8002c68 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b0b      	ldr	r3, [pc, #44]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d214      	bcs.n	8002c6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 020f 	bic.w	r2, r3, #15
 8002c4a:	4906      	ldr	r1, [pc, #24]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b04      	ldr	r3, [pc, #16]	; (8002c64 <HAL_RCC_ClockConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d005      	beq.n	8002c6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e086      	b.n	8002d72 <HAL_RCC_ClockConfig+0x34e>
 8002c64:	52002000 	.word	0x52002000
 8002c68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0304 	and.w	r3, r3, #4
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d010      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	4b3f      	ldr	r3, [pc, #252]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d208      	bcs.n	8002c9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c88:	4b3c      	ldr	r3, [pc, #240]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	4939      	ldr	r1, [pc, #228]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	4b34      	ldr	r3, [pc, #208]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d208      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cb6:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	492e      	ldr	r1, [pc, #184]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0310 	and.w	r3, r3, #16
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699a      	ldr	r2, [r3, #24]
 8002cd8:	4b28      	ldr	r3, [pc, #160]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d208      	bcs.n	8002cf6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ce4:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	4922      	ldr	r1, [pc, #136]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0320 	and.w	r3, r3, #32
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69da      	ldr	r2, [r3, #28]
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d208      	bcs.n	8002d24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
 8002d1e:	4917      	ldr	r1, [pc, #92]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d24:	f000 f834 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 030f 	and.w	r3, r3, #15
 8002d34:	4912      	ldr	r1, [pc, #72]	; (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d42:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <HAL_RCC_ClockConfig+0x358>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	4a0d      	ldr	r2, [pc, #52]	; (8002d80 <HAL_RCC_ClockConfig+0x35c>)
 8002d4c:	5cd3      	ldrb	r3, [r2, r3]
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_RCC_ClockConfig+0x360>)
 8002d5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d5c:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <HAL_RCC_ClockConfig+0x364>)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d62:	4b0a      	ldr	r3, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x368>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f938 	bl	8000fdc <HAL_InitTick>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	58024400 	.word	0x58024400
 8002d80:	08006e34 	.word	0x08006e34
 8002d84:	20000004 	.word	0x20000004
 8002d88:	20000000 	.word	0x20000000
 8002d8c:	20000008 	.word	0x20000008

08002d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d96:	4bb3      	ldr	r3, [pc, #716]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d9e:	2b18      	cmp	r3, #24
 8002da0:	f200 8155 	bhi.w	800304e <HAL_RCC_GetSysClockFreq+0x2be>
 8002da4:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <HAL_RCC_GetSysClockFreq+0x1c>)
 8002da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002daa:	bf00      	nop
 8002dac:	08002e11 	.word	0x08002e11
 8002db0:	0800304f 	.word	0x0800304f
 8002db4:	0800304f 	.word	0x0800304f
 8002db8:	0800304f 	.word	0x0800304f
 8002dbc:	0800304f 	.word	0x0800304f
 8002dc0:	0800304f 	.word	0x0800304f
 8002dc4:	0800304f 	.word	0x0800304f
 8002dc8:	0800304f 	.word	0x0800304f
 8002dcc:	08002e37 	.word	0x08002e37
 8002dd0:	0800304f 	.word	0x0800304f
 8002dd4:	0800304f 	.word	0x0800304f
 8002dd8:	0800304f 	.word	0x0800304f
 8002ddc:	0800304f 	.word	0x0800304f
 8002de0:	0800304f 	.word	0x0800304f
 8002de4:	0800304f 	.word	0x0800304f
 8002de8:	0800304f 	.word	0x0800304f
 8002dec:	08002e3d 	.word	0x08002e3d
 8002df0:	0800304f 	.word	0x0800304f
 8002df4:	0800304f 	.word	0x0800304f
 8002df8:	0800304f 	.word	0x0800304f
 8002dfc:	0800304f 	.word	0x0800304f
 8002e00:	0800304f 	.word	0x0800304f
 8002e04:	0800304f 	.word	0x0800304f
 8002e08:	0800304f 	.word	0x0800304f
 8002e0c:	08002e43 	.word	0x08002e43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e10:	4b94      	ldr	r3, [pc, #592]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e1c:	4b91      	ldr	r3, [pc, #580]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	08db      	lsrs	r3, r3, #3
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	4a90      	ldr	r2, [pc, #576]	; (8003068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e2e:	e111      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e30:	4b8d      	ldr	r3, [pc, #564]	; (8003068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e32:	61bb      	str	r3, [r7, #24]
    break;
 8002e34:	e10e      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e36:	4b8d      	ldr	r3, [pc, #564]	; (800306c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e38:	61bb      	str	r3, [r7, #24]
    break;
 8002e3a:	e10b      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e3c:	4b8c      	ldr	r3, [pc, #560]	; (8003070 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e3e:	61bb      	str	r3, [r7, #24]
    break;
 8002e40:	e108      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e4c:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e58:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e62:	4b80      	ldr	r3, [pc, #512]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e66:	08db      	lsrs	r3, r3, #3
 8002e68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	ee07 3a90 	vmov	s15, r3
 8002e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80e1 	beq.w	8003048 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	f000 8083 	beq.w	8002f94 <HAL_RCC_GetSysClockFreq+0x204>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	f200 80a1 	bhi.w	8002fd8 <HAL_RCC_GetSysClockFreq+0x248>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d003      	beq.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x114>
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d056      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ea2:	e099      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea4:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d02d      	beq.n	8002f0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002eb0:	4b6c      	ldr	r3, [pc, #432]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	4a6b      	ldr	r2, [pc, #428]	; (8003068 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	ee07 3a90 	vmov	s15, r3
 8002ec8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eda:	4b62      	ldr	r3, [pc, #392]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002f0a:	e087      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003078 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f4e:	e065      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800307c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b40      	ldr	r3, [pc, #256]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f92:	e043      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003080 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	4b2f      	ldr	r3, [pc, #188]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd6:	e021      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800307c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff2:	ee07 3a90 	vmov	s15, r3
 8002ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003074 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800300e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800301a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	0a5b      	lsrs	r3, r3, #9
 8003022:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003026:	3301      	adds	r3, #1
 8003028:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	ee07 3a90 	vmov	s15, r3
 8003030:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003034:	edd7 6a07 	vldr	s13, [r7, #28]
 8003038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800303c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003040:	ee17 3a90 	vmov	r3, s15
 8003044:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003046:	e005      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    break;
 800304c:	e002      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800304e:	4b07      	ldr	r3, [pc, #28]	; (800306c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003050:	61bb      	str	r3, [r7, #24]
    break;
 8003052:	bf00      	nop
  }

  return sysclockfreq;
 8003054:	69bb      	ldr	r3, [r7, #24]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3724      	adds	r7, #36	; 0x24
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	58024400 	.word	0x58024400
 8003068:	03d09000 	.word	0x03d09000
 800306c:	003d0900 	.word	0x003d0900
 8003070:	017d7840 	.word	0x017d7840
 8003074:	46000000 	.word	0x46000000
 8003078:	4c742400 	.word	0x4c742400
 800307c:	4a742400 	.word	0x4a742400
 8003080:	4bbebc20 	.word	0x4bbebc20

08003084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800308a:	f7ff fe81 	bl	8002d90 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	490f      	ldr	r1, [pc, #60]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030a8:	4b0a      	ldr	r3, [pc, #40]	; (80030d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	4a09      	ldr	r2, [pc, #36]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80030b2:	5cd3      	ldrb	r3, [r2, r3]
 80030b4:	f003 031f 	and.w	r3, r3, #31
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	fa22 f303 	lsr.w	r3, r2, r3
 80030be:	4a07      	ldr	r2, [pc, #28]	; (80030dc <HAL_RCC_GetHCLKFreq+0x58>)
 80030c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030c2:	4a07      	ldr	r2, [pc, #28]	; (80030e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030c8:	4b04      	ldr	r3, [pc, #16]	; (80030dc <HAL_RCC_GetHCLKFreq+0x58>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	58024400 	.word	0x58024400
 80030d8:	08006e34 	.word	0x08006e34
 80030dc:	20000004 	.word	0x20000004
 80030e0:	20000000 	.word	0x20000000

080030e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030e8:	f7ff ffcc 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 80030ec:	4602      	mov	r2, r0
 80030ee:	4b06      	ldr	r3, [pc, #24]	; (8003108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	f003 0307 	and.w	r3, r3, #7
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <HAL_RCC_GetPCLK1Freq+0x28>)
 80030fa:	5ccb      	ldrb	r3, [r1, r3]
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003104:	4618      	mov	r0, r3
 8003106:	bd80      	pop	{r7, pc}
 8003108:	58024400 	.word	0x58024400
 800310c:	08006e34 	.word	0x08006e34

08003110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003114:	f7ff ffb6 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 8003118:	4602      	mov	r2, r0
 800311a:	4b06      	ldr	r3, [pc, #24]	; (8003134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	4904      	ldr	r1, [pc, #16]	; (8003138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003126:	5ccb      	ldrb	r3, [r1, r3]
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	58024400 	.word	0x58024400
 8003138:	08006e34 	.word	0x08006e34

0800313c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003144:	2300      	movs	r3, #0
 8003146:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003148:	2300      	movs	r3, #0
 800314a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d03f      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003160:	d02a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003162:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003166:	d824      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800316c:	d018      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800316e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003172:	d81e      	bhi.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003174:	2b00      	cmp	r3, #0
 8003176:	d003      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317c:	d007      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800317e:	e018      	b.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003180:	4bab      	ldr	r3, [pc, #684]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	4aaa      	ldr	r2, [pc, #680]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800318c:	e015      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	3304      	adds	r3, #4
 8003192:	2102      	movs	r1, #2
 8003194:	4618      	mov	r0, r3
 8003196:	f001 f9cf 	bl	8004538 <RCCEx_PLL2_Config>
 800319a:	4603      	mov	r3, r0
 800319c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800319e:	e00c      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3324      	adds	r3, #36	; 0x24
 80031a4:	2102      	movs	r1, #2
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 fa78 	bl	800469c <RCCEx_PLL3_Config>
 80031ac:	4603      	mov	r3, r0
 80031ae:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80031b0:	e003      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	75fb      	strb	r3, [r7, #23]
      break;
 80031b6:	e000      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031c0:	4b9b      	ldr	r3, [pc, #620]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031cc:	4998      	ldr	r1, [pc, #608]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	650b      	str	r3, [r1, #80]	; 0x50
 80031d2:	e001      	b.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d4:	7dfb      	ldrb	r3, [r7, #23]
 80031d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d03d      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d826      	bhi.n	800323a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003209 	.word	0x08003209
 80031f8:	08003217 	.word	0x08003217
 80031fc:	08003229 	.word	0x08003229
 8003200:	08003241 	.word	0x08003241
 8003204:	08003241 	.word	0x08003241
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003208:	4b89      	ldr	r3, [pc, #548]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320c:	4a88      	ldr	r2, [pc, #544]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800320e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003214:	e015      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	3304      	adds	r3, #4
 800321a:	2100      	movs	r1, #0
 800321c:	4618      	mov	r0, r3
 800321e:	f001 f98b 	bl	8004538 <RCCEx_PLL2_Config>
 8003222:	4603      	mov	r3, r0
 8003224:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003226:	e00c      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3324      	adds	r3, #36	; 0x24
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fa34 	bl	800469c <RCCEx_PLL3_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003238:	e003      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	75fb      	strb	r3, [r7, #23]
      break;
 800323e:	e000      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003242:	7dfb      	ldrb	r3, [r7, #23]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003248:	4b79      	ldr	r3, [pc, #484]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800324a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324c:	f023 0207 	bic.w	r2, r3, #7
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003254:	4976      	ldr	r1, [pc, #472]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003256:	4313      	orrs	r3, r2
 8003258:	650b      	str	r3, [r1, #80]	; 0x50
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7dfb      	ldrb	r3, [r7, #23]
 800325e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003268:	2b00      	cmp	r3, #0
 800326a:	d042      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003274:	d02b      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800327a:	d825      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800327c:	2bc0      	cmp	r3, #192	; 0xc0
 800327e:	d028      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003280:	2bc0      	cmp	r3, #192	; 0xc0
 8003282:	d821      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d016      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003288:	2b80      	cmp	r3, #128	; 0x80
 800328a:	d81d      	bhi.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d007      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003294:	e018      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329a:	4a65      	ldr	r2, [pc, #404]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800329c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032a2:	e017      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3304      	adds	r3, #4
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 f944 	bl	8004538 <RCCEx_PLL2_Config>
 80032b0:	4603      	mov	r3, r0
 80032b2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032b4:	e00e      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	3324      	adds	r3, #36	; 0x24
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 f9ed 	bl	800469c <RCCEx_PLL3_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032c6:	e005      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	75fb      	strb	r3, [r7, #23]
      break;
 80032cc:	e002      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d109      	bne.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032da:	4b55      	ldr	r3, [pc, #340]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032de:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e6:	4952      	ldr	r1, [pc, #328]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	650b      	str	r3, [r1, #80]	; 0x50
 80032ec:	e001      	b.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ee:	7dfb      	ldrb	r3, [r7, #23]
 80032f0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d049      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003308:	d030      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x230>
 800330a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800330e:	d82a      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003310:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003314:	d02c      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003316:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800331a:	d824      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800331c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003320:	d018      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d81e      	bhi.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800332c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003330:	d007      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8003332:	e018      	b.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003334:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003338:	4a3d      	ldr	r2, [pc, #244]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800333a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800333e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003340:	e017      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	3304      	adds	r3, #4
 8003346:	2100      	movs	r1, #0
 8003348:	4618      	mov	r0, r3
 800334a:	f001 f8f5 	bl	8004538 <RCCEx_PLL2_Config>
 800334e:	4603      	mov	r3, r0
 8003350:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003352:	e00e      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	3324      	adds	r3, #36	; 0x24
 8003358:	2100      	movs	r1, #0
 800335a:	4618      	mov	r0, r3
 800335c:	f001 f99e 	bl	800469c <RCCEx_PLL3_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003364:	e005      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	75fb      	strb	r3, [r7, #23]
      break;
 800336a:	e002      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10a      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800337a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003386:	492a      	ldr	r1, [pc, #168]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003388:	4313      	orrs	r3, r2
 800338a:	658b      	str	r3, [r1, #88]	; 0x58
 800338c:	e001      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338e:	7dfb      	ldrb	r3, [r7, #23]
 8003390:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800339a:	2b00      	cmp	r3, #0
 800339c:	d04c      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033a8:	d030      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80033aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ae:	d82a      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033b4:	d02c      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80033b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033ba:	d824      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c0:	d018      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033c6:	d81e      	bhi.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d0:	d007      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033d2:	e018      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d4:	4b16      	ldr	r3, [pc, #88]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	4a15      	ldr	r2, [pc, #84]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033e0:	e017      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3304      	adds	r3, #4
 80033e6:	2100      	movs	r1, #0
 80033e8:	4618      	mov	r0, r3
 80033ea:	f001 f8a5 	bl	8004538 <RCCEx_PLL2_Config>
 80033ee:	4603      	mov	r3, r0
 80033f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033f2:	e00e      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3324      	adds	r3, #36	; 0x24
 80033f8:	2100      	movs	r1, #0
 80033fa:	4618      	mov	r0, r3
 80033fc:	f001 f94e 	bl	800469c <RCCEx_PLL3_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003404:	e005      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800340c:	bf00      	nop
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8003410:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10d      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003418:	4b05      	ldr	r3, [pc, #20]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800341a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800341c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003426:	4902      	ldr	r1, [pc, #8]	; (8003430 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003428:	4313      	orrs	r3, r2
 800342a:	658b      	str	r3, [r1, #88]	; 0x58
 800342c:	e004      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800342e:	bf00      	nop
 8003430:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003434:	7dfb      	ldrb	r3, [r7, #23]
 8003436:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d032      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d01c      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d817      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d00c      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d813      	bhi.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d016      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d10f      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4baf      	ldr	r3, [pc, #700]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	4aae      	ldr	r2, [pc, #696]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800346c:	e00e      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3304      	adds	r3, #4
 8003472:	2102      	movs	r1, #2
 8003474:	4618      	mov	r0, r3
 8003476:	f001 f85f 	bl	8004538 <RCCEx_PLL2_Config>
 800347a:	4603      	mov	r3, r0
 800347c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800347e:	e005      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	75fb      	strb	r3, [r7, #23]
      break;
 8003484:	e002      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800348a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d109      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003492:	4ba3      	ldr	r3, [pc, #652]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003496:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800349e:	49a0      	ldr	r1, [pc, #640]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80034a4:	e001      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	7dfb      	ldrb	r3, [r7, #23]
 80034a8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d047      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034be:	d030      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80034c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c4:	d82a      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034ca:	d02c      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80034cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034d0:	d824      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034d6:	d018      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80034d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034dc:	d81e      	bhi.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e6:	d007      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80034e8:	e018      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ea:	4b8d      	ldr	r3, [pc, #564]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	4a8c      	ldr	r2, [pc, #560]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034f6:	e017      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3304      	adds	r3, #4
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f001 f81a 	bl	8004538 <RCCEx_PLL2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003508:	e00e      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	3324      	adds	r3, #36	; 0x24
 800350e:	2100      	movs	r1, #0
 8003510:	4618      	mov	r0, r3
 8003512:	f001 f8c3 	bl	800469c <RCCEx_PLL3_Config>
 8003516:	4603      	mov	r3, r0
 8003518:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800351a:	e005      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	75fb      	strb	r3, [r7, #23]
      break;
 8003520:	e002      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003522:	bf00      	nop
 8003524:	e000      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003526:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003528:	7dfb      	ldrb	r3, [r7, #23]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d109      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800352e:	4b7c      	ldr	r3, [pc, #496]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353a:	4979      	ldr	r1, [pc, #484]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	650b      	str	r3, [r1, #80]	; 0x50
 8003540:	e001      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	7dfb      	ldrb	r3, [r7, #23]
 8003544:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d049      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355a:	d02e      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800355c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003560:	d828      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003566:	d02a      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003568:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800356c:	d822      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800356e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003572:	d026      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003574:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003578:	d81c      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800357a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800357e:	d010      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8003580:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003584:	d816      	bhi.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01d      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d111      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	2101      	movs	r1, #1
 8003596:	4618      	mov	r0, r3
 8003598:	f000 ffce 	bl	8004538 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035a0:	e012      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	3324      	adds	r3, #36	; 0x24
 80035a6:	2101      	movs	r1, #1
 80035a8:	4618      	mov	r0, r3
 80035aa:	f001 f877 	bl	800469c <RCCEx_PLL3_Config>
 80035ae:	4603      	mov	r3, r0
 80035b0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80035b2:	e009      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035b4:	2301      	movs	r3, #1
 80035b6:	75fb      	strb	r3, [r7, #23]
      break;
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035ba:	bf00      	nop
 80035bc:	e004      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035be:	bf00      	nop
 80035c0:	e002      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035c8:	7dfb      	ldrb	r3, [r7, #23]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035ce:	4b54      	ldr	r3, [pc, #336]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035da:	4951      	ldr	r1, [pc, #324]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	650b      	str	r3, [r1, #80]	; 0x50
 80035e0:	e001      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d04b      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035fc:	d02e      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x520>
 80035fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003602:	d828      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003608:	d02a      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d822      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003610:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003614:	d026      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003616:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800361a:	d81c      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800361c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003620:	d010      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8003622:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003626:	d816      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01d      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800362c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003630:	d111      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3304      	adds	r3, #4
 8003636:	2101      	movs	r1, #1
 8003638:	4618      	mov	r0, r3
 800363a:	f000 ff7d 	bl	8004538 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003642:	e012      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	3324      	adds	r3, #36	; 0x24
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f826 	bl	800469c <RCCEx_PLL3_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003654:	e009      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	75fb      	strb	r3, [r7, #23]
      break;
 800365a:	e006      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800365c:	bf00      	nop
 800365e:	e004      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003660:	bf00      	nop
 8003662:	e002      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003664:	bf00      	nop
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003668:	bf00      	nop
    }

    if(ret == HAL_OK)
 800366a:	7dfb      	ldrb	r3, [r7, #23]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003674:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800367e:	4928      	ldr	r1, [pc, #160]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	658b      	str	r3, [r1, #88]	; 0x58
 8003684:	e001      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d02f      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369e:	d00e      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x582>
 80036a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a4:	d814      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80036aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036ae:	d10f      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b0:	4b1b      	ldr	r3, [pc, #108]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b4:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036bc:	e00c      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	3304      	adds	r3, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f000 ff37 	bl	8004538 <RCCEx_PLL2_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	75fb      	strb	r3, [r7, #23]
      break;
 80036d4:	e000      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80036d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036d8:	7dfb      	ldrb	r3, [r7, #23]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d109      	bne.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036ea:	490d      	ldr	r1, [pc, #52]	; (8003720 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	650b      	str	r3, [r1, #80]	; 0x50
 80036f0:	e001      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f2:	7dfb      	ldrb	r3, [r7, #23]
 80036f4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d033      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	2b03      	cmp	r3, #3
 8003708:	d81c      	bhi.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800370a:	a201      	add	r2, pc, #4	; (adr r2, 8003710 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800370c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003710:	0800374b 	.word	0x0800374b
 8003714:	08003725 	.word	0x08003725
 8003718:	08003733 	.word	0x08003733
 800371c:	0800374b 	.word	0x0800374b
 8003720:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003724:	4bb8      	ldr	r3, [pc, #736]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	4ab7      	ldr	r2, [pc, #732]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800372a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003730:	e00c      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	3304      	adds	r3, #4
 8003736:	2102      	movs	r1, #2
 8003738:	4618      	mov	r0, r3
 800373a:	f000 fefd 	bl	8004538 <RCCEx_PLL2_Config>
 800373e:	4603      	mov	r3, r0
 8003740:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003742:	e003      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	75fb      	strb	r3, [r7, #23]
      break;
 8003748:	e000      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800374a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800374c:	7dfb      	ldrb	r3, [r7, #23]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003752:	4bad      	ldr	r3, [pc, #692]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	f023 0203 	bic.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375e:	49aa      	ldr	r1, [pc, #680]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003760:	4313      	orrs	r3, r2
 8003762:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003764:	e001      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	7dfb      	ldrb	r3, [r7, #23]
 8003768:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8086 	beq.w	8003884 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003778:	4ba4      	ldr	r3, [pc, #656]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4aa3      	ldr	r2, [pc, #652]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003784:	f7fd fc74 	bl	8001070 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378a:	e009      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800378c:	f7fd fc70 	bl	8001070 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b64      	cmp	r3, #100	; 0x64
 8003798:	d902      	bls.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	75fb      	strb	r3, [r7, #23]
        break;
 800379e:	e005      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037a0:	4b9a      	ldr	r3, [pc, #616]	; (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d166      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80037b2:	4b95      	ldr	r3, [pc, #596]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037bc:	4053      	eors	r3, r2
 80037be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037c6:	4b90      	ldr	r3, [pc, #576]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ce:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037d0:	4b8d      	ldr	r3, [pc, #564]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d4:	4a8c      	ldr	r2, [pc, #560]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037da:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037dc:	4b8a      	ldr	r3, [pc, #552]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e0:	4a89      	ldr	r2, [pc, #548]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037e8:	4a87      	ldr	r2, [pc, #540]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037f8:	d115      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fd fc39 	bl	8001070 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003800:	e00b      	b.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fd fc35 	bl	8001070 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d902      	bls.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	75fb      	strb	r3, [r7, #23]
            break;
 8003818:	e005      	b.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800381a:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0ed      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d126      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800383a:	d10d      	bne.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800384a:	0919      	lsrs	r1, r3, #4
 800384c:	4b70      	ldr	r3, [pc, #448]	; (8003a10 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800384e:	400b      	ands	r3, r1
 8003850:	496d      	ldr	r1, [pc, #436]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	610b      	str	r3, [r1, #16]
 8003856:	e005      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003858:	4b6b      	ldr	r3, [pc, #428]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	4a6a      	ldr	r2, [pc, #424]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800385e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003862:	6113      	str	r3, [r2, #16]
 8003864:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003866:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800386e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003872:	4965      	ldr	r1, [pc, #404]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003874:	4313      	orrs	r3, r2
 8003876:	670b      	str	r3, [r1, #112]	; 0x70
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	75bb      	strb	r3, [r7, #22]
 800387e:	e001      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	7dfb      	ldrb	r3, [r7, #23]
 8003882:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d07e      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003894:	2b28      	cmp	r3, #40	; 0x28
 8003896:	d867      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003898:	a201      	add	r2, pc, #4	; (adr r2, 80038a0 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	0800396f 	.word	0x0800396f
 80038a4:	08003969 	.word	0x08003969
 80038a8:	08003969 	.word	0x08003969
 80038ac:	08003969 	.word	0x08003969
 80038b0:	08003969 	.word	0x08003969
 80038b4:	08003969 	.word	0x08003969
 80038b8:	08003969 	.word	0x08003969
 80038bc:	08003969 	.word	0x08003969
 80038c0:	08003945 	.word	0x08003945
 80038c4:	08003969 	.word	0x08003969
 80038c8:	08003969 	.word	0x08003969
 80038cc:	08003969 	.word	0x08003969
 80038d0:	08003969 	.word	0x08003969
 80038d4:	08003969 	.word	0x08003969
 80038d8:	08003969 	.word	0x08003969
 80038dc:	08003969 	.word	0x08003969
 80038e0:	08003957 	.word	0x08003957
 80038e4:	08003969 	.word	0x08003969
 80038e8:	08003969 	.word	0x08003969
 80038ec:	08003969 	.word	0x08003969
 80038f0:	08003969 	.word	0x08003969
 80038f4:	08003969 	.word	0x08003969
 80038f8:	08003969 	.word	0x08003969
 80038fc:	08003969 	.word	0x08003969
 8003900:	0800396f 	.word	0x0800396f
 8003904:	08003969 	.word	0x08003969
 8003908:	08003969 	.word	0x08003969
 800390c:	08003969 	.word	0x08003969
 8003910:	08003969 	.word	0x08003969
 8003914:	08003969 	.word	0x08003969
 8003918:	08003969 	.word	0x08003969
 800391c:	08003969 	.word	0x08003969
 8003920:	0800396f 	.word	0x0800396f
 8003924:	08003969 	.word	0x08003969
 8003928:	08003969 	.word	0x08003969
 800392c:	08003969 	.word	0x08003969
 8003930:	08003969 	.word	0x08003969
 8003934:	08003969 	.word	0x08003969
 8003938:	08003969 	.word	0x08003969
 800393c:	08003969 	.word	0x08003969
 8003940:	0800396f 	.word	0x0800396f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f000 fdf4 	bl	8004538 <RCCEx_PLL2_Config>
 8003950:	4603      	mov	r3, r0
 8003952:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003954:	e00c      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	3324      	adds	r3, #36	; 0x24
 800395a:	2101      	movs	r1, #1
 800395c:	4618      	mov	r0, r3
 800395e:	f000 fe9d 	bl	800469c <RCCEx_PLL3_Config>
 8003962:	4603      	mov	r3, r0
 8003964:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003966:	e003      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	75fb      	strb	r3, [r7, #23]
      break;
 800396c:	e000      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800396e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003970:	7dfb      	ldrb	r3, [r7, #23]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003976:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800397a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003982:	4921      	ldr	r1, [pc, #132]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003984:	4313      	orrs	r3, r2
 8003986:	654b      	str	r3, [r1, #84]	; 0x54
 8003988:	e001      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398a:	7dfb      	ldrb	r3, [r7, #23]
 800398c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03e      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800399e:	2b05      	cmp	r3, #5
 80039a0:	d820      	bhi.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039eb 	.word	0x080039eb
 80039ac:	080039c1 	.word	0x080039c1
 80039b0:	080039d3 	.word	0x080039d3
 80039b4:	080039eb 	.word	0x080039eb
 80039b8:	080039eb 	.word	0x080039eb
 80039bc:	080039eb 	.word	0x080039eb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3304      	adds	r3, #4
 80039c4:	2101      	movs	r1, #1
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fdb6 	bl	8004538 <RCCEx_PLL2_Config>
 80039cc:	4603      	mov	r3, r0
 80039ce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039d0:	e00c      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3324      	adds	r3, #36	; 0x24
 80039d6:	2101      	movs	r1, #1
 80039d8:	4618      	mov	r0, r3
 80039da:	f000 fe5f 	bl	800469c <RCCEx_PLL3_Config>
 80039de:	4603      	mov	r3, r0
 80039e0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039e2:	e003      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
      break;
 80039e8:	e000      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80039ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ec:	7dfb      	ldrb	r3, [r7, #23]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d110      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039f2:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039f6:	f023 0207 	bic.w	r2, r3, #7
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039fe:	4902      	ldr	r1, [pc, #8]	; (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	654b      	str	r3, [r1, #84]	; 0x54
 8003a04:	e008      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8003a06:	bf00      	nop
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	58024800 	.word	0x58024800
 8003a10:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a14:	7dfb      	ldrb	r3, [r7, #23]
 8003a16:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d039      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d820      	bhi.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003a2e:	a201      	add	r2, pc, #4	; (adr r2, 8003a34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a77 	.word	0x08003a77
 8003a38:	08003a4d 	.word	0x08003a4d
 8003a3c:	08003a5f 	.word	0x08003a5f
 8003a40:	08003a77 	.word	0x08003a77
 8003a44:	08003a77 	.word	0x08003a77
 8003a48:	08003a77 	.word	0x08003a77
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 fd70 	bl	8004538 <RCCEx_PLL2_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a5c:	e00c      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	3324      	adds	r3, #36	; 0x24
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f000 fe19 	bl	800469c <RCCEx_PLL3_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a6e:	e003      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	75fb      	strb	r3, [r7, #23]
      break;
 8003a74:	e000      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10a      	bne.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a7e:	4bb7      	ldr	r3, [pc, #732]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	f023 0207 	bic.w	r2, r3, #7
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	49b3      	ldr	r1, [pc, #716]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	658b      	str	r3, [r1, #88]	; 0x58
 8003a92:	e001      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 0320 	and.w	r3, r3, #32
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d04b      	beq.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aae:	d02e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab4:	d828      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aba:	d02a      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d822      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ac2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ac6:	d026      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003ac8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003acc:	d81c      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad2:	d010      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad8:	d816      	bhi.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01d      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003ade:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ae2:	d111      	bne.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fd24 	bl	8004538 <RCCEx_PLL2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003af4:	e012      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3324      	adds	r3, #36	; 0x24
 8003afa:	2102      	movs	r1, #2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fdcd 	bl	800469c <RCCEx_PLL3_Config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003b06:	e009      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	e006      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e004      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b22:	4b8e      	ldr	r3, [pc, #568]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b30:	498a      	ldr	r1, [pc, #552]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	654b      	str	r3, [r1, #84]	; 0x54
 8003b36:	e001      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d04b      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b4e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b52:	d02e      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003b54:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b58:	d828      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5e:	d02a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d822      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b6a:	d026      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b70:	d81c      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b76:	d010      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7c:	d816      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01d      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b86:	d111      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fcd2 	bl	8004538 <RCCEx_PLL2_Config>
 8003b94:	4603      	mov	r3, r0
 8003b96:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b98:	e012      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3324      	adds	r3, #36	; 0x24
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f000 fd7b 	bl	800469c <RCCEx_PLL3_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003baa:	e009      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb0:	e006      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e002      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003bba:	bf00      	nop
 8003bbc:	e000      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003bbe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bc0:	7dfb      	ldrb	r3, [r7, #23]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bc6:	4b65      	ldr	r3, [pc, #404]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	4961      	ldr	r1, [pc, #388]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	658b      	str	r3, [r1, #88]	; 0x58
 8003bda:	e001      	b.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	7dfb      	ldrb	r3, [r7, #23]
 8003bde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d04b      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bf2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bf6:	d02e      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003bf8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003bfc:	d828      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c02:	d02a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c08:	d822      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c0a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c0e:	d026      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003c10:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c14:	d81c      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c1a:	d010      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c20:	d816      	bhi.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01d      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c2a:	d111      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	2100      	movs	r1, #0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fc80 	bl	8004538 <RCCEx_PLL2_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c3c:	e012      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3324      	adds	r3, #36	; 0x24
 8003c42:	2102      	movs	r1, #2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fd29 	bl	800469c <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c4e:	e009      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	75fb      	strb	r3, [r7, #23]
      break;
 8003c54:	e006      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c56:	bf00      	nop
 8003c58:	e004      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c64:	7dfb      	ldrb	r3, [r7, #23]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c6a:	4b3c      	ldr	r3, [pc, #240]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c78:	4938      	ldr	r1, [pc, #224]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c7e:	e001      	b.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	7dfb      	ldrb	r3, [r7, #23]
 8003c82:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d01a      	beq.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3324      	adds	r3, #36	; 0x24
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fcfa 	bl	800469c <RCCEx_PLL3_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003cb2:	4b2a      	ldr	r3, [pc, #168]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cc0:	4926      	ldr	r1, [pc, #152]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01a      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	3324      	adds	r3, #36	; 0x24
 8003ce2:	2102      	movs	r1, #2
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fcd9 	bl	800469c <RCCEx_PLL3_Config>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d02:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003d04:	4313      	orrs	r3, r2
 8003d06:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d036      	beq.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d1e:	d01f      	beq.n	8003d60 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d20:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d24:	d817      	bhi.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2e:	d009      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003d30:	e011      	b.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	3304      	adds	r3, #4
 8003d36:	2100      	movs	r1, #0
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 fbfd 	bl	8004538 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d42:	e00e      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	2102      	movs	r1, #2
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fca6 	bl	800469c <RCCEx_PLL3_Config>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d54:	e005      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	75fb      	strb	r3, [r7, #23]
      break;
 8003d5a:	e002      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003d5c:	58024400 	.word	0x58024400
      break;
 8003d60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10a      	bne.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d68:	4b93      	ldr	r3, [pc, #588]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d76:	4990      	ldr	r1, [pc, #576]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	658b      	str	r3, [r1, #88]	; 0x58
 8003d7c:	e001      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d033      	beq.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d98:	d01c      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d9e:	d816      	bhi.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003da4:	d003      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003daa:	d007      	beq.n	8003dbc <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dae:	4b82      	ldr	r3, [pc, #520]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db2:	4a81      	ldr	r2, [pc, #516]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003db4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dba:	e00c      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3324      	adds	r3, #36	; 0x24
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fc6a 	bl	800469c <RCCEx_PLL3_Config>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003dcc:	e003      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd2:	e000      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dd6:	7dfb      	ldrb	r3, [r7, #23]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ddc:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dea:	4973      	ldr	r1, [pc, #460]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	654b      	str	r3, [r1, #84]	; 0x54
 8003df0:	e001      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
 8003df4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d029      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0e:	d007      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003e10:	e00f      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e12:	4b69      	ldr	r3, [pc, #420]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e16:	4a68      	ldr	r2, [pc, #416]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e1e:	e00b      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	2102      	movs	r1, #2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fb86 	bl	8004538 <RCCEx_PLL2_Config>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
      break;
 8003e36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e38:	7dfb      	ldrb	r3, [r7, #23]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d109      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e3e:	4b5e      	ldr	r3, [pc, #376]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e4a:	495b      	ldr	r1, [pc, #364]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e50:	e001      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00a      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3324      	adds	r3, #36	; 0x24
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fc17 	bl	800469c <RCCEx_PLL3_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d030      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e8c:	d017      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e92:	d811      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d013      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e9e:	d80b      	bhi.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d010      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003ea4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea8:	d106      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eaa:	4b43      	ldr	r3, [pc, #268]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eae:	4a42      	ldr	r2, [pc, #264]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003eb6:	e007      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	75fb      	strb	r3, [r7, #23]
      break;
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e002      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d109      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ece:	4b3a      	ldr	r3, [pc, #232]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eda:	4937      	ldr	r1, [pc, #220]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	654b      	str	r3, [r1, #84]	; 0x54
 8003ee0:	e001      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d008      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ef2:	4b31      	ldr	r3, [pc, #196]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efe:	492e      	ldr	r1, [pc, #184]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003f10:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f1e:	4926      	ldr	r1, [pc, #152]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f30:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f3c:	491e      	ldr	r1, [pc, #120]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f4e:	4b1a      	ldr	r3, [pc, #104]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4a19      	ldr	r2, [pc, #100]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f58:	6113      	str	r3, [r2, #16]
 8003f5a:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f5c:	691a      	ldr	r2, [r3, #16]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f64:	4914      	ldr	r1, [pc, #80]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	da08      	bge.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f72:	4b11      	ldr	r3, [pc, #68]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f7e:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f90:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9e:	4906      	ldr	r1, [pc, #24]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003fa4:	7dbb      	ldrb	r3, [r7, #22]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	58024400 	.word	0x58024400

08003fbc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fc0:	f7ff f860 	bl	8003084 <HAL_RCC_GetHCLKFreq>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	4b06      	ldr	r3, [pc, #24]	; (8003fe0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	091b      	lsrs	r3, r3, #4
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	4904      	ldr	r1, [pc, #16]	; (8003fe4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fd2:	5ccb      	ldrb	r3, [r1, r3]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	58024400 	.word	0x58024400
 8003fe4:	08006e34 	.word	0x08006e34

08003fe8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b089      	sub	sp, #36	; 0x24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ff0:	4ba1      	ldr	r3, [pc, #644]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003ffa:	4b9f      	ldr	r3, [pc, #636]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffe:	0b1b      	lsrs	r3, r3, #12
 8004000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004004:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004006:	4b9c      	ldr	r3, [pc, #624]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400a:	091b      	lsrs	r3, r3, #4
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004012:	4b99      	ldr	r3, [pc, #612]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	fb02 f303 	mul.w	r3, r2, r3
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800402a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8111 	beq.w	8004258 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b02      	cmp	r3, #2
 800403a:	f000 8083 	beq.w	8004144 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b02      	cmp	r3, #2
 8004042:	f200 80a1 	bhi.w	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d056      	beq.n	8004100 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004052:	e099      	b.n	8004188 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004054:	4b88      	ldr	r3, [pc, #544]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d02d      	beq.n	80040bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004060:	4b85      	ldr	r3, [pc, #532]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	08db      	lsrs	r3, r3, #3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	4a84      	ldr	r2, [pc, #528]	; (800427c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	ee07 3a90 	vmov	s15, r3
 8004078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408a:	4b7b      	ldr	r3, [pc, #492]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409a:	ed97 6a03 	vldr	s12, [r7, #12]
 800409e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040ba:	e087      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	ee07 3a90 	vmov	s15, r3
 80040c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004284 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ce:	4b6a      	ldr	r3, [pc, #424]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040d6:	ee07 3a90 	vmov	s15, r3
 80040da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040de:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040fe:	e065      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	ee07 3a90 	vmov	s15, r3
 8004106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800410e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004112:	4b59      	ldr	r3, [pc, #356]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411a:	ee07 3a90 	vmov	s15, r3
 800411e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004122:	ed97 6a03 	vldr	s12, [r7, #12]
 8004126:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800412a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800412e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004142:	e043      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	ee07 3a90 	vmov	s15, r3
 800414a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800414e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800428c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415e:	ee07 3a90 	vmov	s15, r3
 8004162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004166:	ed97 6a03 	vldr	s12, [r7, #12]
 800416a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800416e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800417a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800417e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004186:	e021      	b.n	80041cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	ee07 3a90 	vmov	s15, r3
 800418e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004192:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800419a:	4b37      	ldr	r3, [pc, #220]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004280 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80041cc:	4b2a      	ldr	r3, [pc, #168]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	0a5b      	lsrs	r3, r3, #9
 80041d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d6:	ee07 3a90 	vmov	s15, r3
 80041da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041f2:	ee17 2a90 	vmov	r2, s15
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80041fa:	4b1f      	ldr	r3, [pc, #124]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041fe:	0c1b      	lsrs	r3, r3, #16
 8004200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004204:	ee07 3a90 	vmov	s15, r3
 8004208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004210:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004214:	edd7 6a07 	vldr	s13, [r7, #28]
 8004218:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800421c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004220:	ee17 2a90 	vmov	r2, s15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004228:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800422a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800422c:	0e1b      	lsrs	r3, r3, #24
 800422e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800423e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004242:	edd7 6a07 	vldr	s13, [r7, #28]
 8004246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800424a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800424e:	ee17 2a90 	vmov	r2, s15
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004256:	e008      	b.n	800426a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
}
 800426a:	bf00      	nop
 800426c:	3724      	adds	r7, #36	; 0x24
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	58024400 	.word	0x58024400
 800427c:	03d09000 	.word	0x03d09000
 8004280:	46000000 	.word	0x46000000
 8004284:	4c742400 	.word	0x4c742400
 8004288:	4a742400 	.word	0x4a742400
 800428c:	4bbebc20 	.word	0x4bbebc20

08004290 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004298:	4ba1      	ldr	r3, [pc, #644]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80042a2:	4b9f      	ldr	r3, [pc, #636]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042a6:	0d1b      	lsrs	r3, r3, #20
 80042a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80042ae:	4b9c      	ldr	r3, [pc, #624]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b2:	0a1b      	lsrs	r3, r3, #8
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80042ba:	4b99      	ldr	r3, [pc, #612]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042be:	08db      	lsrs	r3, r3, #3
 80042c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	fb02 f303 	mul.w	r3, r2, r3
 80042ca:	ee07 3a90 	vmov	s15, r3
 80042ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8111 	beq.w	8004500 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	f000 8083 	beq.w	80043ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	f200 80a1 	bhi.w	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d056      	beq.n	80043a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042fa:	e099      	b.n	8004430 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042fc:	4b88      	ldr	r3, [pc, #544]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02d      	beq.n	8004364 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004308:	4b85      	ldr	r3, [pc, #532]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	08db      	lsrs	r3, r3, #3
 800430e:	f003 0303 	and.w	r3, r3, #3
 8004312:	4a84      	ldr	r2, [pc, #528]	; (8004524 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
 8004318:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	ee07 3a90 	vmov	s15, r3
 8004320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800432e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004332:	4b7b      	ldr	r3, [pc, #492]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800433a:	ee07 3a90 	vmov	s15, r3
 800433e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004342:	ed97 6a03 	vldr	s12, [r7, #12]
 8004346:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800434a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800434e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800435a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800435e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004362:	e087      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	ee07 3a90 	vmov	s15, r3
 800436a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800452c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004376:	4b6a      	ldr	r3, [pc, #424]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800437e:	ee07 3a90 	vmov	s15, r3
 8004382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004386:	ed97 6a03 	vldr	s12, [r7, #12]
 800438a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800438e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800439a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800439e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043a6:	e065      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	ee07 3a90 	vmov	s15, r3
 80043ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ba:	4b59      	ldr	r3, [pc, #356]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043ea:	e043      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	ee07 3a90 	vmov	s15, r3
 80043f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043fe:	4b48      	ldr	r3, [pc, #288]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004406:	ee07 3a90 	vmov	s15, r3
 800440a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800440e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004412:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800441a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800441e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800442e:	e021      	b.n	8004474 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	ee07 3a90 	vmov	s15, r3
 8004436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800443a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800443e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004442:	4b37      	ldr	r3, [pc, #220]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800444a:	ee07 3a90 	vmov	s15, r3
 800444e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004452:	ed97 6a03 	vldr	s12, [r7, #12]
 8004456:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004528 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800445a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800445e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004462:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800446a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800446e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004472:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004474:	4b2a      	ldr	r3, [pc, #168]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	0a5b      	lsrs	r3, r3, #9
 800447a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800447e:	ee07 3a90 	vmov	s15, r3
 8004482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004486:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800448a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800448e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004492:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004496:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800449a:	ee17 2a90 	vmov	r2, s15
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80044a2:	4b1f      	ldr	r3, [pc, #124]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	0c1b      	lsrs	r3, r3, #16
 80044a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044ac:	ee07 3a90 	vmov	s15, r3
 80044b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80044c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044c8:	ee17 2a90 	vmov	r2, s15
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80044d0:	4b13      	ldr	r3, [pc, #76]	; (8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	0e1b      	lsrs	r3, r3, #24
 80044d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044f6:	ee17 2a90 	vmov	r2, s15
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044fe:	e008      	b.n	8004512 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	609a      	str	r2, [r3, #8]
}
 8004512:	bf00      	nop
 8004514:	3724      	adds	r7, #36	; 0x24
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	58024400 	.word	0x58024400
 8004524:	03d09000 	.word	0x03d09000
 8004528:	46000000 	.word	0x46000000
 800452c:	4c742400 	.word	0x4c742400
 8004530:	4a742400 	.word	0x4a742400
 8004534:	4bbebc20 	.word	0x4bbebc20

08004538 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004546:	4b53      	ldr	r3, [pc, #332]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b03      	cmp	r3, #3
 8004550:	d101      	bne.n	8004556 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e099      	b.n	800468a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004556:	4b4f      	ldr	r3, [pc, #316]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4e      	ldr	r2, [pc, #312]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800455c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004562:	f7fc fd85 	bl	8001070 <HAL_GetTick>
 8004566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004568:	e008      	b.n	800457c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800456a:	f7fc fd81 	bl	8001070 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d901      	bls.n	800457c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e086      	b.n	800468a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800457c:	4b45      	ldr	r3, [pc, #276]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f0      	bne.n	800456a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004588:	4b42      	ldr	r3, [pc, #264]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800458a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	031b      	lsls	r3, r3, #12
 8004596:	493f      	ldr	r1, [pc, #252]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	628b      	str	r3, [r1, #40]	; 0x28
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	3b01      	subs	r3, #1
 80045a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	025b      	lsls	r3, r3, #9
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	431a      	orrs	r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	061b      	lsls	r3, r3, #24
 80045c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045cc:	4931      	ldr	r1, [pc, #196]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045d2:	4b30      	ldr	r3, [pc, #192]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	492d      	ldr	r1, [pc, #180]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	f023 0220 	bic.w	r2, r3, #32
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	4928      	ldr	r1, [pc, #160]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045f6:	4b27      	ldr	r3, [pc, #156]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4a26      	ldr	r2, [pc, #152]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 80045fc:	f023 0310 	bic.w	r3, r3, #16
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004606:	4b24      	ldr	r3, [pc, #144]	; (8004698 <RCCEx_PLL2_Config+0x160>)
 8004608:	4013      	ands	r3, r2
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	69d2      	ldr	r2, [r2, #28]
 800460e:	00d2      	lsls	r2, r2, #3
 8004610:	4920      	ldr	r1, [pc, #128]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004612:	4313      	orrs	r3, r2
 8004614:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004616:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461a:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800461c:	f043 0310 	orr.w	r3, r3, #16
 8004620:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004628:	4b1a      	ldr	r3, [pc, #104]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800462e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004632:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004634:	e00f      	b.n	8004656 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d106      	bne.n	800464a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800463c:	4b15      	ldr	r3, [pc, #84]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004640:	4a14      	ldr	r2, [pc, #80]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004646:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004648:	e005      	b.n	8004656 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800464a:	4b12      	ldr	r3, [pc, #72]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	4a11      	ldr	r2, [pc, #68]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004650:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004654:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004656:	4b0f      	ldr	r3, [pc, #60]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a0e      	ldr	r2, [pc, #56]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800465c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004662:	f7fc fd05 	bl	8001070 <HAL_GetTick>
 8004666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004668:	e008      	b.n	800467c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800466a:	f7fc fd01 	bl	8001070 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e006      	b.n	800468a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <RCCEx_PLL2_Config+0x15c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d0f0      	beq.n	800466a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	58024400 	.word	0x58024400
 8004698:	ffff0007 	.word	0xffff0007

0800469c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a6:	2300      	movs	r3, #0
 80046a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80046aa:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	2b03      	cmp	r3, #3
 80046b4:	d101      	bne.n	80046ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e099      	b.n	80047ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046ba:	4b4f      	ldr	r3, [pc, #316]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a4e      	ldr	r2, [pc, #312]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046c6:	f7fc fcd3 	bl	8001070 <HAL_GetTick>
 80046ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046cc:	e008      	b.n	80046e0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046ce:	f7fc fccf 	bl	8001070 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e086      	b.n	80047ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046e0:	4b45      	ldr	r3, [pc, #276]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1f0      	bne.n	80046ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	051b      	lsls	r3, r3, #20
 80046fa:	493f      	ldr	r1, [pc, #252]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	3b01      	subs	r3, #1
 8004706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	3b01      	subs	r3, #1
 8004710:	025b      	lsls	r3, r3, #9
 8004712:	b29b      	uxth	r3, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	3b01      	subs	r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	3b01      	subs	r3, #1
 800472a:	061b      	lsls	r3, r3, #24
 800472c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004730:	4931      	ldr	r1, [pc, #196]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004732:	4313      	orrs	r3, r2
 8004734:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004736:	4b30      	ldr	r3, [pc, #192]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	492d      	ldr	r1, [pc, #180]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004748:	4b2b      	ldr	r3, [pc, #172]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	699b      	ldr	r3, [r3, #24]
 8004754:	4928      	ldr	r1, [pc, #160]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004756:	4313      	orrs	r3, r2
 8004758:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800475a:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	4a26      	ldr	r2, [pc, #152]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004764:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004766:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800476a:	4b24      	ldr	r3, [pc, #144]	; (80047fc <RCCEx_PLL3_Config+0x160>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	69d2      	ldr	r2, [r2, #28]
 8004772:	00d2      	lsls	r2, r2, #3
 8004774:	4920      	ldr	r1, [pc, #128]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004776:	4313      	orrs	r3, r2
 8004778:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800477a:	4b1f      	ldr	r3, [pc, #124]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4a1e      	ldr	r2, [pc, #120]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 8004792:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004796:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004798:	e00f      	b.n	80047ba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d106      	bne.n	80047ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80047a0:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047ac:	e005      	b.n	80047ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80047ae:	4b12      	ldr	r3, [pc, #72]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	4a11      	ldr	r2, [pc, #68]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047ba:	4b0f      	ldr	r3, [pc, #60]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a0e      	ldr	r2, [pc, #56]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c6:	f7fc fc53 	bl	8001070 <HAL_GetTick>
 80047ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047cc:	e008      	b.n	80047e0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047ce:	f7fc fc4f 	bl	8001070 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e006      	b.n	80047ee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <RCCEx_PLL3_Config+0x15c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d0f0      	beq.n	80047ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	58024400 	.word	0x58024400
 80047fc:	ffff0007 	.word	0xffff0007

08004800 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_length;
#else
  uint32_t crc_length = 0UL;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
#endif
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e0eb      	b.n	80049ee <HAL_SPI_Init+0x1ee>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a75      	ldr	r2, [pc, #468]	; (80049f8 <HAL_SPI_Init+0x1f8>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00f      	beq.n	8004846 <HAL_SPI_Init+0x46>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a74      	ldr	r2, [pc, #464]	; (80049fc <HAL_SPI_Init+0x1fc>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d00a      	beq.n	8004846 <HAL_SPI_Init+0x46>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a72      	ldr	r2, [pc, #456]	; (8004a00 <HAL_SPI_Init+0x200>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d005      	beq.n	8004846 <HAL_SPI_Init+0x46>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b0f      	cmp	r3, #15
 8004840:	d901      	bls.n	8004846 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e0d3      	b.n	80049ee <HAL_SPI_Init+0x1ee>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fe88 	bl	800555c <SPI_GetPacketSize>
 800484c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a69      	ldr	r2, [pc, #420]	; (80049f8 <HAL_SPI_Init+0x1f8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d00c      	beq.n	8004872 <HAL_SPI_Init+0x72>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a67      	ldr	r2, [pc, #412]	; (80049fc <HAL_SPI_Init+0x1fc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d007      	beq.n	8004872 <HAL_SPI_Init+0x72>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a66      	ldr	r2, [pc, #408]	; (8004a00 <HAL_SPI_Init+0x200>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d002      	beq.n	8004872 <HAL_SPI_Init+0x72>
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b08      	cmp	r3, #8
 8004870:	d811      	bhi.n	8004896 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004876:	4a60      	ldr	r2, [pc, #384]	; (80049f8 <HAL_SPI_Init+0x1f8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d009      	beq.n	8004890 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a5e      	ldr	r2, [pc, #376]	; (80049fc <HAL_SPI_Init+0x1fc>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d004      	beq.n	8004890 <HAL_SPI_Init+0x90>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a5d      	ldr	r2, [pc, #372]	; (8004a00 <HAL_SPI_Init+0x200>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d104      	bne.n	800489a <HAL_SPI_Init+0x9a>
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2b10      	cmp	r3, #16
 8004894:	d901      	bls.n	800489a <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0a9      	b.n	80049ee <HAL_SPI_Init+0x1ee>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fc f9e0 	bl	8000c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2202      	movs	r2, #2
 80048b8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048d4:	d119      	bne.n	800490a <HAL_SPI_Init+0x10a>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048de:	d103      	bne.n	80048e8 <HAL_SPI_Init+0xe8>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_SPI_Init+0xfa>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10c      	bne.n	800490a <HAL_SPI_Init+0x10a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048f8:	d107      	bne.n	800490a <HAL_SPI_Init+0x10a>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004908:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69da      	ldr	r2, [r3, #28]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491c:	ea42 0103 	orr.w	r1, r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	431a      	orrs	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800496a:	ea42 0103 	orr.w	r1, r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	430a      	orrs	r2, r1
 8004978:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d113      	bne.n	80049aa <HAL_SPI_Init+0x1aa>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004994:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f022 0201 	bic.w	r2, r2, #1
 80049b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_SPI_Init+0x1dc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	430a      	orrs	r2, r1
 80049da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40013000 	.word	0x40013000
 80049fc:	40003800 	.word	0x40003800
 8004a00:	40003c00 	.word	0x40003c00

08004a04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	; 0x28
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	603b      	str	r3, [r7, #0]
 8004a10:	4613      	mov	r3, r2
 8004a12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	3330      	adds	r3, #48	; 0x30
 8004a1e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a28:	d112      	bne.n	8004a50 <HAL_SPI_Receive+0x4c>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10e      	bne.n	8004a50 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2204      	movs	r2, #4
 8004a36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	4613      	mov	r3, r2
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 f9ce 	bl	8004de8 <HAL_SPI_TransmitReceive>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	e1c7      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d101      	bne.n	8004a5e <HAL_SPI_Receive+0x5a>
 8004a5a:	2302      	movs	r3, #2
 8004a5c:	e1c0      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a66:	f7fc fb03 	bl	8001070 <HAL_GetTick>
 8004a6a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d007      	beq.n	8004a88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004a84:	7ffb      	ldrb	r3, [r7, #31]
 8004a86:	e1ab      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_SPI_Receive+0x90>
 8004a8e:	88fb      	ldrh	r3, [r7, #6]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004aa0:	7ffb      	ldrb	r3, [r7, #31]
 8004aa2:	e19d      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68ba      	ldr	r2, [r7, #8]
 8004ab8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	88fa      	ldrh	r2, [r7, #6]
 8004abe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8004af4:	d107      	bne.n	8004b06 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b04:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	4b94      	ldr	r3, [pc, #592]	; (8004d60 <HAL_SPI_Receive+0x35c>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	88f9      	ldrh	r1, [r7, #6]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	6812      	ldr	r2, [r2, #0]
 8004b16:	430b      	orrs	r3, r1
 8004b18:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f042 0201 	orr.w	r2, r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d107      	bne.n	8004b44 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b0f      	cmp	r3, #15
 8004b4a:	d948      	bls.n	8004bde <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004b4c:	e040      	b.n	8004bd0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	695a      	ldr	r2, [r3, #20]
 8004b54:	f248 0308 	movw	r3, #32776	; 0x8008
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d014      	beq.n	8004b88 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b66:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b68:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6e:	1d1a      	adds	r2, r3, #4
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004b86:	e023      	b.n	8004bd0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b88:	f7fc fa72 	bl	8001070 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d803      	bhi.n	8004ba0 <HAL_SPI_Receive+0x19c>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d102      	bne.n	8004ba6 <HAL_SPI_Receive+0x1a2>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d114      	bne.n	8004bd0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 fc0a 	bl	80053c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e107      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1b8      	bne.n	8004b4e <HAL_SPI_Receive+0x14a>
 8004bdc:	e0ed      	b.n	8004dba <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	2b07      	cmp	r3, #7
 8004be4:	f240 80e2 	bls.w	8004dac <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8004be8:	e05b      	b.n	8004ca2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d030      	beq.n	8004c5a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d014      	beq.n	8004c30 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c10:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c16:	1d1a      	adds	r2, r3, #4
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b02      	subs	r3, #2
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004c2e:	e038      	b.n	8004ca2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	8812      	ldrh	r2, [r2, #0]
 8004c38:	b292      	uxth	r2, r2
 8004c3a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004c58:	e023      	b.n	8004ca2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5a:	f7fc fa09 	bl	8001070 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d803      	bhi.n	8004c72 <HAL_SPI_Receive+0x26e>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d102      	bne.n	8004c78 <HAL_SPI_Receive+0x274>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d114      	bne.n	8004ca2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fba1 	bl	80053c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e09e      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d19d      	bne.n	8004bea <HAL_SPI_Receive+0x1e6>
 8004cae:	e084      	b.n	8004dba <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d052      	beq.n	8004d64 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d014      	beq.n	8004cf6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cd6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cdc:	1d1a      	adds	r2, r3, #4
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b04      	subs	r3, #4
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004cf4:	e05a      	b.n	8004dac <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004d00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d04:	d914      	bls.n	8004d30 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	8812      	ldrh	r2, [r2, #0]
 8004d0e:	b292      	uxth	r2, r2
 8004d10:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d16:	1c9a      	adds	r2, r3, #2
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	3b02      	subs	r3, #2
 8004d26:	b29a      	uxth	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004d2e:	e03d      	b.n	8004dac <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d3c:	7812      	ldrb	r2, [r2, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8004d5e:	e025      	b.n	8004dac <HAL_SPI_Receive+0x3a8>
 8004d60:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d64:	f7fc f984 	bl	8001070 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d803      	bhi.n	8004d7c <HAL_SPI_Receive+0x378>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Receive+0x37e>
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d114      	bne.n	8004dac <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fb1c 	bl	80053c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e019      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f47f af7b 	bne.w	8004cb0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 fb00 	bl	80053c0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d001      	beq.n	8004dde <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 8004dde:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08e      	sub	sp, #56	; 0x38
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3320      	adds	r3, #32
 8004e02:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3330      	adds	r3, #48	; 0x30
 8004e0a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d101      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x32>
 8004e16:	2302      	movs	r3, #2
 8004e18:	e2ce      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2201      	movs	r2, #1
 8004e1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e22:	f7fc f925 	bl	8001070 <HAL_GetTick>
 8004e26:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8004e28:	887b      	ldrh	r3, [r7, #2]
 8004e2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e36:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e3e:	7efb      	ldrb	r3, [r7, #27]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d014      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x86>
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e4a:	d106      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d102      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x72>
 8004e54:	7efb      	ldrb	r3, [r7, #27]
 8004e56:	2b04      	cmp	r3, #4
 8004e58:	d009      	beq.n	8004e6e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004e68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e6c:	e2a4      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d005      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x98>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_TransmitReceive+0x98>
 8004e7a:	887b      	ldrh	r3, [r7, #2]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8004e8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e92:	e291      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d003      	beq.n	8004ea8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2205      	movs	r2, #5
 8004ea4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	887a      	ldrh	r2, [r7, #2]
 8004eba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	887a      	ldrh	r2, [r7, #2]
 8004ec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	68ba      	ldr	r2, [r7, #8]
 8004eca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	887a      	ldrh	r2, [r7, #2]
 8004ed0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	887a      	ldrh	r2, [r7, #2]
 8004ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	685a      	ldr	r2, [r3, #4]
 8004eee:	4b9f      	ldr	r3, [pc, #636]	; (800516c <HAL_SPI_TransmitReceive+0x384>)
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	8879      	ldrh	r1, [r7, #2]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	430b      	orrs	r3, r1
 8004efa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0201 	orr.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f14:	d107      	bne.n	8004f26 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	2b0f      	cmp	r3, #15
 8004f2c:	d970      	bls.n	8005010 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8004f2e:	e068      	b.n	8005002 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d11a      	bne.n	8004f74 <HAL_SPI_TransmitReceive+0x18c>
 8004f3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6812      	ldr	r2, [r2, #0]
 8004f4e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f54:	1d1a      	adds	r2, r3, #4
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8004f72:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	f248 0308 	movw	r3, #32776	; 0x8008
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d01a      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x1d2>
 8004f84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d017      	beq.n	8004fba <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f94:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8004fb8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004fba:	f7fc f859 	bl	8001070 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d803      	bhi.n	8004fd2 <HAL_SPI_TransmitReceive+0x1ea>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d102      	bne.n	8004fd8 <HAL_SPI_TransmitReceive+0x1f0>
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d114      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8004fd8:	68f8      	ldr	r0, [r7, #12]
 8004fda:	f000 f9f1 	bl	80053c0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e1da      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005002:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005004:	2b00      	cmp	r3, #0
 8005006:	d193      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x148>
 8005008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800500a:	2b00      	cmp	r3, #0
 800500c:	d190      	bne.n	8004f30 <HAL_SPI_TransmitReceive+0x148>
 800500e:	e1ac      	b.n	800536a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b07      	cmp	r3, #7
 8005016:	f240 81a0 	bls.w	800535a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800501a:	e0a9      	b.n	8005170 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d139      	bne.n	800509e <HAL_SPI_TransmitReceive+0x2b6>
 800502a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800502c:	2b00      	cmp	r3, #0
 800502e:	d036      	beq.n	800509e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8005030:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005032:	2b01      	cmp	r3, #1
 8005034:	d91c      	bls.n	8005070 <HAL_SPI_TransmitReceive+0x288>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d018      	beq.n	8005070 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800504e:	1d1a      	adds	r2, r3, #4
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b02      	subs	r3, #2
 800505e:	b29a      	uxth	r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800506c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800506e:	e016      	b.n	800509e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005074:	881a      	ldrh	r2, [r3, #0]
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507e:	1c9a      	adds	r2, r3, #2
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800508a:	b29b      	uxth	r3, r3
 800508c:	3b01      	subs	r3, #1
 800508e:	b29a      	uxth	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800509c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d03a      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x33a>
 80050ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d037      	beq.n	8005122 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d018      	beq.n	80050f2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80050ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050d0:	1d1a      	adds	r2, r3, #4
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b02      	subs	r3, #2
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80050ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80050f0:	e017      	b.n	8005122 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050f6:	6a3a      	ldr	r2, [r7, #32]
 80050f8:	8812      	ldrh	r2, [r2, #0]
 80050fa:	b292      	uxth	r2, r2
 80050fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005102:	1c9a      	adds	r2, r3, #2
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005120:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005122:	f7fb ffa5 	bl	8001070 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800512e:	429a      	cmp	r2, r3
 8005130:	d803      	bhi.n	800513a <HAL_SPI_TransmitReceive+0x352>
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005138:	d102      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x358>
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d117      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f000 f93d 	bl	80053c0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2201      	movs	r2, #1
 8005162:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e126      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
 800516a:	bf00      	nop
 800516c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8005170:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005172:	2b00      	cmp	r3, #0
 8005174:	f47f af52 	bne.w	800501c <HAL_SPI_TransmitReceive+0x234>
 8005178:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800517a:	2b00      	cmp	r3, #0
 800517c:	f47f af4e 	bne.w	800501c <HAL_SPI_TransmitReceive+0x234>
 8005180:	e0f3      	b.n	800536a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d15a      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x45e>
 8005190:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005192:	2b00      	cmp	r3, #0
 8005194:	d057      	beq.n	8005246 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8005196:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005198:	2b03      	cmp	r3, #3
 800519a:	d91c      	bls.n	80051d6 <HAL_SPI_TransmitReceive+0x3ee>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d918      	bls.n	80051d6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	1d1a      	adds	r2, r3, #4
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051c0:	b29b      	uxth	r3, r3
 80051c2:	3b04      	subs	r3, #4
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051d4:	e037      	b.n	8005246 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80051d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d91b      	bls.n	8005214 <HAL_SPI_TransmitReceive+0x42c>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d017      	beq.n	8005214 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b02      	subs	r3, #2
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005210:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005212:	e018      	b.n	8005246 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3320      	adds	r3, #32
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8005244:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	695b      	ldr	r3, [r3, #20]
 800524c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005250:	2b00      	cmp	r3, #0
 8005252:	d05e      	beq.n	8005312 <HAL_SPI_TransmitReceive+0x52a>
 8005254:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005256:	2b00      	cmp	r3, #0
 8005258:	d05b      	beq.n	8005312 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d018      	beq.n	800529a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005270:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005272:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005278:	1d1a      	adds	r2, r3, #4
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005284:	b29b      	uxth	r3, r3
 8005286:	3b04      	subs	r3, #4
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005296:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005298:	e03b      	b.n	8005312 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 80052a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052a8:	d918      	bls.n	80052dc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ae:	6a3a      	ldr	r2, [r7, #32]
 80052b0:	8812      	ldrh	r2, [r2, #0]
 80052b2:	b292      	uxth	r2, r2
 80052b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	3b02      	subs	r3, #2
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80052da:	e01a      	b.n	8005312 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052e8:	7812      	ldrb	r2, [r2, #0]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8005310:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005312:	f7fb fead 	bl	8001070 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531e:	429a      	cmp	r2, r3
 8005320:	d803      	bhi.n	800532a <HAL_SPI_TransmitReceive+0x542>
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d102      	bne.n	8005330 <HAL_SPI_TransmitReceive+0x548>
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d114      	bne.n	800535a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 f845 	bl	80053c0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005344:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e02e      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800535a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800535c:	2b00      	cmp	r3, #0
 800535e:	f47f af10 	bne.w	8005182 <HAL_SPI_TransmitReceive+0x39a>
 8005362:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005364:	2b00      	cmp	r3, #0
 8005366:	f47f af0c 	bne.w	8005182 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800536a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	2200      	movs	r2, #0
 8005372:	2108      	movs	r1, #8
 8005374:	68f8      	ldr	r0, [r7, #12]
 8005376:	f000 f8c3 	bl	8005500 <SPI_WaitOnFlagUntilTimeout>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005386:	f043 0220 	orr.w	r2, r3, #32
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f815 	bl	80053c0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e001      	b.n	80053b8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 80053b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3730      	adds	r7, #48	; 0x30
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0208 	orr.w	r2, r2, #8
 80053de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	699a      	ldr	r2, [r3, #24]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f042 0210 	orr.w	r2, r2, #16
 80053ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f022 0201 	bic.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6919      	ldr	r1, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b3c      	ldr	r3, [pc, #240]	; (80054fc <SPI_CloseTransfer+0x13c>)
 800540c:	400b      	ands	r3, r1
 800540e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800541e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b04      	cmp	r3, #4
 800542a:	d014      	beq.n	8005456 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00f      	beq.n	8005456 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	699a      	ldr	r2, [r3, #24]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0220 	orr.w	r2, r2, #32
 8005454:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b03      	cmp	r3, #3
 8005460:	d014      	beq.n	800548c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00f      	beq.n	800548c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005472:	f043 0204 	orr.w	r2, r3, #4
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800548a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00f      	beq.n	80054b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549c:	f043 0201 	orr.w	r2, r3, #1
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	699a      	ldr	r2, [r3, #24]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00f      	beq.n	80054e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054c6:	f043 0208 	orr.w	r2, r3, #8
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	fffffc90 	.word	0xfffffc90

08005500 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	603b      	str	r3, [r7, #0]
 800550c:	4613      	mov	r3, r2
 800550e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005510:	e010      	b.n	8005534 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005512:	f7fb fdad 	bl	8001070 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	69ba      	ldr	r2, [r7, #24]
 800551e:	429a      	cmp	r2, r3
 8005520:	d803      	bhi.n	800552a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005528:	d102      	bne.n	8005530 <SPI_WaitOnFlagUntilTimeout+0x30>
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e00f      	b.n	8005554 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4013      	ands	r3, r2
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	429a      	cmp	r2, r3
 8005542:	bf0c      	ite	eq
 8005544:	2301      	moveq	r3, #1
 8005546:	2300      	movne	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	461a      	mov	r2, r3
 800554c:	79fb      	ldrb	r3, [r7, #7]
 800554e:	429a      	cmp	r2, r3
 8005550:	d0df      	beq.n	8005512 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005568:	095b      	lsrs	r3, r3, #5
 800556a:	3301      	adds	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	3301      	adds	r3, #1
 8005574:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	3307      	adds	r3, #7
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	fb02 f303 	mul.w	r3, r2, r3
}
 8005586:	4618      	mov	r0, r3
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e042      	b.n	800562a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb faee 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2224      	movs	r2, #36	; 0x24
 80055c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0201 	bic.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 fb9d 	bl	8005d14 <UART_SetConfig>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e022      	b.n	800562a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f001 f8f1 	bl	80067d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005600:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	689a      	ldr	r2, [r3, #8]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005610:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 f978 	bl	8006918 <UART_CheckIdleState>
 8005628:	4603      	mov	r3, r0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b08a      	sub	sp, #40	; 0x28
 8005636:	af02      	add	r7, sp, #8
 8005638:	60f8      	str	r0, [r7, #12]
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	603b      	str	r3, [r7, #0]
 800563e:	4613      	mov	r3, r2
 8005640:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005648:	2b20      	cmp	r3, #32
 800564a:	f040 8083 	bne.w	8005754 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <HAL_UART_Transmit+0x28>
 8005654:	88fb      	ldrh	r3, [r7, #6]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e07b      	b.n	8005756 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_UART_Transmit+0x3a>
 8005668:	2302      	movs	r3, #2
 800566a:	e074      	b.n	8005756 <HAL_UART_Transmit+0x124>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2221      	movs	r2, #33	; 0x21
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005684:	f7fb fcf4 	bl	8001070 <HAL_GetTick>
 8005688:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	88fa      	ldrh	r2, [r7, #6]
 800568e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	88fa      	ldrh	r2, [r7, #6]
 8005696:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a2:	d108      	bne.n	80056b6 <HAL_UART_Transmit+0x84>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d104      	bne.n	80056b6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	61bb      	str	r3, [r7, #24]
 80056b4:	e003      	b.n	80056be <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056c6:	e02c      	b.n	8005722 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	2200      	movs	r2, #0
 80056d0:	2180      	movs	r1, #128	; 0x80
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f001 f96b 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e039      	b.n	8005756 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	461a      	mov	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	3302      	adds	r3, #2
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	e007      	b.n	8005710 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	781a      	ldrb	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	3301      	adds	r3, #1
 800570e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005716:	b29b      	uxth	r3, r3
 8005718:	3b01      	subs	r3, #1
 800571a:	b29a      	uxth	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1cc      	bne.n	80056c8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2200      	movs	r2, #0
 8005736:	2140      	movs	r1, #64	; 0x40
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f001 f938 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d001      	beq.n	8005748 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e006      	b.n	8005756 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3720      	adds	r7, #32
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	69db      	ldr	r3, [r3, #28]
 800576e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	f640 030f 	movw	r3, #2063	; 0x80f
 8005786:	4013      	ands	r3, r2
 8005788:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d118      	bne.n	80057c2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d013      	beq.n	80057c2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 8282 	beq.w	8005cbc <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
      }
      return;
 80057c0:	e27c      	b.n	8005cbc <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80ef 	beq.w	80059a8 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	4b73      	ldr	r3, [pc, #460]	; (800599c <HAL_UART_IRQHandler+0x23c>)
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	4b72      	ldr	r3, [pc, #456]	; (80059a0 <HAL_UART_IRQHandler+0x240>)
 80057d8:	4013      	ands	r3, r2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80e4 	beq.w	80059a8 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d010      	beq.n	800580c <HAL_UART_IRQHandler+0xac>
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00b      	beq.n	800580c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2201      	movs	r2, #1
 80057fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005802:	f043 0201 	orr.w	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d010      	beq.n	8005838 <HAL_UART_IRQHandler+0xd8>
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	f003 0301 	and.w	r3, r3, #1
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2202      	movs	r2, #2
 8005826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582e:	f043 0204 	orr.w	r2, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d010      	beq.n	8005864 <HAL_UART_IRQHandler+0x104>
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00b      	beq.n	8005864 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2204      	movs	r2, #4
 8005852:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585a:	f043 0202 	orr.w	r2, r3, #2
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d015      	beq.n	800589a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d104      	bne.n	8005882 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4b48      	ldr	r3, [pc, #288]	; (800599c <HAL_UART_IRQHandler+0x23c>)
 800587c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2208      	movs	r2, #8
 8005888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005890:	f043 0208 	orr.w	r2, r3, #8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d011      	beq.n	80058c8 <HAL_UART_IRQHandler+0x168>
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058be:	f043 0220 	orr.w	r2, r3, #32
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 81f6 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d011      	beq.n	8005902 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d007      	beq.n	8005902 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005908:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d004      	beq.n	8005922 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800591e:	2b00      	cmp	r3, #0
 8005920:	d031      	beq.n	8005986 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f001 f8c4 	bl	8006ab0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005932:	2b40      	cmp	r3, #64	; 0x40
 8005934:	d123      	bne.n	800597e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005944:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d013      	beq.n	8005976 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <HAL_UART_IRQHandler+0x244>)
 8005954:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595a:	4618      	mov	r0, r3
 800595c:	f7fb fff2 	bl	8001944 <HAL_DMA_Abort_IT>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d017      	beq.n	8005996 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800596a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005970:	4610      	mov	r0, r2
 8005972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005974:	e00f      	b.n	8005996 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9b6 	bl	8005ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800597c:	e00b      	b.n	8005996 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 f9b2 	bl	8005ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005984:	e007      	b.n	8005996 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f9ae 	bl	8005ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005994:	e194      	b.n	8005cc0 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005996:	bf00      	nop
    return;
 8005998:	e192      	b.n	8005cc0 <HAL_UART_IRQHandler+0x560>
 800599a:	bf00      	nop
 800599c:	10000001 	.word	0x10000001
 80059a0:	04000120 	.word	0x04000120
 80059a4:	08006b15 	.word	0x08006b15

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	f040 810f 	bne.w	8005bd0 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	f000 8109 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8103 	beq.w	8005bd0 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2210      	movs	r2, #16
 80059d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059dc:	2b40      	cmp	r3, #64	; 0x40
 80059de:	f040 80bb 	bne.w	8005b58 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a96      	ldr	r2, [pc, #600]	; (8005c44 <HAL_UART_IRQHandler+0x4e4>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d059      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a94      	ldr	r2, [pc, #592]	; (8005c48 <HAL_UART_IRQHandler+0x4e8>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d053      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a92      	ldr	r2, [pc, #584]	; (8005c4c <HAL_UART_IRQHandler+0x4ec>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d04d      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a90      	ldr	r2, [pc, #576]	; (8005c50 <HAL_UART_IRQHandler+0x4f0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d047      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a8e      	ldr	r2, [pc, #568]	; (8005c54 <HAL_UART_IRQHandler+0x4f4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d041      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a8c      	ldr	r2, [pc, #560]	; (8005c58 <HAL_UART_IRQHandler+0x4f8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d03b      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a8a      	ldr	r2, [pc, #552]	; (8005c5c <HAL_UART_IRQHandler+0x4fc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d035      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a88      	ldr	r2, [pc, #544]	; (8005c60 <HAL_UART_IRQHandler+0x500>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d02f      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a86      	ldr	r2, [pc, #536]	; (8005c64 <HAL_UART_IRQHandler+0x504>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d029      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a84      	ldr	r2, [pc, #528]	; (8005c68 <HAL_UART_IRQHandler+0x508>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a82      	ldr	r2, [pc, #520]	; (8005c6c <HAL_UART_IRQHandler+0x50c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a80      	ldr	r2, [pc, #512]	; (8005c70 <HAL_UART_IRQHandler+0x510>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a7e      	ldr	r2, [pc, #504]	; (8005c74 <HAL_UART_IRQHandler+0x514>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d011      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a7c      	ldr	r2, [pc, #496]	; (8005c78 <HAL_UART_IRQHandler+0x518>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a7a      	ldr	r2, [pc, #488]	; (8005c7c <HAL_UART_IRQHandler+0x51c>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d005      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x342>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a78      	ldr	r2, [pc, #480]	; (8005c80 <HAL_UART_IRQHandler+0x520>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d105      	bne.n	8005aae <HAL_UART_IRQHandler+0x34e>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	e004      	b.n	8005ab8 <HAL_UART_IRQHandler+0x358>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005aba:	893b      	ldrh	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8101 	beq.w	8005cc4 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ac8:	893a      	ldrh	r2, [r7, #8]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	f080 80fa 	bcs.w	8005cc4 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	893a      	ldrh	r2, [r7, #8]
 8005ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	d02b      	beq.n	8005b3c <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	689a      	ldr	r2, [r3, #8]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b12:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0210 	bic.w	r2, r2, #16
 8005b30:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fb fbe6 	bl	8001308 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	1ad3      	subs	r3, r2, r3
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8d3 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b56:	e0b5      	b.n	8005cc4 <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	f000 80a8 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005b78:	897b      	ldrh	r3, [r7, #10]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 80a4 	beq.w	8005cc8 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b8e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	6899      	ldr	r1, [r3, #8]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	4b3a      	ldr	r3, [pc, #232]	; (8005c84 <HAL_UART_IRQHandler+0x524>)
 8005b9c:	400b      	ands	r3, r1
 8005b9e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 0210 	bic.w	r2, r2, #16
 8005bc2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bc4:	897b      	ldrh	r3, [r7, #10]
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f897 	bl	8005cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bce:	e07b      	b.n	8005cc8 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00d      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x496>
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 ffc0 	bl	8006b74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bf4:	e06b      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d104      	bne.n	8005c14 <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d008      	beq.n	8005c26 <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d057      	beq.n	8005ccc <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
    }
    return;
 8005c24:	e052      	b.n	8005ccc <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d02b      	beq.n	8005c88 <HAL_UART_IRQHandler+0x528>
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d026      	beq.n	8005c88 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 ff80 	bl	8006b40 <UART_EndTransmit_IT>
    return;
 8005c40:	e045      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
 8005c42:	bf00      	nop
 8005c44:	40020010 	.word	0x40020010
 8005c48:	40020028 	.word	0x40020028
 8005c4c:	40020040 	.word	0x40020040
 8005c50:	40020058 	.word	0x40020058
 8005c54:	40020070 	.word	0x40020070
 8005c58:	40020088 	.word	0x40020088
 8005c5c:	400200a0 	.word	0x400200a0
 8005c60:	400200b8 	.word	0x400200b8
 8005c64:	40020410 	.word	0x40020410
 8005c68:	40020428 	.word	0x40020428
 8005c6c:	40020440 	.word	0x40020440
 8005c70:	40020458 	.word	0x40020458
 8005c74:	40020470 	.word	0x40020470
 8005c78:	40020488 	.word	0x40020488
 8005c7c:	400204a0 	.word	0x400204a0
 8005c80:	400204b8 	.word	0x400204b8
 8005c84:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d008      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x544>
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 ff7d 	bl	8006b9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ca2:	e014      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00f      	beq.n	8005cce <HAL_UART_IRQHandler+0x56e>
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	da0c      	bge.n	8005cce <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 ff67 	bl	8006b88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cba:	e008      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
      return;
 8005cbc:	bf00      	nop
 8005cbe:	e006      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
    return;
 8005cc0:	bf00      	nop
 8005cc2:	e004      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
      return;
 8005cc4:	bf00      	nop
 8005cc6:	e002      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
      return;
 8005cc8:	bf00      	nop
 8005cca:	e000      	b.n	8005cce <HAL_UART_IRQHandler+0x56e>
    return;
 8005ccc:	bf00      	nop
  }
}
 8005cce:	3720      	adds	r7, #32
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d14:	b5b0      	push	{r4, r5, r7, lr}
 8005d16:	b08e      	sub	sp, #56	; 0x38
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689a      	ldr	r2, [r3, #8]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	4bbf      	ldr	r3, [pc, #764]	; (8006040 <UART_SetConfig+0x32c>)
 8005d42:	4013      	ands	r3, r2
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	6812      	ldr	r2, [r2, #0]
 8005d48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	699b      	ldr	r3, [r3, #24]
 8005d68:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4ab5      	ldr	r2, [pc, #724]	; (8006044 <UART_SetConfig+0x330>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d004      	beq.n	8005d7e <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6a1b      	ldr	r3, [r3, #32]
 8005d78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	4bb0      	ldr	r3, [pc, #704]	; (8006048 <UART_SetConfig+0x334>)
 8005d86:	4013      	ands	r3, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f023 010f 	bic.w	r1, r3, #15
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4aa7      	ldr	r2, [pc, #668]	; (800604c <UART_SetConfig+0x338>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d176      	bne.n	8005ea0 <UART_SetConfig+0x18c>
 8005db2:	4ba7      	ldr	r3, [pc, #668]	; (8006050 <UART_SetConfig+0x33c>)
 8005db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dba:	2b28      	cmp	r3, #40	; 0x28
 8005dbc:	d86c      	bhi.n	8005e98 <UART_SetConfig+0x184>
 8005dbe:	a201      	add	r2, pc, #4	; (adr r2, 8005dc4 <UART_SetConfig+0xb0>)
 8005dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc4:	08005e69 	.word	0x08005e69
 8005dc8:	08005e99 	.word	0x08005e99
 8005dcc:	08005e99 	.word	0x08005e99
 8005dd0:	08005e99 	.word	0x08005e99
 8005dd4:	08005e99 	.word	0x08005e99
 8005dd8:	08005e99 	.word	0x08005e99
 8005ddc:	08005e99 	.word	0x08005e99
 8005de0:	08005e99 	.word	0x08005e99
 8005de4:	08005e71 	.word	0x08005e71
 8005de8:	08005e99 	.word	0x08005e99
 8005dec:	08005e99 	.word	0x08005e99
 8005df0:	08005e99 	.word	0x08005e99
 8005df4:	08005e99 	.word	0x08005e99
 8005df8:	08005e99 	.word	0x08005e99
 8005dfc:	08005e99 	.word	0x08005e99
 8005e00:	08005e99 	.word	0x08005e99
 8005e04:	08005e79 	.word	0x08005e79
 8005e08:	08005e99 	.word	0x08005e99
 8005e0c:	08005e99 	.word	0x08005e99
 8005e10:	08005e99 	.word	0x08005e99
 8005e14:	08005e99 	.word	0x08005e99
 8005e18:	08005e99 	.word	0x08005e99
 8005e1c:	08005e99 	.word	0x08005e99
 8005e20:	08005e99 	.word	0x08005e99
 8005e24:	08005e81 	.word	0x08005e81
 8005e28:	08005e99 	.word	0x08005e99
 8005e2c:	08005e99 	.word	0x08005e99
 8005e30:	08005e99 	.word	0x08005e99
 8005e34:	08005e99 	.word	0x08005e99
 8005e38:	08005e99 	.word	0x08005e99
 8005e3c:	08005e99 	.word	0x08005e99
 8005e40:	08005e99 	.word	0x08005e99
 8005e44:	08005e89 	.word	0x08005e89
 8005e48:	08005e99 	.word	0x08005e99
 8005e4c:	08005e99 	.word	0x08005e99
 8005e50:	08005e99 	.word	0x08005e99
 8005e54:	08005e99 	.word	0x08005e99
 8005e58:	08005e99 	.word	0x08005e99
 8005e5c:	08005e99 	.word	0x08005e99
 8005e60:	08005e99 	.word	0x08005e99
 8005e64:	08005e91 	.word	0x08005e91
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e6e:	e222      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005e70:	2304      	movs	r3, #4
 8005e72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e76:	e21e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005e78:	2308      	movs	r3, #8
 8005e7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e7e:	e21a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005e80:	2310      	movs	r3, #16
 8005e82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e86:	e216      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005e88:	2320      	movs	r3, #32
 8005e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e8e:	e212      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e96:	e20e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005e98:	2380      	movs	r3, #128	; 0x80
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e20a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6b      	ldr	r2, [pc, #428]	; (8006054 <UART_SetConfig+0x340>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d130      	bne.n	8005f0c <UART_SetConfig+0x1f8>
 8005eaa:	4b69      	ldr	r3, [pc, #420]	; (8006050 <UART_SetConfig+0x33c>)
 8005eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eae:	f003 0307 	and.w	r3, r3, #7
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d826      	bhi.n	8005f04 <UART_SetConfig+0x1f0>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0x1a8>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005ed5 	.word	0x08005ed5
 8005ec0:	08005edd 	.word	0x08005edd
 8005ec4:	08005ee5 	.word	0x08005ee5
 8005ec8:	08005eed 	.word	0x08005eed
 8005ecc:	08005ef5 	.word	0x08005ef5
 8005ed0:	08005efd 	.word	0x08005efd
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eda:	e1ec      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005edc:	2304      	movs	r3, #4
 8005ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ee2:	e1e8      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eea:	e1e4      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005eec:	2310      	movs	r3, #16
 8005eee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef2:	e1e0      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005ef4:	2320      	movs	r3, #32
 8005ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efa:	e1dc      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005efc:	2340      	movs	r3, #64	; 0x40
 8005efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f02:	e1d8      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f04:	2380      	movs	r3, #128	; 0x80
 8005f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0a:	e1d4      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a51      	ldr	r2, [pc, #324]	; (8006058 <UART_SetConfig+0x344>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d130      	bne.n	8005f78 <UART_SetConfig+0x264>
 8005f16:	4b4e      	ldr	r3, [pc, #312]	; (8006050 <UART_SetConfig+0x33c>)
 8005f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1a:	f003 0307 	and.w	r3, r3, #7
 8005f1e:	2b05      	cmp	r3, #5
 8005f20:	d826      	bhi.n	8005f70 <UART_SetConfig+0x25c>
 8005f22:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x214>)
 8005f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f28:	08005f41 	.word	0x08005f41
 8005f2c:	08005f49 	.word	0x08005f49
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f46:	e1b6      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f4e:	e1b2      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f50:	2308      	movs	r3, #8
 8005f52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f56:	e1ae      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f5e:	e1aa      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f60:	2320      	movs	r3, #32
 8005f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f66:	e1a6      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6e:	e1a2      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f76:	e19e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a37      	ldr	r2, [pc, #220]	; (800605c <UART_SetConfig+0x348>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d130      	bne.n	8005fe4 <UART_SetConfig+0x2d0>
 8005f82:	4b33      	ldr	r3, [pc, #204]	; (8006050 <UART_SetConfig+0x33c>)
 8005f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f86:	f003 0307 	and.w	r3, r3, #7
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	d826      	bhi.n	8005fdc <UART_SetConfig+0x2c8>
 8005f8e:	a201      	add	r2, pc, #4	; (adr r2, 8005f94 <UART_SetConfig+0x280>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08005fad 	.word	0x08005fad
 8005f98:	08005fb5 	.word	0x08005fb5
 8005f9c:	08005fbd 	.word	0x08005fbd
 8005fa0:	08005fc5 	.word	0x08005fc5
 8005fa4:	08005fcd 	.word	0x08005fcd
 8005fa8:	08005fd5 	.word	0x08005fd5
 8005fac:	2300      	movs	r3, #0
 8005fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fb2:	e180      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fb4:	2304      	movs	r3, #4
 8005fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fba:	e17c      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fbc:	2308      	movs	r3, #8
 8005fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fc2:	e178      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fc4:	2310      	movs	r3, #16
 8005fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fca:	e174      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fcc:	2320      	movs	r3, #32
 8005fce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd2:	e170      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fd4:	2340      	movs	r3, #64	; 0x40
 8005fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fda:	e16c      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fdc:	2380      	movs	r3, #128	; 0x80
 8005fde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe2:	e168      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <UART_SetConfig+0x34c>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d142      	bne.n	8006074 <UART_SetConfig+0x360>
 8005fee:	4b18      	ldr	r3, [pc, #96]	; (8006050 <UART_SetConfig+0x33c>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d838      	bhi.n	800606c <UART_SetConfig+0x358>
 8005ffa:	a201      	add	r2, pc, #4	; (adr r2, 8006000 <UART_SetConfig+0x2ec>)
 8005ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006000:	08006019 	.word	0x08006019
 8006004:	08006021 	.word	0x08006021
 8006008:	08006029 	.word	0x08006029
 800600c:	08006031 	.word	0x08006031
 8006010:	08006039 	.word	0x08006039
 8006014:	08006065 	.word	0x08006065
 8006018:	2300      	movs	r3, #0
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	e14a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006020:	2304      	movs	r3, #4
 8006022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006026:	e146      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006028:	2308      	movs	r3, #8
 800602a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800602e:	e142      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006030:	2310      	movs	r3, #16
 8006032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006036:	e13e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006038:	2320      	movs	r3, #32
 800603a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603e:	e13a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006040:	cfff69f3 	.word	0xcfff69f3
 8006044:	58000c00 	.word	0x58000c00
 8006048:	11fff4ff 	.word	0x11fff4ff
 800604c:	40011000 	.word	0x40011000
 8006050:	58024400 	.word	0x58024400
 8006054:	40004400 	.word	0x40004400
 8006058:	40004800 	.word	0x40004800
 800605c:	40004c00 	.word	0x40004c00
 8006060:	40005000 	.word	0x40005000
 8006064:	2340      	movs	r3, #64	; 0x40
 8006066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606a:	e124      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800606c:	2380      	movs	r3, #128	; 0x80
 800606e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006072:	e120      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4acc      	ldr	r2, [pc, #816]	; (80063ac <UART_SetConfig+0x698>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d176      	bne.n	800616c <UART_SetConfig+0x458>
 800607e:	4bcc      	ldr	r3, [pc, #816]	; (80063b0 <UART_SetConfig+0x69c>)
 8006080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006082:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006086:	2b28      	cmp	r3, #40	; 0x28
 8006088:	d86c      	bhi.n	8006164 <UART_SetConfig+0x450>
 800608a:	a201      	add	r2, pc, #4	; (adr r2, 8006090 <UART_SetConfig+0x37c>)
 800608c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006090:	08006135 	.word	0x08006135
 8006094:	08006165 	.word	0x08006165
 8006098:	08006165 	.word	0x08006165
 800609c:	08006165 	.word	0x08006165
 80060a0:	08006165 	.word	0x08006165
 80060a4:	08006165 	.word	0x08006165
 80060a8:	08006165 	.word	0x08006165
 80060ac:	08006165 	.word	0x08006165
 80060b0:	0800613d 	.word	0x0800613d
 80060b4:	08006165 	.word	0x08006165
 80060b8:	08006165 	.word	0x08006165
 80060bc:	08006165 	.word	0x08006165
 80060c0:	08006165 	.word	0x08006165
 80060c4:	08006165 	.word	0x08006165
 80060c8:	08006165 	.word	0x08006165
 80060cc:	08006165 	.word	0x08006165
 80060d0:	08006145 	.word	0x08006145
 80060d4:	08006165 	.word	0x08006165
 80060d8:	08006165 	.word	0x08006165
 80060dc:	08006165 	.word	0x08006165
 80060e0:	08006165 	.word	0x08006165
 80060e4:	08006165 	.word	0x08006165
 80060e8:	08006165 	.word	0x08006165
 80060ec:	08006165 	.word	0x08006165
 80060f0:	0800614d 	.word	0x0800614d
 80060f4:	08006165 	.word	0x08006165
 80060f8:	08006165 	.word	0x08006165
 80060fc:	08006165 	.word	0x08006165
 8006100:	08006165 	.word	0x08006165
 8006104:	08006165 	.word	0x08006165
 8006108:	08006165 	.word	0x08006165
 800610c:	08006165 	.word	0x08006165
 8006110:	08006155 	.word	0x08006155
 8006114:	08006165 	.word	0x08006165
 8006118:	08006165 	.word	0x08006165
 800611c:	08006165 	.word	0x08006165
 8006120:	08006165 	.word	0x08006165
 8006124:	08006165 	.word	0x08006165
 8006128:	08006165 	.word	0x08006165
 800612c:	08006165 	.word	0x08006165
 8006130:	0800615d 	.word	0x0800615d
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800613a:	e0bc      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800613c:	2304      	movs	r3, #4
 800613e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006142:	e0b8      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006144:	2308      	movs	r3, #8
 8006146:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800614a:	e0b4      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800614c:	2310      	movs	r3, #16
 800614e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006152:	e0b0      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006154:	2320      	movs	r3, #32
 8006156:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800615a:	e0ac      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800615c:	2340      	movs	r3, #64	; 0x40
 800615e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006162:	e0a8      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006164:	2380      	movs	r3, #128	; 0x80
 8006166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800616a:	e0a4      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a90      	ldr	r2, [pc, #576]	; (80063b4 <UART_SetConfig+0x6a0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d130      	bne.n	80061d8 <UART_SetConfig+0x4c4>
 8006176:	4b8e      	ldr	r3, [pc, #568]	; (80063b0 <UART_SetConfig+0x69c>)
 8006178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	2b05      	cmp	r3, #5
 8006180:	d826      	bhi.n	80061d0 <UART_SetConfig+0x4bc>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <UART_SetConfig+0x474>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061a1 	.word	0x080061a1
 800618c:	080061a9 	.word	0x080061a9
 8006190:	080061b1 	.word	0x080061b1
 8006194:	080061b9 	.word	0x080061b9
 8006198:	080061c1 	.word	0x080061c1
 800619c:	080061c9 	.word	0x080061c9
 80061a0:	2300      	movs	r3, #0
 80061a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061a6:	e086      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061a8:	2304      	movs	r3, #4
 80061aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ae:	e082      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061b0:	2308      	movs	r3, #8
 80061b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061b6:	e07e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061b8:	2310      	movs	r3, #16
 80061ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061be:	e07a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061c0:	2320      	movs	r3, #32
 80061c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c6:	e076      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061c8:	2340      	movs	r3, #64	; 0x40
 80061ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ce:	e072      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061d0:	2380      	movs	r3, #128	; 0x80
 80061d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d6:	e06e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a76      	ldr	r2, [pc, #472]	; (80063b8 <UART_SetConfig+0x6a4>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d130      	bne.n	8006244 <UART_SetConfig+0x530>
 80061e2:	4b73      	ldr	r3, [pc, #460]	; (80063b0 <UART_SetConfig+0x69c>)
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	2b05      	cmp	r3, #5
 80061ec:	d826      	bhi.n	800623c <UART_SetConfig+0x528>
 80061ee:	a201      	add	r2, pc, #4	; (adr r2, 80061f4 <UART_SetConfig+0x4e0>)
 80061f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f4:	0800620d 	.word	0x0800620d
 80061f8:	08006215 	.word	0x08006215
 80061fc:	0800621d 	.word	0x0800621d
 8006200:	08006225 	.word	0x08006225
 8006204:	0800622d 	.word	0x0800622d
 8006208:	08006235 	.word	0x08006235
 800620c:	2300      	movs	r3, #0
 800620e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006212:	e050      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006214:	2304      	movs	r3, #4
 8006216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800621a:	e04c      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800621c:	2308      	movs	r3, #8
 800621e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006222:	e048      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006224:	2310      	movs	r3, #16
 8006226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800622a:	e044      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800622c:	2320      	movs	r3, #32
 800622e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006232:	e040      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623a:	e03c      	b.n	80062b6 <UART_SetConfig+0x5a2>
 800623c:	2380      	movs	r3, #128	; 0x80
 800623e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006242:	e038      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a5c      	ldr	r2, [pc, #368]	; (80063bc <UART_SetConfig+0x6a8>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d130      	bne.n	80062b0 <UART_SetConfig+0x59c>
 800624e:	4b58      	ldr	r3, [pc, #352]	; (80063b0 <UART_SetConfig+0x69c>)
 8006250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006252:	f003 0307 	and.w	r3, r3, #7
 8006256:	2b05      	cmp	r3, #5
 8006258:	d826      	bhi.n	80062a8 <UART_SetConfig+0x594>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <UART_SetConfig+0x54c>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	08006279 	.word	0x08006279
 8006264:	08006281 	.word	0x08006281
 8006268:	08006289 	.word	0x08006289
 800626c:	08006291 	.word	0x08006291
 8006270:	08006299 	.word	0x08006299
 8006274:	080062a1 	.word	0x080062a1
 8006278:	2302      	movs	r3, #2
 800627a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800627e:	e01a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006280:	2304      	movs	r3, #4
 8006282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006286:	e016      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006288:	2308      	movs	r3, #8
 800628a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800628e:	e012      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006290:	2310      	movs	r3, #16
 8006292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006296:	e00e      	b.n	80062b6 <UART_SetConfig+0x5a2>
 8006298:	2320      	movs	r3, #32
 800629a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629e:	e00a      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80062a0:	2340      	movs	r3, #64	; 0x40
 80062a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a6:	e006      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80062a8:	2380      	movs	r3, #128	; 0x80
 80062aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ae:	e002      	b.n	80062b6 <UART_SetConfig+0x5a2>
 80062b0:	2380      	movs	r3, #128	; 0x80
 80062b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a40      	ldr	r2, [pc, #256]	; (80063bc <UART_SetConfig+0x6a8>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	f040 80ef 	bne.w	80064a0 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	dc46      	bgt.n	8006358 <UART_SetConfig+0x644>
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	f2c0 8081 	blt.w	80063d2 <UART_SetConfig+0x6be>
 80062d0:	3b02      	subs	r3, #2
 80062d2:	2b1e      	cmp	r3, #30
 80062d4:	d87d      	bhi.n	80063d2 <UART_SetConfig+0x6be>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <UART_SetConfig+0x5c8>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	0800635f 	.word	0x0800635f
 80062e0:	080063d3 	.word	0x080063d3
 80062e4:	08006367 	.word	0x08006367
 80062e8:	080063d3 	.word	0x080063d3
 80062ec:	080063d3 	.word	0x080063d3
 80062f0:	080063d3 	.word	0x080063d3
 80062f4:	08006377 	.word	0x08006377
 80062f8:	080063d3 	.word	0x080063d3
 80062fc:	080063d3 	.word	0x080063d3
 8006300:	080063d3 	.word	0x080063d3
 8006304:	080063d3 	.word	0x080063d3
 8006308:	080063d3 	.word	0x080063d3
 800630c:	080063d3 	.word	0x080063d3
 8006310:	080063d3 	.word	0x080063d3
 8006314:	08006387 	.word	0x08006387
 8006318:	080063d3 	.word	0x080063d3
 800631c:	080063d3 	.word	0x080063d3
 8006320:	080063d3 	.word	0x080063d3
 8006324:	080063d3 	.word	0x080063d3
 8006328:	080063d3 	.word	0x080063d3
 800632c:	080063d3 	.word	0x080063d3
 8006330:	080063d3 	.word	0x080063d3
 8006334:	080063d3 	.word	0x080063d3
 8006338:	080063d3 	.word	0x080063d3
 800633c:	080063d3 	.word	0x080063d3
 8006340:	080063d3 	.word	0x080063d3
 8006344:	080063d3 	.word	0x080063d3
 8006348:	080063d3 	.word	0x080063d3
 800634c:	080063d3 	.word	0x080063d3
 8006350:	080063d3 	.word	0x080063d3
 8006354:	080063c5 	.word	0x080063c5
 8006358:	2b40      	cmp	r3, #64	; 0x40
 800635a:	d036      	beq.n	80063ca <UART_SetConfig+0x6b6>
 800635c:	e039      	b.n	80063d2 <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800635e:	f7fd fe2d 	bl	8003fbc <HAL_RCCEx_GetD3PCLK1Freq>
 8006362:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006364:	e03b      	b.n	80063de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006366:	f107 0314 	add.w	r3, r7, #20
 800636a:	4618      	mov	r0, r3
 800636c:	f7fd fe3c 	bl	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006374:	e033      	b.n	80063de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006376:	f107 0308 	add.w	r3, r7, #8
 800637a:	4618      	mov	r0, r3
 800637c:	f7fd ff88 	bl	8004290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006384:	e02b      	b.n	80063de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006386:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <UART_SetConfig+0x69c>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0320 	and.w	r3, r3, #32
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006392:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <UART_SetConfig+0x69c>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	08db      	lsrs	r3, r3, #3
 8006398:	f003 0303 	and.w	r3, r3, #3
 800639c:	4a08      	ldr	r2, [pc, #32]	; (80063c0 <UART_SetConfig+0x6ac>)
 800639e:	fa22 f303 	lsr.w	r3, r2, r3
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063a4:	e01b      	b.n	80063de <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <UART_SetConfig+0x6ac>)
 80063a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063aa:	e018      	b.n	80063de <UART_SetConfig+0x6ca>
 80063ac:	40011400 	.word	0x40011400
 80063b0:	58024400 	.word	0x58024400
 80063b4:	40007800 	.word	0x40007800
 80063b8:	40007c00 	.word	0x40007c00
 80063bc:	58000c00 	.word	0x58000c00
 80063c0:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063c4:	4bc4      	ldr	r3, [pc, #784]	; (80066d8 <UART_SetConfig+0x9c4>)
 80063c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063c8:	e009      	b.n	80063de <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063d0:	e005      	b.n	80063de <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 80063d2:	2300      	movs	r3, #0
 80063d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80063dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 81da 	beq.w	800679a <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	4abc      	ldr	r2, [pc, #752]	; (80066dc <UART_SetConfig+0x9c8>)
 80063ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063f0:	461a      	mov	r2, r3
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063f8:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685a      	ldr	r2, [r3, #4]
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	6a3a      	ldr	r2, [r7, #32]
 8006406:	429a      	cmp	r2, r3
 8006408:	d305      	bcc.n	8006416 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006410:	6a3a      	ldr	r2, [r7, #32]
 8006412:	429a      	cmp	r2, r3
 8006414:	d903      	bls.n	800641e <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800641c:	e1bd      	b.n	800679a <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800641e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006420:	4618      	mov	r0, r3
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642a:	4aac      	ldr	r2, [pc, #688]	; (80066dc <UART_SetConfig+0x9c8>)
 800642c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006430:	b29a      	uxth	r2, r3
 8006432:	f04f 0300 	mov.w	r3, #0
 8006436:	f7f9 ff4f 	bl	80002d8 <__aeabi_uldivmod>
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	4610      	mov	r0, r2
 8006440:	4619      	mov	r1, r3
 8006442:	f04f 0200 	mov.w	r2, #0
 8006446:	f04f 0300 	mov.w	r3, #0
 800644a:	020b      	lsls	r3, r1, #8
 800644c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006450:	0202      	lsls	r2, r0, #8
 8006452:	6879      	ldr	r1, [r7, #4]
 8006454:	6849      	ldr	r1, [r1, #4]
 8006456:	0849      	lsrs	r1, r1, #1
 8006458:	4608      	mov	r0, r1
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	1814      	adds	r4, r2, r0
 8006460:	eb43 0501 	adc.w	r5, r3, r1
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	461a      	mov	r2, r3
 800646a:	f04f 0300 	mov.w	r3, #0
 800646e:	4620      	mov	r0, r4
 8006470:	4629      	mov	r1, r5
 8006472:	f7f9 ff31 	bl	80002d8 <__aeabi_uldivmod>
 8006476:	4602      	mov	r2, r0
 8006478:	460b      	mov	r3, r1
 800647a:	4613      	mov	r3, r2
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006484:	d308      	bcc.n	8006498 <UART_SetConfig+0x784>
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800648c:	d204      	bcs.n	8006498 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006494:	60da      	str	r2, [r3, #12]
 8006496:	e180      	b.n	800679a <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800649e:	e17c      	b.n	800679a <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69db      	ldr	r3, [r3, #28]
 80064a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064a8:	f040 80bf 	bne.w	800662a <UART_SetConfig+0x916>
  {
    switch (clocksource)
 80064ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80064b0:	2b20      	cmp	r3, #32
 80064b2:	dc49      	bgt.n	8006548 <UART_SetConfig+0x834>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db7c      	blt.n	80065b2 <UART_SetConfig+0x89e>
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	d87a      	bhi.n	80065b2 <UART_SetConfig+0x89e>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x7b0>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	0800654f 	.word	0x0800654f
 80064c8:	08006557 	.word	0x08006557
 80064cc:	080065b3 	.word	0x080065b3
 80064d0:	080065b3 	.word	0x080065b3
 80064d4:	0800655f 	.word	0x0800655f
 80064d8:	080065b3 	.word	0x080065b3
 80064dc:	080065b3 	.word	0x080065b3
 80064e0:	080065b3 	.word	0x080065b3
 80064e4:	0800656f 	.word	0x0800656f
 80064e8:	080065b3 	.word	0x080065b3
 80064ec:	080065b3 	.word	0x080065b3
 80064f0:	080065b3 	.word	0x080065b3
 80064f4:	080065b3 	.word	0x080065b3
 80064f8:	080065b3 	.word	0x080065b3
 80064fc:	080065b3 	.word	0x080065b3
 8006500:	080065b3 	.word	0x080065b3
 8006504:	0800657f 	.word	0x0800657f
 8006508:	080065b3 	.word	0x080065b3
 800650c:	080065b3 	.word	0x080065b3
 8006510:	080065b3 	.word	0x080065b3
 8006514:	080065b3 	.word	0x080065b3
 8006518:	080065b3 	.word	0x080065b3
 800651c:	080065b3 	.word	0x080065b3
 8006520:	080065b3 	.word	0x080065b3
 8006524:	080065b3 	.word	0x080065b3
 8006528:	080065b3 	.word	0x080065b3
 800652c:	080065b3 	.word	0x080065b3
 8006530:	080065b3 	.word	0x080065b3
 8006534:	080065b3 	.word	0x080065b3
 8006538:	080065b3 	.word	0x080065b3
 800653c:	080065b3 	.word	0x080065b3
 8006540:	080065b3 	.word	0x080065b3
 8006544:	080065a5 	.word	0x080065a5
 8006548:	2b40      	cmp	r3, #64	; 0x40
 800654a:	d02e      	beq.n	80065aa <UART_SetConfig+0x896>
 800654c:	e031      	b.n	80065b2 <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654e:	f7fc fdc9 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 8006552:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006554:	e033      	b.n	80065be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006556:	f7fc fddb 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 800655a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800655c:	e02f      	b.n	80065be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800655e:	f107 0314 	add.w	r3, r7, #20
 8006562:	4618      	mov	r0, r3
 8006564:	f7fd fd40 	bl	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800656c:	e027      	b.n	80065be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800656e:	f107 0308 	add.w	r3, r7, #8
 8006572:	4618      	mov	r0, r3
 8006574:	f7fd fe8c 	bl	8004290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800657c:	e01f      	b.n	80065be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800657e:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <UART_SetConfig+0x9cc>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800658a:	4b55      	ldr	r3, [pc, #340]	; (80066e0 <UART_SetConfig+0x9cc>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	f003 0303 	and.w	r3, r3, #3
 8006594:	4a53      	ldr	r2, [pc, #332]	; (80066e4 <UART_SetConfig+0x9d0>)
 8006596:	fa22 f303 	lsr.w	r3, r2, r3
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800659c:	e00f      	b.n	80065be <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800659e:	4b51      	ldr	r3, [pc, #324]	; (80066e4 <UART_SetConfig+0x9d0>)
 80065a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a2:	e00c      	b.n	80065be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80065a4:	4b4c      	ldr	r3, [pc, #304]	; (80066d8 <UART_SetConfig+0x9c4>)
 80065a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065a8:	e009      	b.n	80065be <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065b0:	e005      	b.n	80065be <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80065bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80ea 	beq.w	800679a <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4a44      	ldr	r2, [pc, #272]	; (80066dc <UART_SetConfig+0x9c8>)
 80065cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d8:	005a      	lsls	r2, r3, #1
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	441a      	add	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	2b0f      	cmp	r3, #15
 80065f2:	d916      	bls.n	8006622 <UART_SetConfig+0x90e>
 80065f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fa:	d212      	bcs.n	8006622 <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fe:	b29b      	uxth	r3, r3
 8006600:	f023 030f 	bic.w	r3, r3, #15
 8006604:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006608:	085b      	lsrs	r3, r3, #1
 800660a:	b29b      	uxth	r3, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	b29a      	uxth	r2, r3
 8006612:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006614:	4313      	orrs	r3, r2
 8006616:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e0bb      	b.n	800679a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006628:	e0b7      	b.n	800679a <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800662a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800662e:	2b20      	cmp	r3, #32
 8006630:	dc4a      	bgt.n	80066c8 <UART_SetConfig+0x9b4>
 8006632:	2b00      	cmp	r3, #0
 8006634:	f2c0 8086 	blt.w	8006744 <UART_SetConfig+0xa30>
 8006638:	2b20      	cmp	r3, #32
 800663a:	f200 8083 	bhi.w	8006744 <UART_SetConfig+0xa30>
 800663e:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x930>)
 8006640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006644:	080066cf 	.word	0x080066cf
 8006648:	080066e9 	.word	0x080066e9
 800664c:	08006745 	.word	0x08006745
 8006650:	08006745 	.word	0x08006745
 8006654:	080066f1 	.word	0x080066f1
 8006658:	08006745 	.word	0x08006745
 800665c:	08006745 	.word	0x08006745
 8006660:	08006745 	.word	0x08006745
 8006664:	08006701 	.word	0x08006701
 8006668:	08006745 	.word	0x08006745
 800666c:	08006745 	.word	0x08006745
 8006670:	08006745 	.word	0x08006745
 8006674:	08006745 	.word	0x08006745
 8006678:	08006745 	.word	0x08006745
 800667c:	08006745 	.word	0x08006745
 8006680:	08006745 	.word	0x08006745
 8006684:	08006711 	.word	0x08006711
 8006688:	08006745 	.word	0x08006745
 800668c:	08006745 	.word	0x08006745
 8006690:	08006745 	.word	0x08006745
 8006694:	08006745 	.word	0x08006745
 8006698:	08006745 	.word	0x08006745
 800669c:	08006745 	.word	0x08006745
 80066a0:	08006745 	.word	0x08006745
 80066a4:	08006745 	.word	0x08006745
 80066a8:	08006745 	.word	0x08006745
 80066ac:	08006745 	.word	0x08006745
 80066b0:	08006745 	.word	0x08006745
 80066b4:	08006745 	.word	0x08006745
 80066b8:	08006745 	.word	0x08006745
 80066bc:	08006745 	.word	0x08006745
 80066c0:	08006745 	.word	0x08006745
 80066c4:	08006737 	.word	0x08006737
 80066c8:	2b40      	cmp	r3, #64	; 0x40
 80066ca:	d037      	beq.n	800673c <UART_SetConfig+0xa28>
 80066cc:	e03a      	b.n	8006744 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066ce:	f7fc fd09 	bl	80030e4 <HAL_RCC_GetPCLK1Freq>
 80066d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80066d4:	e03c      	b.n	8006750 <UART_SetConfig+0xa3c>
 80066d6:	bf00      	nop
 80066d8:	003d0900 	.word	0x003d0900
 80066dc:	08006e44 	.word	0x08006e44
 80066e0:	58024400 	.word	0x58024400
 80066e4:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e8:	f7fc fd12 	bl	8003110 <HAL_RCC_GetPCLK2Freq>
 80066ec:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80066ee:	e02f      	b.n	8006750 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066f0:	f107 0314 	add.w	r3, r7, #20
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd fc77 	bl	8003fe8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80066fe:	e027      	b.n	8006750 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4618      	mov	r0, r3
 8006706:	f7fd fdc3 	bl	8004290 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800670e:	e01f      	b.n	8006750 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006710:	4b2c      	ldr	r3, [pc, #176]	; (80067c4 <UART_SetConfig+0xab0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d009      	beq.n	8006730 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800671c:	4b29      	ldr	r3, [pc, #164]	; (80067c4 <UART_SetConfig+0xab0>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	08db      	lsrs	r3, r3, #3
 8006722:	f003 0303 	and.w	r3, r3, #3
 8006726:	4a28      	ldr	r2, [pc, #160]	; (80067c8 <UART_SetConfig+0xab4>)
 8006728:	fa22 f303 	lsr.w	r3, r2, r3
 800672c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800672e:	e00f      	b.n	8006750 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 8006730:	4b25      	ldr	r3, [pc, #148]	; (80067c8 <UART_SetConfig+0xab4>)
 8006732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006734:	e00c      	b.n	8006750 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006736:	4b25      	ldr	r3, [pc, #148]	; (80067cc <UART_SetConfig+0xab8>)
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800673a:	e009      	b.n	8006750 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006742:	e005      	b.n	8006750 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 8006744:	2300      	movs	r3, #0
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800674e:	bf00      	nop
    }

    if (pclk != 0U)
 8006750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006752:	2b00      	cmp	r3, #0
 8006754:	d021      	beq.n	800679a <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675a:	4a1d      	ldr	r2, [pc, #116]	; (80067d0 <UART_SetConfig+0xabc>)
 800675c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006760:	461a      	mov	r2, r3
 8006762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006764:	fbb3 f2f2 	udiv	r2, r3, r2
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	085b      	lsrs	r3, r3, #1
 800676e:	441a      	add	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	fbb2 f3f3 	udiv	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2b0f      	cmp	r3, #15
 8006780:	d908      	bls.n	8006794 <UART_SetConfig+0xa80>
 8006782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d204      	bcs.n	8006794 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006790:	60da      	str	r2, [r3, #12]
 8006792:	e002      	b.n	800679a <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 8006794:	2301      	movs	r3, #1
 8006796:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2201      	movs	r2, #1
 80067a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80067b6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3738      	adds	r7, #56	; 0x38
 80067be:	46bd      	mov	sp, r7
 80067c0:	bdb0      	pop	{r4, r5, r7, pc}
 80067c2:	bf00      	nop
 80067c4:	58024400 	.word	0x58024400
 80067c8:	03d09000 	.word	0x03d09000
 80067cc:	003d0900 	.word	0x003d0900
 80067d0:	08006e44 	.word	0x08006e44

080067d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01a      	beq.n	80068ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d2:	d10a      	bne.n	80068ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af02      	add	r7, sp, #8
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006928:	f7fa fba2 	bl	8001070 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b08      	cmp	r3, #8
 800693a:	d10e      	bne.n	800695a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800693c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f82f 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e025      	b.n	80069a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b04      	cmp	r3, #4
 8006966:	d10e      	bne.n	8006986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f819 	bl	80069ae <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00f      	b.n	80069a6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3710      	adds	r7, #16
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b084      	sub	sp, #16
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4613      	mov	r3, r2
 80069bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069be:	e062      	b.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c6:	d05e      	beq.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c8:	f7fa fb52 	bl	8001070 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	69ba      	ldr	r2, [r7, #24]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d302      	bcc.n	80069de <UART_WaitOnFlagUntilTimeout+0x30>
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d11d      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	689a      	ldr	r2, [r3, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2220      	movs	r2, #32
 8006a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e045      	b.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0304 	and.w	r3, r3, #4
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d02e      	beq.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a36:	d126      	bne.n	8006a86 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a40:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	689a      	ldr	r2, [r3, #8]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0201 	bic.w	r2, r2, #1
 8006a60:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2220      	movs	r2, #32
 8006a66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e00f      	b.n	8006aa6 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	bf0c      	ite	eq
 8006a96:	2301      	moveq	r3, #1
 8006a98:	2300      	movne	r3, #0
 8006a9a:	b2db      	uxtb	r3, r3
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	79fb      	ldrb	r3, [r7, #7]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d08d      	beq.n	80069c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006ac6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6899      	ldr	r1, [r3, #8]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	; (8006b10 <UART_EndRxTransfer+0x60>)
 8006ad4:	400b      	ands	r3, r1
 8006ad6:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d107      	bne.n	8006af0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f022 0210 	bic.w	r2, r2, #16
 8006aee:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr
 8006b10:	effffffe 	.word	0xeffffffe

08006b14 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b20:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7ff f8d8 	bl	8005ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b38:	bf00      	nop
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b56:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7ff f8b4 	bl	8005cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6c:	bf00      	nop
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b7c:	bf00      	nop
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr

08006b9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b083      	sub	sp, #12
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d101      	bne.n	8006bc6 <HAL_UARTEx_DisableFifoMode+0x16>
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	e027      	b.n	8006c16 <HAL_UARTEx_DisableFifoMode+0x66>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2224      	movs	r2, #36	; 0x24
 8006bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0201 	bic.w	r2, r2, #1
 8006bec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006bf4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	68fa      	ldr	r2, [r7, #12]
 8006c02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d101      	bne.n	8006c3a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c36:	2302      	movs	r3, #2
 8006c38:	e02d      	b.n	8006c96 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2224      	movs	r2, #36	; 0x24
 8006c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	683a      	ldr	r2, [r7, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f850 	bl	8006d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
 8006ca6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d101      	bne.n	8006cb6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	e02d      	b.n	8006d12 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2224      	movs	r2, #36	; 0x24
 8006cc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0201 	bic.w	r2, r2, #1
 8006cdc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f812 	bl	8006d1c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
	...

08006d1c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d108      	bne.n	8006d3e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d3c:	e031      	b.n	8006da2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d3e:	2310      	movs	r3, #16
 8006d40:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d42:	2310      	movs	r3, #16
 8006d44:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	0e5b      	lsrs	r3, r3, #25
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	f003 0307 	and.w	r3, r3, #7
 8006d54:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	0f5b      	lsrs	r3, r3, #29
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	f003 0307 	and.w	r3, r3, #7
 8006d64:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d66:	7bbb      	ldrb	r3, [r7, #14]
 8006d68:	7b3a      	ldrb	r2, [r7, #12]
 8006d6a:	4911      	ldr	r1, [pc, #68]	; (8006db0 <UARTEx_SetNbDataToProcess+0x94>)
 8006d6c:	5c8a      	ldrb	r2, [r1, r2]
 8006d6e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006d72:	7b3a      	ldrb	r2, [r7, #12]
 8006d74:	490f      	ldr	r1, [pc, #60]	; (8006db4 <UARTEx_SetNbDataToProcess+0x98>)
 8006d76:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d78:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d7c:	b29a      	uxth	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	7b7a      	ldrb	r2, [r7, #13]
 8006d88:	4909      	ldr	r1, [pc, #36]	; (8006db0 <UARTEx_SetNbDataToProcess+0x94>)
 8006d8a:	5c8a      	ldrb	r2, [r1, r2]
 8006d8c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d90:	7b7a      	ldrb	r2, [r7, #13]
 8006d92:	4908      	ldr	r1, [pc, #32]	; (8006db4 <UARTEx_SetNbDataToProcess+0x98>)
 8006d94:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d96:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006da2:	bf00      	nop
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	08006e5c 	.word	0x08006e5c
 8006db4:	08006e64 	.word	0x08006e64

08006db8 <__libc_init_array>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	4d0d      	ldr	r5, [pc, #52]	; (8006df0 <__libc_init_array+0x38>)
 8006dbc:	4c0d      	ldr	r4, [pc, #52]	; (8006df4 <__libc_init_array+0x3c>)
 8006dbe:	1b64      	subs	r4, r4, r5
 8006dc0:	10a4      	asrs	r4, r4, #2
 8006dc2:	2600      	movs	r6, #0
 8006dc4:	42a6      	cmp	r6, r4
 8006dc6:	d109      	bne.n	8006ddc <__libc_init_array+0x24>
 8006dc8:	4d0b      	ldr	r5, [pc, #44]	; (8006df8 <__libc_init_array+0x40>)
 8006dca:	4c0c      	ldr	r4, [pc, #48]	; (8006dfc <__libc_init_array+0x44>)
 8006dcc:	f000 f820 	bl	8006e10 <_init>
 8006dd0:	1b64      	subs	r4, r4, r5
 8006dd2:	10a4      	asrs	r4, r4, #2
 8006dd4:	2600      	movs	r6, #0
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	d105      	bne.n	8006de6 <__libc_init_array+0x2e>
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de0:	4798      	blx	r3
 8006de2:	3601      	adds	r6, #1
 8006de4:	e7ee      	b.n	8006dc4 <__libc_init_array+0xc>
 8006de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dea:	4798      	blx	r3
 8006dec:	3601      	adds	r6, #1
 8006dee:	e7f2      	b.n	8006dd6 <__libc_init_array+0x1e>
 8006df0:	08006e74 	.word	0x08006e74
 8006df4:	08006e74 	.word	0x08006e74
 8006df8:	08006e74 	.word	0x08006e74
 8006dfc:	08006e78 	.word	0x08006e78

08006e00 <memset>:
 8006e00:	4402      	add	r2, r0
 8006e02:	4603      	mov	r3, r0
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d100      	bne.n	8006e0a <memset+0xa>
 8006e08:	4770      	bx	lr
 8006e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e0e:	e7f9      	b.n	8006e04 <memset+0x4>

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
